{
    "version": "https://jsonfeed.org/version/1",
    "title": "余弦の博客",
    "subtitle": "WA的一声就哭了",
    "icon": "https://ysx.cosine.ren/images/favicon.ico",
    "description": "愿岁并谢，与友长兮",
    "home_page_url": "https://ysx.cosine.ren",
    "items": [
        {
            "id": "https://ysx.cosine.ren/back-end/go_learning_2/",
            "url": "https://ysx.cosine.ren/back-end/go_learning_2/",
            "title": "Go语言初上手（二） 工程实践 | 青训营",
            "date_published": "2022-05-08T13:44:01.000Z",
            "content_html": "<h1 id=\"并发编程\"><a class=\"anchor\" href=\"#并发编程\">#</a> 并发编程</h1>\n<ul>\n<li>\n<p><strong>并发</strong> 是多线程程序在一个核的 cpu 上运行<br />\n<img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a70946937e54495499958900ad320e99~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p><strong>并行</strong> 是多线程程序在多个核的上运行<br />\n<img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4a9265f431c442a84b7012ac324c697~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>Go 可以充分发挥多核优势，高效运行<br />\n一个重要概念</p>\n</li>\n</ul>\n<h2 id=\"协程\"><a class=\"anchor\" href=\"#协程\">#</a> 协程</h2>\n<ul>\n<li>协程的开销比线程小，可以理解为轻量级的线程，一个 Go 程序中可以创建上万个协程。</li>\n</ul>\n<p>Go 中 <strong>开启协程</strong> 非常简单，在函数前面增加一个  <code>go</code>  关键字就可以为一个函数开启一个协程。</p>\n<h2 id=\"csp-与-channel\"><a class=\"anchor\" href=\"#csp-与-channel\">#</a> CSP 与 Channel</h2>\n<p>CSP(Communicating Sequential Process)</p>\n<p>Go 中提倡通过 <strong>通信共享内存</strong> 而不是通过共享内存而实现通信</p>\n<p>那么如何通信呢，通过  <code>channel</code></p>\n<h3 id=\"channel\"><a class=\"anchor\" href=\"#channel\">#</a> Channel</h3>\n<p>语法：  <code>make(chan 元素类型, [缓冲大小])</code></p>\n<ul>\n<li>无缓冲通道  <code>make(chan int)</code></li>\n<li>有缓冲通道  <code>make(chan int, 2)</code> <br />\n 这个图就非常的生动形象～<br />\n<img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f103155c3ea8443a98bc54595e52cbfd~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></li>\n</ul>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7f6b92f7e344344a25b8fee23707079~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>以下是一个例子：</p>\n<ul>\n<li>第一个协程 作为生产者发送 <code>0~9</code>  到  <code>src</code>  中</li>\n<li>第二个协程 作为消费者计算  <code>src</code>  中每个数的平方发送到  <code>dest</code>  中</li>\n<li>主线程输出  <code>dest</code>  中每个数</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CalSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   src <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   dest <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 消费者 带缓冲解决生产者太快的问题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>               <span class=\"token comment\">// 该线程发送 0~9 至 src 中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token comment\">//defer 表示延迟到函数结束时执行 用于释放已分配的资源。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token comment\">// &lt;- 运算符 左侧为收集数据的一方 右侧为要传的数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         src <span class=\"token operator\">&lt;-</span> i</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 立即执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> src <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         dest <span class=\"token operator\">&lt;-</span> i <span class=\"token operator\">*</span> i</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> dest <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 其他复杂操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token function\">CalSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到每次都会是顺序输出，代表着 Go 是 <strong>并发安全的</strong></p>\n<p>Go 语言也保留了共享内存的做法，使用 sync 进行同步，如下</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">\"sync\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   x    <span class=\"token builtin\">int64</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   lock sync<span class=\"token punctuation\">.</span>Mutex</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">addWithLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//x 加到 2000 使用锁则很安全</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      x <span class=\"token operator\">+=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      x <span class=\"token operator\">-=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">addWithoutLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不使用锁</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      x <span class=\"token operator\">+=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      x <span class=\"token operator\">-=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">go</span> <span class=\"token function\">addWithoutLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 休眠 1s</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WithoutLock x =\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">go</span> <span class=\"token function\">addWithLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 休眠 1s</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WithLock x =\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ps：试了好多次都没冲突，乐。把运算稍微改复杂一点就有冲突了</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e6a09747944a53be508927a76745ef~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<h1 id=\"依赖管理\"><a class=\"anchor\" href=\"#依赖管理\">#</a> 依赖管理</h1>\n<p>任何大型项目开发都绕不开依赖管理，Go 中的依赖主要经历了 GOPATH -&gt; Go Vendor -&gt; Go Module 的演变 而现在主要采用 Go Module 的方式</p>\n<ul>\n<li>不同环境依赖的版本不同，所以如何控制依赖库的版本？</li>\n</ul>\n<h2 id=\"gopath\"><a class=\"anchor\" href=\"#gopath\">#</a> GOPATH</h2>\n<ul>\n<li>项目代码直接依赖 src 下的代码</li>\n<li>通过  <code>go get</code>  下载最新版本的包到 src 目录下</li>\n</ul>\n<p>这样的话，就会出现一个问题：无法实现多版本的控制（A、B 依赖于同一个包的不同版本，寄）</p>\n<h2 id=\"go-vender\"><a class=\"anchor\" href=\"#go-vender\">#</a> Go Vender</h2>\n<ul>\n<li>项目目录下新增  <code>vendor</code>  文件，所有依赖包副本形式放在其中</li>\n<li>通过 vendor =&gt; GOPATH 的方式曲线救国</li>\n</ul>\n<p>ps：感觉挺像前端的 package.json…… 依赖问题真是绕不过去</p>\n<p>这又产生了新的问题：</p>\n<ul>\n<li>无法控制依赖的版本</li>\n<li>更新项目时可能出现依赖冲突，从而导致编译出错</li>\n</ul>\n<h2 id=\"go-module\"><a class=\"anchor\" href=\"#go-module\">#</a> Go Module</h2>\n<ul>\n<li>通过  <code>go.mod</code>  文件管理依赖包版本</li>\n<li>通过  <code>go get/go mod</code>  指令工具管理依赖包</li>\n</ul>\n<p>达成了终极目标：既能定义版本规则，又能管理项目依赖关系</p>\n<p>可以类比一下 Java 中的 Maven</p>\n<h2 id=\"依赖配置-gomod\"><a class=\"anchor\" href=\"#依赖配置-gomod\">#</a> 依赖配置  <code>go.mod</code></h2>\n<p>依赖标识语法：模块路径 + 版本来进行唯一标识</p>\n<p><code>[Module Path][Version/Pseudo-version]</code></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module example<span class=\"token operator\">/</span>project<span class=\"token operator\">/</span>app     依赖管理基本单元</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">go</span> <span class=\"token number\">1.16</span>     原生库</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>require <span class=\"token punctuation\">(</span>    单元依赖</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    example<span class=\"token operator\">/</span>lib1 v1<span class=\"token punctuation\">.</span><span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    example<span class=\"token operator\">/</span>lib2 v1<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span> <span class=\"token comment\">// indirect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    example<span class=\"token operator\">/</span>lib3 v0<span class=\"token punctuation\">.</span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span><span class=\"token number\">20190725025543</span><span class=\"token operator\">-</span>5a5fe074e612</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    example<span class=\"token operator\">/</span>lib4 v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span><span class=\"token operator\">-</span><span class=\"token number\">20180306012644</span><span class=\"token operator\">-</span>bacd9c7ef1dd <span class=\"token comment\">// indirect</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    example<span class=\"token operator\">/</span>lib5<span class=\"token operator\">/</span>v3 v3<span class=\"token punctuation\">.</span><span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    example<span class=\"token operator\">/</span>lib6 v3<span class=\"token punctuation\">.</span><span class=\"token number\">2.0</span><span class=\"token operator\">+</span>incompatible</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如上，需要注意的是：</p>\n<ul>\n<li>主版本 2 + 的模块会在路径后增加 /vN 后缀</li>\n<li>对于没有 go.mod 文件且主版本 2 + 的依赖，会  <code>+incompatible</code> <br />\n 依赖的版本规则分为语义化版本和基于 commit 的伪版本</li>\n</ul>\n<h3 id=\"语义化版本\"><a class=\"anchor\" href=\"#语义化版本\">#</a> 语义化版本</h3>\n<p>格式为： <code>$&#123;MAJOR&#125;.$&#123;MINOR&#125;.$&#123;PATCH&#125;</code>  V1.3.0、V2.3.0、 ……</p>\n<ul>\n<li>不同的  <code>MAJOR</code>  版本表示是<strong>不兼容的 API</strong>\n<ul>\n<li>即使是同一个库，MAJOR 版本不同也会被认为是不同的模块</li>\n</ul>\n</li>\n<li><code>MINOR</code>  版本通常是<strong>新增函数或功能</strong>，<strong>向后兼容</strong></li>\n<li>而  <code>PATCH</code>  版本一般是 <strong>修复  <code>bug</code> </strong></li>\n</ul>\n<h3 id=\"基于commit的版本\"><a class=\"anchor\" href=\"#基于commit的版本\">#</a> 基于 commit 的版本</h3>\n<p>格式为： <code>$&#123;vx.0.0-yyyymmddhhmmss-abcdefgh1234&#125;</code></p>\n<ul>\n<li>版本前缀是和语义化版本一样的</li>\n<li>时间戳 ( <code>yyyymmddhhmmss</code> )，也就是<strong>提交  <code>Commit</code>  的时间</strong></li>\n<li>校验码 ( <code>abcdefgh1234</code> ), 12 位的哈希前缀\n<ul>\n<li>每次提交  <code>commit</code>  后 Go 都会默认生成一个伪版本号</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"小测试\"><a class=\"anchor\" href=\"#小测试\">#</a> 小测试</h2>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/837629fe64b0400d87d21752eb2f2cef~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<ol>\n<li class=\"quiz\">如果 X 项目依赖了 A、B 两个项目，且 A、B 分别依赖了 C 项目的 v1.3、v1.4 两个版本，依赖图如上，<strong>最终编译</strong>时所使用的 C 项目的版本为 <span class=\"gap\"></span> ？\n<ul class=\"options\">\n<li>v1.3</li>\n<li class=\"correct\">v1.4  </li>\n<li>A 用到 c 时用 v1.3 编译，B 用到 c 时用 v1.4 编译</li>\n</ul>\n<blockquote>\n<p>答案为：<strong>B 选择最低的兼容版本</strong> <br />\n这个是 Go 进行版本选择的算法，选择最低的兼容版本，而 1.4 版本是向下兼容 1.3 的（语义化版本）。为什么不选 1.3 呢？因为他又不会向上兼容 ovo，倘若还有 1.5 的话则不会选用 1.5，因为 1.4 就是满足要求的最低兼容版本。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"依赖分发\"><a class=\"anchor\" href=\"#依赖分发\">#</a> 依赖分发</h2>\n<p>这些依赖去哪里下载呢？就是依赖分发</p>\n<p>在 github 等代码托管系统中对应仓库上下载？</p>\n<p>github 是比较常见给的代码托管系统平台，而 <code>Go Modules</code>  系统中定义的依赖，最终可以<strong>对应</strong>到多版本代码管理系统中某一项目的<strong>特定提交或版本</strong></p>\n<p>对于  <code>go.mod</code>  中定义的依赖，可以从对应仓库中下载指定软件依赖，从而完成依赖分发。</p>\n<p>问题也有：</p>\n<ul>\n<li><strong>无法保证构建确定性</strong>\n<ul>\n<li>软件作者直接修改软件版本，导致下次构建使用其他版本的依赖，或者找不到依赖版本</li>\n</ul>\n</li>\n<li><strong>无法保证依赖可用性</strong>\n<ul>\n<li>软件作者直接代码平台删除软件，导致依赖不可用</li>\n</ul>\n</li>\n<li><strong>增加第三方代码托管平台压力</strong>。</li>\n</ul>\n<p>通过 Proxy 方式来解决以上问题</p>\n<p><code>Go Proxy</code>  是一个服务站点，它会<strong>缓存源站中的软件内容</strong>，缓存的软件版本不会改变，并且<strong>在源站软件删除之后依然可用</strong></p>\n<p>使用 Go Proxy 之后，构建时会直接从 Go Proxy 站点拉取依赖。</p>\n<p>Go Modules 通过 <strong> <code>GOPROXY</code>  环境变量</strong>控制如何使用  <code>Go Proxy</code></p>\n<p>服务站点 URL 列表，direct 表示源站： <code>GOPROXY=&quot;https://proxy1.cn, https://proxy2.cn,direct&quot;</code></p>\n<ul>\n<li>GOPROXY 是一个 <strong>Go Proxy 站点 URL 列表</strong>，可以使用  <code>direct</code>  表示源站。整体的依赖寻址路径，会优先从  <code>proxy1</code>  下载依赖，如果  <code>proxy1</code>  不存在，就下到  <code>proxy2</code>  寻找，如果 <code>proxy2</code>  也不存在则会<strong>回源</strong>到源站直接下载依赖，缓存到  <code>proxy</code>  站点中。</li>\n</ul>\n<h2 id=\"工具\"><a class=\"anchor\" href=\"#工具\">#</a> 工具</h2>\n<p><code>go get example.org/pkg</code></p>\n<table>\n<thead>\n<tr>\n<th>后缀</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@update</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>@none</td>\n<td>删除依赖</td>\n</tr>\n<tr>\n<td>@v1.1.2</td>\n<td>tag 版本，语义版本</td>\n</tr>\n<tr>\n<td>@23dfdd5</td>\n<td>特定的 commit</td>\n</tr>\n<tr>\n<td>master</td>\n<td>分支的最新 commit</td>\n</tr>\n</tbody>\n</table>\n<p><code>go mod</code></p>\n<table>\n<thead>\n<tr>\n<th>后缀</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>init</td>\n<td>初始化，创建 go.mod 文件</td>\n</tr>\n<tr>\n<td>download</td>\n<td>下载模炔到本地缓存</td>\n</tr>\n<tr>\n<td>tidy</td>\n<td>增加需要的依赖，删除不需要的依赖</td>\n</tr>\n</tbody>\n</table>\n<p>go mod tidy 可以在每次提交代码前执行一下，就可以减少构建整个项目的时间</p>\n<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<p>测试一般分为<strong>回归测试</strong>、<strong>集成测试</strong>、<strong>单元测试</strong>，从前到后<strong>覆盖率逐层变大</strong>，<strong>成本却逐层降低</strong>，所以<strong>单元测试的覆盖率</strong>一定程度上决定这代码的质量。</p>\n<ul>\n<li>回归测试一般是 QA 同学手动通过终端回归一些固定的主流程场景</li>\n<li>集成测试是对系统功能维度做测试验证</li>\n<li>单元测试测试开发阶段，开发者对单独的函数、模块做功能验证</li>\n</ul>\n<p>单元测试主要包括：<strong>输入</strong>、<strong>测试单元</strong>、<strong>输出</strong>以及<strong>校对</strong></p>\n<p>单元的概念较广，包括接口，函数，模块等，用最后的校对来保证代码的功能与我们的预期相符</p>\n<p>单元测试有以下几点好处</p>\n<ul>\n<li>保证质量\n<ul>\n<li>整体覆盖率足够时下，既保证了新功能正确性，又未破坏原有代码的正确性</li>\n</ul>\n</li>\n<li>提升效率\n<ul>\n<li>代码有 bug 的情况下，通过单测，可以在一个较短周期内定位和修复问题</li>\n</ul>\n</li>\n</ul>\n<p>Go 中的单元测试有以下规则：</p>\n<ul>\n<li>所有测试文件以  <code>_test.go</code>  结尾</li>\n<li><code>func TestXxx(testing.T)</code></li>\n<li>初始化逻辑放到  <code>TestMain</code>  函数中（测试前的数据装载配置、测试后的释放资源等）</li>\n</ul>\n<p>例子：<br />\nmain.go</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">HelloTom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"Jerry\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>main_test.go</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"testing\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">TestHelloTom</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   output <span class=\"token operator\">:=</span> <span class=\"token function\">HelloTom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   expectOutput <span class=\"token operator\">:=</span> <span class=\"token string\">\"Tom\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> expectOutput <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expect %s do not match actual %s\"</span><span class=\"token punctuation\">,</span> expectOutput<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c37e39ccecd494e8fac79eaa42c5a87~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>在实际项目中，单测覆盖率</p>\n<ul>\n<li>一般项目的要求是 50%~60% 覆盖率</li>\n<li>对于重要的资金型服务，覆盖率可能要求达到 80%</li>\n</ul>\n<p>单测需要保证<strong>稳定性</strong>和<strong>幂等性</strong></p>\n<ul>\n<li>稳定是指<strong>相互隔离</strong>，能在任何时间，任何环境，运行测试</li>\n<li>幂等是指每一次测试运行都应该产生与之前<strong>一样的结果</strong></li>\n</ul>\n<p>而要实现这一目的就要用到 <code>mock</code>  机制。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JvdWsvbW9ua2V5\">bouk/monkey: Monkey patching in Go</span></p>\n<p>monkey 是一个开源的 mock 测试库，可以对 method，或者实例的方法进行 mock，反射，指针赋值 Mockey Patch 的作用域在 Runtime，在运行时通过 Go 的 unsafe 包，能够将内存中函数 A 的地址替换为运行时函数 B 的地址，将待打桩函数的实现跳转。</p>\n<p>Go 语言还提供了基准测试框架</p>\n<ul>\n<li><strong>基准测试</strong>是指测试一段程序的运行性能及耗费 CPU 的程度。</li>\n</ul>\n<p>而我们在实际项目开发中，经常会遇到代码性能瓶颈问题，为了定位问题经常要对代码做<strong>性能分析</strong>，这就用到了基准测试。使用方法类似于单元测试</p>\n<blockquote>\n<p>提到了 <code>fastrand</code> ，地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVkYW5jZS9nb3BrZw==\">bytedance/gopkg: Universal Utilities for Go</span></p>\n</blockquote>\n<h1 id=\"总结及心得\"><a class=\"anchor\" href=\"#总结及心得\">#</a> 总结及心得</h1>\n<p>本节课主要讲了 Go 中的并发管理、依赖配置和测试，内容较多，需要好好消化。后面还有个项目实践环节，等明天在进行一个实践。</p>\n<blockquote>\n<p>本节课内容来源于第三届青训营赵征老师的课程</p>\n</blockquote>\n",
            "tags": [
                "笔记",
                "青训营笔记",
                "后端",
                "Go"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/back-end/go_learning_1/",
            "url": "https://ysx.cosine.ren/back-end/go_learning_1/",
            "title": "Go语言初上手(一) 环境配置与基础语法 | 青训营",
            "date_published": "2022-05-07T05:35:01.000Z",
            "content_html": "<p>字节第三届青训营是后端专场，开课了，高高兴兴写笔记啦<br />\n课上很详细的讲了 Go 的基本语法，以及再加上自己阅读 Go 语言圣经的一些总结，得出了这一篇文章，感觉跟 JS 和 c/c++ 还是有很多共通之处的。</p>\n<p><span id=\"more\"></span></p>\n<p>内容来源于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDIvY2gyLmh0bWw=\">Go 语言圣经</span> 以及 第三届青训营课程<br />\n课程源码 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dhbmdrZWNodW4vZ28tYnktZXhhbXBsZQ==\">wangkechun/go-by-example</span></p>\n<h1 id=\"go-语言简介及安装\"><a class=\"anchor\" href=\"#go-语言简介及安装\">#</a> Go 语言简介及安装</h1>\n<h2 id=\"什么是go语言\"><a class=\"anchor\" href=\"#什么是go语言\">#</a> 什么是 Go 语言</h2>\n<ul>\n<li>高性能、高并发</li>\n<li>丰富的标准库</li>\n<li>完善的工具链</li>\n<li>静态链接</li>\n<li>快速编译</li>\n<li><strong>跨平台</strong></li>\n<li><strong>垃圾回收</strong></li>\n</ul>\n<p>总而言之，兼顾 c/c++ 的性能，并具有 python 等语言的简洁、完善的标准库</p>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<blockquote>\n<ol>\n<li>访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5kZXYv\">https://go.dev/</span> ，点击 Download ，下载对应平台安装包，安装即可</li>\n<li>如果无法访问上述网址，可以改为访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vZGw=\">https://studygolang.com/dl</span> 下载安装</li>\n<li>如果访问 github 速度比较慢，建议配置 go mod proxy，参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb3Byb3h5LmNuLw==\">https://goproxy.cn/</span> 里面的描述配置，下载第三方依赖包的速度可以大大加快</li>\n</ol>\n</blockquote>\n<h2 id=\"ide推荐\"><a class=\"anchor\" href=\"#ide推荐\">#</a> IDE 推荐</h2>\n<ul>\n<li>vscode 安装 Go 插件</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9nby8=\">GoLand</span> JetBrains 系列的新 IDE，dddd<br />\n<img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85a838397c9e4ba6a6f4338cd27138f7~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></li>\n</ul>\n<p>可以通过 Github 很方便的登录体验该课程的示例项目 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRwb2QuaW8vI2dpdGh1Yi5jb20vd2FuZ2tlY2h1bi9nby1ieS1leGFtcGxl\">Dashboard — Gitpod</span> （真好，我哭死）</p>\n<h1 id=\"基础数据类型\"><a class=\"anchor\" href=\"#基础数据类型\">#</a> 基础数据类型</h1>\n<h2 id=\"整型\"><a class=\"anchor\" href=\"#整型\">#</a> 整型</h2>\n<p>与 c++ 中类似，整型分有符号和无符号类型，有符号整数</p>\n<ul>\n<li>int8、int16、int32 和 int64</li>\n<li>对应 8 位、16 位、32 位、64 位大小的<strong>有符号整数</strong></li>\n<li>uint8、uint16、uint32 和 uint64 则对应<strong>无符号整数</strong></li>\n<li>另外的还有两种对应特定 CPU 平台<strong>机器字大小</strong>的有符号和无符号整数 <code>int</code>  和 <code>uint</code> ，其中 <code>int</code>  也是应用最广泛的数值类型，这两种类型都有同样的大小: 32 或 64bit\n<ul>\n<li>不同的编译器即使在相同的硬件平台上可能产生不同的大小。</li>\n</ul>\n</li>\n<li>Unicode 字符  <code>rune</code>  类型是和  <code>int32</code> <strong> 等价</strong>的类型，通常用于<strong>表示一个 Unicode 码点</strong>。这两个名称可以互换使用。</li>\n<li><code>byte</code>  是  <code>uint8</code>  类型的等价类型， <code>byte</code>  类型一般用于强调数值是一个原始的数据而不是一个小的整数。</li>\n<li><code>uintptr</code>  类型，<strong>没有指定具体的 bit 大小但是足以容纳指针</strong>。只有在底层编程时才需要，特别是 Go 语言和 C 语言函数库或操作系统接口相交互的地方。我们将在第十三章的 unsafe 包相关部分看到类似的例子</li>\n</ul>\n<p>可通过  <code>Printf</code>  函数的  <code>%b</code>  参数打印<strong>二进制格式</strong>的数字，用 <code>%d</code> 、 <code>%o</code>  或  <code>%x</code>  参数控制输出的进制格式，这部分与 c 中的格式化输出类似，</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"00100010\", the set &#123;1, 5&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o <span class=\"token operator\">:=</span> <span class=\"token number\">0666</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]o %#[1]o\\n\"</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"438 666 0666\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>x <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xdeadbeef</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]x %#[1]x %#[1]X\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// Output:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ascii <span class=\"token operator\">:=</span> <span class=\"token char\">'a'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>unicode <span class=\"token operator\">:=</span> <span class=\"token char\">'国'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>newline <span class=\"token operator\">:=</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]c %[1]q\\n\"</span><span class=\"token punctuation\">,</span> ascii<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"97 a 'a'\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]c %[1]q\\n\"</span><span class=\"token punctuation\">,</span> unicode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"22269 国 ' 国 '\"</span></pre></td></tr></table></figure><p>上面的例子中，一般情况下 Printf 格式化字符串包含多个 <code>%</code>  参数时将会包含对应相同数量的额外操作数，但是  <code>%</code>  之后的 <code>[1]</code>  副词告诉 <code>Printf</code>  函数<strong>再次使用第一个操作数</strong>。</p>\n<ul>\n<li><code>%</code>  后的 <code>#</code> 副词告诉 <code>Printf</code>  在用 <code>%o</code> 、 <code>%x</code>  或  <code>%X</code>  输出时生成 <code>0</code> 、 <code>0x</code>  或 <code>0X</code>  前缀。</li>\n<li>字符使用 <code>%c</code>  参数打印，或者使用  <code>%q</code>  参数打印<strong>带单引号的字符</strong></li>\n</ul>\n<p>内置的  <code>len</code>  函数返回一个有符号的 <code>int</code> ，可以像下面例子那样处理逆序循环。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>medals <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"gold\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"silver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bronze\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>medals<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>medals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"bronze\", \"silver\", \"gold\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"浮点数\"><a class=\"anchor\" href=\"#浮点数\">#</a> 浮点数</h2>\n<p>Go 中的浮点型有  <code>float32</code>  和  <code>float64</code></p>\n<p>其范围极限值可以在 math 包找到。</p>\n<ul>\n<li>常量  <code>math.MaxFloat32</code>  表示  <code>float32</code>  能表示的最大数值，大约是  <code>3.4e38</code> ；对应的  <code>math.MaxFloat64</code>  常量大约是  <code>1.8e308</code> 。它们分别能表示的最小值近似为  <code>1.4e-45</code>  和  <code>4.9e-324</code> 。</li>\n<li>使用 <code>Printf</code>  函数的  <code>%g</code>  参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是对应表格的数据，使用  <code>%e</code> （带指数）或  <code>%f</code>  的形式打印可能更合适。所有的这三个打印形式都可以指定<strong>打印的宽度</strong>和控制<strong>打印精度</strong>。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x = %d e^x = %8.3f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// x = 0       e^x =    1.000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// x = 1       e^x =    2.718</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// x = 2       e^x =    7.389</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// x = 3       e^x =   20.086</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// x = 4       e^x =   54.598</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// x = 5       e^x =  148.413</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// x = 6       e^x =  403.429</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// x = 7       e^x = 1096.633</span></pre></td></tr></table></figure><p>math 包中除了提供大量常用的数学函数外，还提供了 IEEE754 浮点数标准中定义的特殊值的创建和测试：正无穷大和负无穷大 <code>Inf -Inf</code> ，分别用于表示太大溢出的数字和除零的结果；还有  <code>NaN</code>  非数，一般用于表示<strong>无效的除法操作结果</strong>，如 0/0 或 Sqrt (-1)</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> z <span class=\"token builtin\">float64</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>z<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span>z<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>z<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0 -0 +Inf -Inf NaN\"</span></pre></td></tr></table></figure><ul>\n<li>Go 中的  <code>NaN</code>  与 JS 中类似，跟任何数都是不相等的，包括其自身，可以用 <code>math.IsNaN</code>  用于测试一个数是否是非数  <code>NaN</code></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nan <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">NaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>nan <span class=\"token operator\">==</span> nan<span class=\"token punctuation\">,</span> nan <span class=\"token operator\">&lt;</span> nan<span class=\"token punctuation\">,</span> nan <span class=\"token operator\">></span> nan<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"false false false\"</span></pre></td></tr></table></figure><h2 id=\"复数\"><a class=\"anchor\" href=\"#复数\">#</a> 复数</h2>\n<p>Go 语言提供了两种精度的复数类型： <code>complex64</code>  和 <code>complex128</code> ，分别对应 <code>float32</code>  和 <code>float64</code>  两种浮点数精度。内置的  <code>complex</code>  函数用于构建复数，内建的  <code>real</code>  和  <code>imag</code>  函数分别返回复数的<strong>实部</strong>和<strong>虚部</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1+2i</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> y <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3+4i</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// \"(-5+10i)\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// \"-5\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// \"10\"</span></pre></td></tr></table></figure><p>如果一个浮点数面值或一个十进制整数面值后面跟着一个 i，例如 <code>3.141592i</code>  或 <code>2i</code> ，它将构成一个复数的<strong>虚部</strong>，复数的<strong>实部是 0</strong>：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1i</span> <span class=\"token operator\">*</span> <span class=\"token number\">1i</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(-1+0i)\", i^2 = -1</span></pre></td></tr></table></figure><p>一个复数常量可以正常加到另一个普通数值常量</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1i</span> <span class=\"token operator\">*</span> <span class=\"token number\">1i</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(-1+0i)\", i^2 = -1</span></pre></td></tr></table></figure><p>math/cmplx 包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(0+1i)\"</span></pre></td></tr></table></figure><h2 id=\"布尔型\"><a class=\"anchor\" href=\"#布尔型\">#</a> 布尔型</h2>\n<p><code>true</code>  or  <code>false</code> ，这一点没什么好说的。</p>\n<h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<p>Go 中的字符串类型 <code>string</code>  是 <strong>不可变字符串</strong>，与 JS 一样，与 c++ 不同。</p>\n<blockquote>\n<p>不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。同样，一个字符串 s 和对应的子字符串切片 s [7:] 的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。在这两种情况下都没有必要分配新的内存。</p>\n</blockquote>\n<p>字符串中的第  <code>i</code>  个字节并不一定是字符串的第  <code>i</code>  个字符，因为对于非 ASCII 字符的 UTF8 编码会要两个或多个字节。</p>\n<p><code>s[i:j]</code>  基于原始的  <code>s</code>  字符串的第  <code>i</code>  个字节开始到第  <code>j</code>  个字节（<strong>不包含  <code>j</code>  本身</strong>）生成一个新字符串。生成的新字符串将包含  <code>j-i</code>  个字节。</p>\n<ul>\n<li><code>i</code>  和  <code>j</code>  都可以被忽略，当它们被忽略时将采用 <code>0</code>  作为开始位置，采用 <code>len(s)</code>  作为结束的位置。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"hello, world\"</span></pre></td></tr></table></figure><p><code>+</code>  操作符将两个字符串连接构造一个新字符串：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goodbye\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"goodbye, world\"</span></pre></td></tr></table></figure><p>字符串的比较是通过逐个字节比较完成的，比较结果是字符串自然编码的顺序。</p>\n<p>Go 语言源文件总是用 UTF8 编码，并且 Go 语言的文本字符串也以 UTF8 编码的方式处理，因此我们可以将 Unicode 码点也写到字符串面值中。</p>\n<p>一个<strong>原生的字符串面值</strong>形式如下，使用反引号代替双引号。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> GoUsage <span class=\"token operator\">=</span> <span class=\"token string\">`Go is a tool for managing Go source code.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Usage:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    go command [arguments]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>...`</span></pre></td></tr></table></figure><p>在原生的字符串面值中，<strong>没有转义操作</strong>；全部的内容都是字面的意思，包含退格和换行，因此一个程序中的原生字符串面值可能跨越多行</p>\n<ul>\n<li>在原生字符串面值内部是无法直接写・反引号的，可以用八进制或十六进制转义或 +&quot;`&quot; 连接字符串常量完成）。</li>\n<li>唯一的特殊处理是会<strong>删除回车</strong>以保证在所有平台上的值都是一样的，包括那些把回车也放入文本文件的系统</li>\n</ul>\n<blockquote>\n<p>Windows 系统会把回车和换行一起放入文本文件中</p>\n</blockquote>\n<p>以下是一些字符串方法</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"strings\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ta <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"he\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"llo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"he\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"llo\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he-llo</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\">// hellohello</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// hEllo</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a-b-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// [a b c]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// hello</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// HELLO</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                   <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tb <span class=\"token operator\">:=</span> <span class=\"token string\">\"你好\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 go 语言里面的话，可以很轻松地用  <code>%v</code>  来打印<strong>任意类型的变量</strong>，而不需要区分数字字符串，也可以用  <code>%+v</code>  打印详细结果， <code>%#v</code>  则更详细。</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> point <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tx<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tn <span class=\"token operator\">:=</span> <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tp <span class=\"token operator\">:=</span> point<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello 123</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// &#123;1 2&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s=%v\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// s=hello</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=%v\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// n=123</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p=%v\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// p=&#123;1 2&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p=%+v\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// p=&#123;x:1 y:2&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p=%#v\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// p=main.point&#123;x:1, y:2&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tf <span class=\"token operator\">:=</span> <span class=\"token number\">3.141592653</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 3.141592653</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3.14</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字符串和数字转换\"><a class=\"anchor\" href=\"#字符串和数字转换\">#</a> 字符串和数字转换</h3>\n<p>go 语言当中，关于字符串和数字类型之间的转换都在  <code>strconv</code>  这个包下，这个包是 string convert 这两个单词的缩写。可以用  <code>ParseInt</code>  或者  <code>ParseFloat</code>  来解析一个字符串。也可以用 Atoi 把一个十进制字符串转成数字。可以用  <code>Itoa</code>  把数字转成字符串。</p>\n<ul>\n<li>如果输入不合法，那么这些函数都会返回 error <strong>除了 Itoa</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"strconv\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.234\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1.234</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 111</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x1000\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4096</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tn2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tn2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 strconv.Atoi: parsing \"AAA\": invalid syntax</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tn3 <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这个不返回 error</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h2>\n<p>同其他语言的常量一样，常量的值不可修改，且必须被初始化，若批量声明常量时其除第一个其他的初始化表达式可被省略，若省略则使用前面的常量表初始化表达式，如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span> <span class=\"token comment\">// approximately; math.Pi is a better approximation</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    e  <span class=\"token operator\">=</span> <span class=\"token number\">2.71828182845904523536028747135266249775724709369995957496696763</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159265358979323846264338327950288419716939937510582097494459</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    b</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    d</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"iota-常量生成器\"><a class=\"anchor\" href=\"#iota-常量生成器\">#</a>  <code>iota</code>  常量生成器</h3>\n<blockquote>\n<p>类似 c/c++ 中的枚举类型  <code>Enum</code> !!</p>\n</blockquote>\n<p>常量声明可以使用 <code>iota</code>  常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。在一个  <code>const</code>  声明语句中，在第一个声明的常量所在的行， <code>iota</code>  将会被置为  <code>0</code> ，然后在每一个有常量声明的行加一。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Weekday <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Sunday Weekday <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Monday</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Tuesday</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Wednesday</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Thursday</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Friday</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Saturday</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// Sunday 对应 0 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Monday 对应 1 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Saturday 对应 6</span></pre></td></tr></table></figure><p>也可以结合复杂的表达式使用  <code>itoa</code> ，如下例：每个常量对应表达式 <code>1 &lt;&lt; iota</code> ，是<strong>连续的 2 的幂</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Flags <span class=\"token builtin\">uint</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    FlagUp Flags <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// is up</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FlagBroadcast            <span class=\"token comment\">// supports broadcast access capability</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FlagLoopback             <span class=\"token comment\">// is a loopback interface</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    FlagPointToPoint         <span class=\"token comment\">// belongs to a point-to-point link</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    FlagMulticast            <span class=\"token comment\">// supports multicast access capability</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>FlagUp<span class=\"token punctuation\">,</span> FlagBroadcast<span class=\"token punctuation\">,</span> FlagLoopback<span class=\"token punctuation\">,</span> FlagPointToPoint<span class=\"token punctuation\">,</span> FlagMulticast<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 1 2 4 8 16</span></pre></td></tr></table></figure><h3 id=\"无类型常量\"><a class=\"anchor\" href=\"#无类型常量\">#</a> 无类型常量</h3>\n<p>许多常量并没有一个明确的基础类型。Go 的编译器为这些没有明确基础类型的数字常量提供比基础类型更高精度的算术运算；你可以认为 <strong>至少有 256bit 的运算精度</strong> 。这里有六种未明确类型的常量类型，分别是无类型的布尔型、无类型的整数、无类型的字符、无类型的浮点数、无类型的复数、无类型的字符串。</p>\n<p>只有常量可以是无类型的。当一个无类型的常量被赋值给一个变量的时候，无类型的常量将会被<strong>隐式转换</strong>为对应的类型，如果转换合法的话。</p>\n<ul>\n<li>对于<strong>没有显式类型的变量声明</strong>（包括简短变量声明），常量的形式将<strong>隐式决定</strong>变量的默认类型，\n<ul>\n<li>无类型整数常量转换为  <code>int</code> ，它的<strong>内存大小是不确定</strong>的，无类型浮点数和复数常量则转换为<strong>内存大小明确</strong>的  <code>float64</code>  和  <code>complex128</code> 。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"程序结构\"><a class=\"anchor\" href=\"#程序结构\">#</a> 程序结构</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDIvY2gyLmh0bWw=\">https://books.studygolang.com/gopl-zh/ch2/ch2.html</span></p>\n<h2 id=\"声明与变量\"><a class=\"anchor\" href=\"#声明与变量\">#</a> 声明与变量</h2>\n<h3 id=\"var\"><a class=\"anchor\" href=\"#var\">#</a> var</h3>\n<p>一般语法如下</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> 变量名 类型 <span class=\"token operator\">=</span> 表达式</pre></td></tr></table></figure><p>类型省略则根据表达式自动推导，如果表达式为空，则用 <strong>零值</strong> 初始化该变量（因此在 Go 语言中<strong>不存在未初始化的变量</strong>）</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>零值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数值</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td>布尔</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>&quot;&quot;</td>\n</tr>\n<tr>\n<td>数组或结构体等聚合类型</td>\n<td><code>nil</code></td>\n</tr>\n</tbody>\n</table>\n<p>可以在一个声明语句中同时声明一组变量，或用一组初始化表达式声明并初始化一组变量。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span>     <span class=\"token comment\">// int int int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span> <span class=\"token comment\">// bool float64 string</span></pre></td></tr></table></figure><p>一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// os.Open returns a file and an error</span></pre></td></tr></table></figure><h3 id=\"简短变量声明\"><a class=\"anchor\" href=\"#简短变量声明\">#</a> 简短变量声明  <code>:=</code></h3>\n<p>以 <code>名字 := 表达式</code> 的形式声明变量，变量的类型根据表达式来自动推导</p>\n<ul>\n<li>因为其简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。</li>\n<li>而 var 形式的声明语句往往是用于需要显式指定变量类型的地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">:=</span> <span class=\"token number\">100</span>                  <span class=\"token comment\">// int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>              <span class=\"token comment\">// int int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> boiling <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// a float64</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> names <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span></pre></td></tr></table></figure><ul>\n<li>简短变量声明语句对在同级词法域已经声明过的变量只会进行赋值行为</li>\n<li>如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量</li>\n</ul>\n<h3 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h3>\n<p>与 c 语言中类似，通过  <code>&amp;</code>  操作符取址，通过  <code>*</code>  取值</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">:=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>x         <span class=\"token comment\">// p, of type *int, points to x</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>          <span class=\"token comment\">// equivalent to x = 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"2\"</span></pre></td></tr></table></figure><p>任何类型的指针的零值都是  <code>nil</code> 。</p>\n<ul>\n<li>若 <code>p</code>  指向某个有效变量，那么  <code>p != nil</code>  测试为真。</li>\n<li>当两指针指向同一个变量或全部是  <code>nil</code>  时才相等。</li>\n</ul>\n<h3 id=\"new-函数\"><a class=\"anchor\" href=\"#new-函数\">#</a>  <code>new</code>  函数</h3>\n<p><code>new(T)</code>  将创建一个  <code>T</code>  类型的匿名变量，初始化为  <code>T类型的零值</code> ，然后返回变量地址，返回的指针类型为  <code>*T</code> 。</p>\n<ul>\n<li>Go 语言中的 <code>new</code>  是个预定义的<strong>函数</strong>，不是关键字！所以可以重新定义。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//p, *int 类型，指向匿名的 int 变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>          <span class=\"token comment\">// 设置 int 匿名变量的值为 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2\"</span></pre></td></tr></table></figure><h2 id=\"自增自减运算\"><a class=\"anchor\" href=\"#自增自减运算\">#</a> 自增 / 自减运算</h2>\n<p>自增语句 <code>i++</code>  给 <code>i</code>  加 1；这和 <code>i += 1</code>  以及 <code>i = i + 1</code>  都是等价的。对应的还有 <code>i--</code>  给 <code>i</code>  减 1。它们是<strong>语句</strong>，而不像 C 系的其它语言那样是表达式。</p>\n<ul>\n<li>所以 <code>j = i++</code>  <strong>非法</strong>，而且 ++ 和 -- 都只能放在变量名后面，因此 <code>--i</code>  也非法。</li>\n</ul>\n<h2 id=\"类型-type\"><a class=\"anchor\" href=\"#类型-type\">#</a> 类型  <code>type</code></h2>\n<p>类似于 c++ 中的 typeof 的加强版，形式如下</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> 类型名 底层类型</pre></td></tr></table></figure><p>如下，声明了两种类型： <code>Celsius</code>  和  <code>Fahrenheit</code>  分别对应不同的温度单位。</p>\n<ul>\n<li>底层数据类型决定其内部结构和表达方式</li>\n<li>它们虽然有着相同的底层类型  <code>float64</code> ，但是它们是不同的数据类型，因此它们<strong>不可以被相互比较或混在一个表达式运算。</strong></li>\n<li>类型转换不会改变值本身，但是会使它们的语义发生变化。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> Celsius <span class=\"token builtin\">float64</span>    <span class=\"token comment\">// 摄氏温度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> Fahrenheit <span class=\"token builtin\">float64</span> <span class=\"token comment\">// 华氏温度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    AbsoluteZeroC Celsius <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">273.15</span> <span class=\"token comment\">// 绝对零度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    FreezingC     Celsius <span class=\"token operator\">=</span> <span class=\"token number\">0</span>       <span class=\"token comment\">// 结冰点温度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    BoilingC      Celsius <span class=\"token operator\">=</span> <span class=\"token number\">100</span>     <span class=\"token comment\">// 沸水温度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CToF</span><span class=\"token punctuation\">(</span>c Celsius<span class=\"token punctuation\">)</span> Fahrenheit <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Fahrenheit</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">FToC</span><span class=\"token punctuation\">(</span>f Fahrenheit<span class=\"token punctuation\">)</span> Celsius <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Celsius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>比较运算符 == 和 &lt; 也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有着相同底层类型的未命名类型的值之间做比较。但是如果两个值有着不同的类型，则不能直接进行比较：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> c Celsius</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> f Fahrenheit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// \"true\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// \"true\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// compile error: type mismatch</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token function\">Celsius</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"true\"! 类型转换操作不会改变值</span></pre></td></tr></table></figure><p>命名类型还可以为该类型的值定义新的行为。这些行为表示为一组关联到该类型的函数集合，我们称为<strong>类型的方法集</strong> (在第六章会详细讲)</p>\n<p>下面的声明语句，Celsius 类型的参数 c 出现在了函数名的前面，表示声明的是 Celsius 类型的一个名叫 String 的方法，该方法返回该类型对象 c 带着 °C 温度单位的字符串：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Celsius<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g°C\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>许多类型都会定义一个 String 方法，因为当使用 fmt 包的打印方法时，将会优先使用该类型对应的 String 方法返回的结果打印</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c <span class=\"token operator\">:=</span> <span class=\"token function\">FToC</span><span class=\"token punctuation\">(</span><span class=\"token number\">212.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"100°C\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"100°C\"; no need to call String explicitly</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"100°C\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// \"100°C\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"100\"; does not call String</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"100\"; does not call String</span></pre></td></tr></table></figure><h2 id=\"循环-for\"><a class=\"anchor\" href=\"#循环-for\">#</a> 循环  <code>for</code></h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDEvY2gxLTAyLmh0bWw=\">命令行参数・Go 语言圣经</span></p>\n<p>Go 中的循环没有 while、do while 等，只有一种  <code>for</code>  循环<br />\n写法如下：</p>\n<pre><code>for initialization; condition; post &#123;\n    // zero or more statements\n&#125;\n</code></pre>\n<p>for 循环三个部分不需括号包围。<strong>大括号强制要求</strong>，左大括号必须和<em> post</em> 语句在同一行。</p>\n<ul>\n<li><code>initialization</code>  语句是可选的，在<strong>循环开始前执行</strong>。 <code>initalization</code>  如果存在，必须是一条<em>简单语句</em>（simple statement），即短变量声明、自增语句、赋值语句或函数调用。</li>\n<li><code>condition</code>  是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为 <code>true</code>  则执行循环体语句。</li>\n<li><code>post</code>  语句在每次循环体执行结束后执行，之后再次对 <code>condition</code>  求值。 <code>condition</code>  值为 <code>false</code>  时，循环结束。</li>\n</ul>\n<p>for 循环的这三个部分每个都可以省略，如果省略 <code>initialization</code>  和 <code>post</code> ，就是 while 循环，分号也可以省略，如果省略三个部分，则为永真循环，可通过  <code>break</code>  跳出：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h2>\n<h3 id=\"if-else\"><a class=\"anchor\" href=\"#if-else\">#</a> if else</h3>\n<p>Go 中的  <code>if</code>  类似 python，没有括号，<strong>但后面必须跟大括号</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">7</span><span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7 is even\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7 is odd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">8</span><span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8 is divisible by 4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> num <span class=\"token operator\">:=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">\"is negative\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">\"has 1 digit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">\"has multiple digits\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"switch\"><a class=\"anchor\" href=\"#switch\">#</a> switch</h3>\n<p>go 语言里面的  <code>switch</code>  分支结构类似 c++。但也有很多不同：</p>\n<ul>\n<li>switch 后面的那个变量名，也不要括号</li>\n<li>c++ 中的 switch case 如果不加  <code>break</code>  的话会然后会继续往下跑完所有的 case， 在 go 语言里面的话是<strong>不需要加  <code>break</code> </strong> 的</li>\n<li>go 语言里面的 switch 功能更强大，可以使用<strong>任意的变量类型</strong>，甚至可以用来取代任意的 if else 语句。</li>\n</ul>\n<blockquote>\n<p>你可以在 switch 后面不加任何的变量，然后在 case 里面写条件分支。这样代码相比你用多个 if else 代码逻辑会更为清晰。</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ta <span class=\"token operator\">:=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">switch</span> a <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four or five\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">case</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's before noon\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's after noon\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"进程信息\"><a class=\"anchor\" href=\"#进程信息\">#</a> 进程信息</h1>\n<p>在 go 里面，我们能够用  <code>os.argv</code>   来得到程序执行的时候的指定的命令行参数。比如我们编译的一个 二进制文件， <code>command</code> 。 后面接  <code>abcd</code>  来启动，输出就是  <code>os.argv</code>  会是一个长度为  <code>5</code>  的  <code>slice</code>  , 第一个成员代表二进制自身的名字。我们可以用  <code>so.getenv</code>  来读取环境变量。 <code>exec</code></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"os/exec\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// go run example/20-env/main.go a b c d</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [/var/folders/8p/n34xxfnx38dg8bv_x8l62t_m0000gn/T/go-build3406981276/b001/exe/main a b c d]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// /usr/local/go/bin...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">Setenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grep\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/etc/hosts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CombinedOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 127.0.0.1       localhost</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"复合数据类型\"><a class=\"anchor\" href=\"#复合数据类型\">#</a> 复合数据类型</h1>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>数组是一个由<strong>固定长度</strong>的<strong>特定类型元素</strong>组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度是固定的，因此在 Go 语言中很少直接使用数组。和数组对应的类型是 <code>Slice</code> （切片），它是可以增长和收缩的动态序列，slice 功能也更灵活，但是要理解 slice 工作原理的话需要先理解数组。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ta<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">var</span> twoD <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\ttwoD<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d: \"</span><span class=\"token punctuation\">,</span> twoD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"切片-slice\"><a class=\"anchor\" href=\"#切片-slice\">#</a> 切片  <code>Slice</code></h2>\n<p>切片不同于数组，可以任意更改长度，也有更多丰富的操作。</p>\n<ul>\n<li>用  <code>make</code>  来<strong>创建一个切片</strong>，可以像数组一样去取值</li>\n<li>使用  <code>append</code>  来追加元素。注意 append 的用法与 js 中的 <code>concat</code>  相似，返回一个新数组，把 append 的结果赋值为原数组。</li>\n<li>slice 初始化的时候也可以动态的指定长度。  <code>len(s)</code></li>\n<li>slice 拥有像 python 一样的<strong>切片操作</strong>，比如 <code>s[2:5]</code>  代表取出第二个到第五个位置的元素，不包括第五个元素。<strong>不过不同于 python，这里不支持负数索引</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// c</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [a b c d e f]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [a b c d e f]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [c d e]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [a b c d e]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [c d e f]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tgood <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>good<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [g o o d]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<p><code>map</code>  是实际使用过程中最频繁用到的数据结构。</p>\n<ul>\n<li>可以用  <code>make</code>  来创建一个空  <code>map</code>  ，这里会需要两个类型， <code>key</code>  和  <code>value</code>  的类型\n<ul>\n<li><code>map[string]int</code>  表示  <code>key</code>  类型为 <code>string</code>  、 <code>value</code>  类型为  <code>int</code></li>\n</ul>\n</li>\n<li><code>map</code>  的取值与插入类似 c++ 中 STL 的 map，可直接进行。  <code>m[key]</code>   <code>m[key] = value</code></li>\n<li>可以用  <code>delete</code>  从里面<strong>删除键值对</strong></li>\n<li>Go 中的 <code>map</code>  是<strong>完全无序</strong>的，遍历的时候不会按照字母顺序，也不会按照插入顺序输出，而是<strong>随机顺序</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tm <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// map[one:1 two:2]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"unknow\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tr<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"unknow\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> ok<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tm2 <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">var</span> m3 <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">,</span> m3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"range\"><a class=\"anchor\" href=\"#range\">#</a> range</h2>\n<p>对于一个  <code>slice</code>  或者一个  <code>map</code>  的话，我们可以用  <code>range</code>  来快速遍历，这样代码能够更加简洁。 range 遍历的时候，对于<strong>数组</strong>会返回两个值，第一个是索引，第二个是对应位置的值。如果我们不需要索引的话，我们可以用下划线  <code>_</code>  来忽略。</p>\n<blockquote>\n<p>Go 语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。用 <code>空标识符</code> （blank identifier），即 <code>_</code> （也就是下划线）。空标识符可用于在任何<strong>语法需要变量名但程序逻辑不需要</strong>的时候（如：在循环里）丢弃不需要的循环索引，并保留元素值。</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tnums <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsum <span class=\"token operator\">:=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> num <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> nums <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tsum <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"num:\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// index: 0 num: 2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tm <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// b 8; a A</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> k <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: \"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token comment\">// key:  a; key:  b</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value:\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// value: A; value: B</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h2>\n<p>结构体的话是带类型的字段的集合。比如这里  <code>user</code>  结构包含了两个字段， <code>name</code>  和  <code>password</code></p>\n<ul>\n<li>可以用结构体的名称去初始化一个结构体变量，构造的时候需要<strong>传入每个字段的初始值</strong></li>\n<li>也可以用键值对的方式指定初始值，这样可以只对一部分字段进行初始化</li>\n<li>同样的结构体也支持指针，这样能够实现直接对于结构体的修改，可以在某些情况下<strong>避免</strong>一些大结构体的<strong>拷贝开销</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> user <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tname     <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tpassword <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ta <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1024\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tb <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1024\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tc <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tc<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">\"1024\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">var</span> d user</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\td<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"wang\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\td<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">\"1024\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPassword2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span>u user<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>password <span class=\"token operator\">==</span> password</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">checkPassword2</span><span class=\"token punctuation\">(</span>u <span class=\"token operator\">*</span>user<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>password <span class=\"token operator\">==</span> password</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h2>\n<p>go 语言中的 JSON 操作非常简单</p>\n<ul>\n<li>对于一个已有的结构体，只要保证<strong>每个字段的第一个字母是大写</strong>，也就是是<strong>公开字段</strong>。那么这个结构体就能用  <code>JSON.marshaler</code>  去序列化，变成一个 JSON 的字符串。</li>\n</ul>\n<blockquote>\n<p><code>JSON.marshaler</code>  返回序列化值和 error，如下例 <br />\n这样默认序列化出来的字符串，是大写字母开头。可以在后面用 json tag 等语法来去修改输出 JSON 结果里面的字段名。</p>\n</blockquote>\n<ul>\n<li>序列化之后的字符串可以用  <code>JSON.unmarshaler</code>  去<strong>反序列化</strong>到一个空的变量里面。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"encoding/json\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> userInfo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tName  <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tAge   <span class=\"token builtin\">int</span> <span class=\"token string\">`json:\"age\"`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tHobby <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ta <span class=\"token operator\">:=</span> userInfo<span class=\"token punctuation\">&#123;</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> Hobby<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Golang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TypeScript\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// [123 34 78 97...]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;\"Name\":\"wang\",\"age\":18,\"Hobby\":[\"Golang\",\"TypeScript\"]&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">MarshalIndent</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">var</span> b userInfo</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\terr <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// main.userInfo&#123;Name:\"wang\", Age:18, Hobby:[]string&#123;\"Golang\", \"TypeScript\"&#125;&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"时间处理\"><a class=\"anchor\" href=\"#时间处理\">#</a> 时间处理</h2>\n<p>go 语言最常用的就是  <code>time.now()</code>  来获取当前时间，然后你也可以用  <code>time.date</code>  去构造一个<strong>带时区的时间</strong>，有很多方法来获取这个时间点的年月日小时分钟秒，</p>\n<ul>\n<li>可以用  <code>Sub</code>  方法对两个时间进行减法，得到一个时间段。</li>\n<li>时间段又可以得到它有多少小时，多少分钟、多少秒。</li>\n<li>在和某些系统交互的时候，我们经常会用到时间戳。那可以用  <code>.UNIX</code>  来获取时间戳。 <code>time.format</code>    <code>time.parse</code></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tnow <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2022-05-07 13:12:03.7190528 +0800 CST m=+0.004990401</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tt2 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>                                                  <span class=\"token comment\">// 2022-05-07 13:25:36 +0000 UTC</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Minute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2022 March 27 1 25</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02 15:04:05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 2022-05-07 13:25:36</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tdiff <span class=\"token operator\">:=</span> t2<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span>                           <span class=\"token comment\">// 2327h5m0s</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">.</span><span class=\"token function\">Minutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 139625 8.3775e+06</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tt3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02 15:04:05\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2022-05-07 13:25:36\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t3 <span class=\"token operator\">==</span> t<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1651900531</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>Go 和其他很多语言不一样的是，函数参数变量类型是<strong>后置的</strong>。Go 中的函数<strong>原生支持返回多个值</strong>。</p>\n<ul>\n<li>在实际的业务逻辑代码里面几乎所有的函数都返回两个值，第一个是返回值，第二个值是一个<strong>错误信息</strong>。 如下例中的  <code>exists</code></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>m <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> k <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>v <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">,</span> ok</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tres <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ok<span class=\"token punctuation\">)</span> <span class=\"token comment\">// A True</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"错误处理\"><a class=\"anchor\" href=\"#错误处理\">#</a> 错误处理</h2>\n<p>go 中的错误处理就是<strong>使用一个单独的返回值</strong>来传递错误信息</p>\n<ul>\n<li>在函数返回值类型后面加一个  <code>error</code> ， 代表这个函数可能会返回错误。那么在函数实现的时候，  <code>return</code>  需要同时  <code>return</code>  两个值</li>\n<li>出现错误时，可以  <code>return nil</code>  和一个  <code>error</code> 。如果没有的话，那么返回原本的结果和  <code>nil</code> 。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"errors\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> user <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tname     <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpassword <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>user<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>user<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> u <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> users <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> u<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> name <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not found\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tu<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>user<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// wang</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> u<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>user<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// not found</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"工具推荐\"><a class=\"anchor\" href=\"#工具推荐\">#</a> 工具推荐</h1>\n<p>在课堂中提到的几个代码生成工具</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdXJsY29udmVydGVyLmNvbS8jZ28=\">Convert curl commands to code (curlconverter.com)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9va3Rvb2xzLm5ldC9qc29uMmdv\">JSON 转 Golang Struct - 在线工具 - OKTools</span></li>\n</ul>\n<h1 id=\"课后练习\"><a class=\"anchor\" href=\"#课后练习\">#</a> 课后练习</h1>\n<ol>\n<li>修改第一个例子猜谜游戏里面的最终代码，使用 fmt.Scanf 来简化代码实现</li>\n</ol>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"math/rand\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmaxNum <span class=\"token operator\">:=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tsecretNumber <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span>maxNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// fmt.Println(\"The secret number is \", secretNumber)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your guess\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//reader := bufio.NewReader(os.Stdin)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">//input, err := reader.ReadString('\\n')</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> guess <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>guess<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%*c\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 吃回车</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occured while reading input. Please try again\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">//input = strings.TrimSuffix(input, \"\\n\")</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid input. Please enter an integer value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guess is\"</span><span class=\"token punctuation\">,</span> guess<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> guess <span class=\"token operator\">></span> secretNumber <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your guess is bigger than the secret number. Please try again\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> guess <span class=\"token operator\">&lt;</span> secretNumber <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your guess is smaller than the secret number. Please try again\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Correct, you Legend!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改第二个例子命令行词典里面的最终代码，增加另一种翻译引擎的支持</li>\n</ol>\n<pre><code class=\"language-go\">\n</code></pre>\n<ol start=\"3\">\n<li>在上一步骤的基础上，修改代码实现并行请求两个翻译引擎来提高响应速度</li>\n</ol>\n<h1 id=\"总结及心得\"><a class=\"anchor\" href=\"#总结及心得\">#</a> 总结及心得</h1>\n<p>课上很详细的讲了 Go 的基本语法，以及再加上自己阅读 Go 语言圣经的一些总结，得出了这一篇文章，感觉跟 JS 和 c/c++ 还是有很多共通之处的。</p>\n<blockquote>\n<p>内容来源于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDIvY2gyLmh0bWw=\">Go 语言圣经</span> 以及 第三届青训营课程</p>\n</blockquote>\n",
            "tags": [
                "笔记",
                "青训营笔记",
                "后端",
                "Go"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/hexo-shoka-config/",
            "url": "https://ysx.cosine.ren/hexo-shoka-config/",
            "title": "Hexo博客Shoka主题配置记录",
            "date_published": "2022-05-06T15:38:56.000Z",
            "content_html": "<h1 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h1>\n<p>今天闲逛的时候看到一个博客用的主题惊为天人:</p>\n<blockquote>\n<p>官方配置教程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">Hexo 主题 Shoka &amp; multi-markdown-it 渲染器使用说明</span> <br />\n<a href=\"https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/\"><strong>🚀快速开始</strong></a> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==\">💌依赖插件</span> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">📌基本配置</span> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">🌈界面显示</span> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9zcGVjaWFsLw==\">🦄特殊功能</span></p>\n</blockquote>\n<blockquote>\n<p>过程中遇到的一些问题，有看到这个博客里提到：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLm1vZWh6LmNvbS9hcmNoaXZlcy9oZXhvLXNob2thLWJ1aWxkLmh0bWw=\">Hexo 博客搭建：基础配置 [主题:shoka]</span></p>\n</blockquote>\n<p>这个博客主题简直就是为笔记而生～<br />\n 优点：</p>\n<ul>\n<li>很二次元！很戳！</li>\n<li>随机图片还都挺好看！不用自己找图了（也可以自定义图片～）</li>\n<li>可配置项多，评论好用！</li>\n<li>其他一些笔记特有的功能</li>\n</ul>\n<p>跟着官方的教程配置完后，还有很多拓展功能，故在此处记录一些</p>\n<h1 id=\"基础配置\"><a class=\"anchor\" href=\"#基础配置\">#</a> 基础配置</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">📌基本配置</span></p>\n<h2 id=\"图片上传及随即图库\"><a class=\"anchor\" href=\"#图片上传及随即图库\">#</a> 图片上传及随即图库</h2>\n<p>使用渣浪图库，使用一些上传工具，比如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWMuZ2ltaG95LmNvbS8=\">这里</span></p>\n<p>上传后图片的链接是  <code>http://wx4.sinaimg.cn/large/6833939bly1gicmnywqgpj20zk0m8dwx.jpg</code>  。</p>\n<p>只需要新一行写上  <code>- 6833939bly1gicmnywqgpj20zk0m8dwx.jpg 。</code></p>\n<p>如果想要自定义，则在  <code>&lt;root&gt;/source/_data/</code>  目录新建一个  <code>images.yml</code>  文件，这个文件中的图片至少 6 枚，将完全覆盖默认的图片列表。</p>\n<h2 id=\"添加评论功能\"><a class=\"anchor\" href=\"#添加评论功能\">#</a> 添加评论功能</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">如何获取 LeanCloud 的 appId 和 appKey</span></p>\n<p>获取后在  <code>_config.yml</code>  修改如下内容：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your_appId</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your_appkey</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> mp <span class=\"token comment\"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 文章访问量统计</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">NoRecordIP</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 不记录 IP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">serverURLs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">powerMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 默认打开评论框输入特效</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">tagMeta</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> 新朋友</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> 主人</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> 小伙伴</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> 金主粑粑</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">tagColor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-orange)\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-aqua)\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-pink)\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\"># - hash of master@email.com</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\"># - hash of master2@email.com</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\"># - hash of friend@email.com</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\"># - hash of friend2@email.com</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\"># - hash of investor1@email.com</span></pre></td></tr></table></figure><p>评论通知与管理工具建议使用这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Rlc2VydHNQL1ZhbGluZS1BZG1pbg==\">Valine-Admin</span>。<br />\n注意 SITE_URL 需要以 / 结尾。</p>\n<p>哇咔咔，评论管理终于有了！</p>\n<h2 id=\"搜索配置\"><a class=\"anchor\" href=\"#搜索配置\">#</a> 搜索配置</h2>\n<p>搜索采用 algolia，我是跟着这个来的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTU3NTY4\">Algolia 搜索引擎</span><br />\n配置完后，每次搜索还需要手动一行命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g -d <span class=\"token operator\">&amp;&amp;</span> hexo algolia</pre></td></tr></table></figure><h1 id=\"界面显示\"><a class=\"anchor\" href=\"#界面显示\">#</a> 界面显示</h1>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">🌈界面显示</span> 中提到</p>\n<h2 id=\"首页置顶及精选分类\"><a class=\"anchor\" href=\"#首页置顶及精选分类\">#</a> 首页置顶及精选分类</h2>\n<p>在文章的 Front Matter 设置  <code>sticky: true</code>  ，则该文章将显示在首页最上方的  <code>置顶文章</code>  列。<br />\n多篇文章按照发布时间倒序排列，不分页。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 置顶文章</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">sticky</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>在  <code>_config.yml</code>  中的 category_map 设置分类对应的目录。然后在分类对应目录下放一张  <code>cover.jpg</code>  图片，就可以将该分类放至首页下展示。</p>\n<h1 id=\"特殊功能\"><a class=\"anchor\" href=\"#特殊功能\">#</a> 特殊功能</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9zcGVjaWFsLw==\">🦄特殊功能</span></p>\n<p>最最最吸引我的一点，下面列举一些我认为会常用到的</p>\n<h2 id=\"links-链接块\"><a class=\"anchor\" href=\"#links-链接块\">#</a> links 链接块</h2>\n<pre><code>&#123;% links %&#125;\n- site: #站点名称\n  owner: #管理员名字\n  url: #站点网址\n  desc: #简短描述\n  image: #一张图片\n  color: #颜色代码\n&#123;% endlinks %&#125;\n</code></pre>\n<h2 id=\"code-代码块\"><a class=\"anchor\" href=\"#code-代码块\">#</a> code 代码块</h2>\n<p>主要有：顶部可配置标题，右上角可配置参考链接，命令行可配置提示内容等等</p>\n<p>原始 md 文件内容：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#96;&#96;&#96;java 行高亮 https:&#x2F;&#x2F;shoka.lostyu.me 参考链接 mark:1,6-7</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import java.util.Scanner;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Scanner in &#x3D; new Scanner (System.in);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#x2F;&#x2F; 输入 Scan 之后，按下键盘 Alt + “&#x2F;” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println (in.nextLine ());</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println (&quot;Hello&quot; + &quot;world.&quot;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#96;&#96;&#96;bash 命令行提示符 command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pwd</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#x2F;usr&#x2F;home&#x2F;chris&#x2F;bin</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ls -la</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>total 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>git add -A</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>git commit -m &quot;update&quot;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>git push</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><p>展示如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>行高亮</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span>nextLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h2 id=\"quiz-练习题及答案\"><a class=\"anchor\" href=\"#quiz-练习题及答案\">#</a> quiz 练习题及答案</h2>\n<p>ps: 什么神仙功能</p>\n<p>需要在 Front Matter 中添加  <code>quiz: true</code>  ，以正确显示题型标签。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>几个例子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 练习题与答案</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>quiz: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 &#123;.quiz .true&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2. 有基类 &#96;SHAPE&#96;，派生类 &#96;CIRCLE&#96;，声明如下变量：  &#123;.quiz .multi&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#96;&#96;&#96;cpp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SHAPE shape1,*p1;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CIRCLE circle1,*q1;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    下列哪些项是 “派生类对象替换基类对象”。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - &#96;p1&#x3D;&amp;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    - &#96;q1&#x3D;&amp;shape1;&#96;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    - &#96;shape1&#x3D;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    - &#96;circle1&#x3D;shape1;&#96;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    &gt; - :heavy_check_mark: 令基类对象的指针指向派生类对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &gt; - :x: 派生类指针指向基类的引用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    &gt; - :heavy_check_mark: 派生类对象给基类对象赋值</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    &gt; - :x: 基类对象给派生类对象赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &gt; &#123;.options&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>3. 下列叙述正确的是 []&#123;.gap&#125; 。 &#123;.quiz&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    - 虚函数只能定义成无参函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    - 虚函数不能有返回值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    - 能定义虚构造函数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    - A、B、C 都不对 &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>10. 如果定义 &#96;int e&#x3D;8; double f&#x3D;6.4, g&#x3D;8.9;&#96;，则表达式 &#96;f+int (e&#x2F;3*int (f+g)&#x2F;2)%4&#96; 的值为 [9.4]&#123;.gap&#125;。 &#123;.quiz .fill&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &gt; 注意运算顺序和数据类型</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &gt; [8.4]&#123;.mistake&#125;</pre></td></tr></table></figure><p>效果如下：</p>\n<ol>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz multi\">\n<p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#123;.quiz&#125;</code></td>\n<td>选择题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .multi&#125;</code></td>\n<td>多选题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .true&#125;</code></td>\n<td>正确的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .false&#125;</code></td>\n<td>错误的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .fill&#125;</code></td>\n<td>填空题</td>\n</tr>\n<tr>\n<td><code>[]&#123;.gap&#125;</code></td>\n<td>空白下划线</td>\n</tr>\n<tr>\n<td><code>[答案内容]&#123;.gap&#125;</code></td>\n<td>答案内容带下划线</td>\n</tr>\n<tr>\n<td><code>&#123;.options&#125;</code></td>\n<td>ABCDE 选项</td>\n</tr>\n<tr>\n<td><code>&#123;.correct&#125;</code></td>\n<td>选择题的正确选项</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>答案解析</td>\n</tr>\n<tr>\n<td><code>[8.4]&#123;.mistake&#125;\t</code></td>\n<td>错题备注</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"emoji-绘文字\"><a class=\"anchor\" href=\"#emoji-绘文字\">#</a> emoji 绘文字</h2>\n<p>基于 markdown-it-emoji ，所有标签参考戳此</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>示例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:kissing_heart:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:ring:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:notes:</pre></td></tr></table></figure><p>😘 💍 🎶</p>\n<h2 id=\"spoiler-隐藏文字\"><a class=\"anchor\" href=\"#spoiler-隐藏文字\">#</a> spoiler 隐藏文字</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!! 真的有这么神奇吗！！</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>!! 我不信！！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>!! 模糊模糊模糊模糊模糊模糊！！&#123;.bulr&#125; ： 选中文字显示内容</pre></td></tr></table></figure><p><span class=\"spoiler\" title=\"你知道得太多了\">真的有这么神奇吗</span><br />\n<span class=\"spoiler\" title=\"你知道得太多了\">我不信</span><br />\n<span class=\"spoiler\" title=\"你知道得太多了\">黑幕黑幕黑幕黑幕黑幕黑幕</span>： 鼠标滑过显示内容<br />\n<span class=\"spoiler bulr\" title=\"你知道得太多了\">模糊模糊模糊模糊模糊模糊</span> ： 选中文字显示内容</p>\n<h2 id=\"label-标签块\"><a class=\"anchor\" href=\"#label-标签块\">#</a> label 标签块</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[default]&#123;.label&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[primary]&#123;.label .primary&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[info]&#123;.label .info&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[:heavy_check_mark:success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[warning]&#123;.label .warning&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[:broken_heart:danger]&#123;.label .danger&#125;</pre></td></tr></table></figure><p><span class=\"label\">default</span><br />\n<span class=\"label primary\">primary</span><br />\n<span class=\"label info\">info</span><br />\n<span class=\"label success\">✔️success</span><br />\n<span class=\"label warning\">warning</span><br />\n<span class=\"label danger\">💔danger</span></p>\n<h2 id=\"note-提醒块\"><a class=\"anchor\" href=\"#note-提醒块\">#</a> note 提醒块</h2>\n<p>| 开始行\t |  <code>:::[风格颜色]</code>  |<br />\n| 结束行 | \t <code>:::</code>  |</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:::default</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>默认默认</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:::primary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>基本基本</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>提示提示</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::success</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>成功成功</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>:::warning</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>警告警告</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>:::danger no-icon</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>:::</pre></td></tr></table></figure><p>效果如下</p>\n<div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>危险危险</p>\n</div>\n<h2 id=\"tab-标签卡\"><a class=\"anchor\" href=\"#tab-标签卡\">#</a> tab 标签卡</h2>\n<p>标签为：</p>\n<p>| 开始行 |\t <code>;;;[同一ID] [标签名称]</code>  |<br />\n| 结束行 |  <code>;;;</code>  |</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>;;;id1 卡片 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>** 加粗 **</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>;;;id1 卡片 2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>;;;id2 ②号标签卡片 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>;;;id2 ②号标签卡片 2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>;;;</pre></td></tr></table></figure><div class=\"tab\" data-id=\"id1\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容<br />\n ** 加粗 **<br />\n<span class=\"label success\">success</span></p>\n<p><div class=\"links\"><div class=\"item\" title=\"cos\" style=\"--block-color:#1e80ff;\"><a href=\"https://ysx.cosine.ren/\" class=\"image\" data-background-image=\"https://cdn.jsdelivr.net/gh/yusixian/imgBed@latest/img/tx.jpg\"></a>\n          <div class=\"info\">\n          <a href=\"https://ysx.cosine.ren/\" class=\"title\">cos的博客</a>\n          <p class=\"desc\">余弦的编程笔记 & 生活记录</p>\n          </div></div></div></p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n<h2 id=\"media-多媒体\"><a class=\"anchor\" href=\"#media-多媒体\">#</a> media 多媒体</h2>\n<p>使用 media 标签，目前可选择两种类型，即 audio 和 video 。</p>\n<p>效果如下</p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"cos的2021年度歌单\",\"list\":[\"https://music.163.com/playlist?id=7189274318\"]},{\"title\":\"cos的2020年度歌单\",\"list\":[\"https://music.163.com/playlist?id=5400313492\"]},{\"title\":\"cos的2019年度歌单\",\"list\":[\"https://music.163.com/playlist?id=3144460328\"]},{\"title\":\"❤️安利向\",\"list\":[\"https://music.163.com/playlist?id=3036586237\"]}]'></div></div></p>\n<h2 id=\"math-数学公式\"><a class=\"anchor\" href=\"#math-数学公式\">#</a> math 数学公式</h2>\n<p>在 Front Matter 中添加 math: true 以支持 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcv\">KaTex</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 数学公式显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>math: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>行内公式：$\\sqrt &#123;3x-1&#125;+(1+x)^2$</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>独立块显示：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$$\\begin &#123;array&#125;&#123;c&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;B&#125;&#125; -\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;E&#125;&#125;&#125;&#123;\\partial t&#125; &amp;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#x3D; \\frac &#123;4\\pi&#125;&#123;c&#125;\\vec &#123;\\mathbf &#123;j&#125;&#125;    \\nabla \\cdot \\vec &#123;\\mathbf &#123;E&#125;&#125; &amp; &#x3D; 4 \\pi \\rho \\\\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;E&#125;&#125;\\, +\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;B&#125;&#125;&#125;&#123;\\partial t&#125; &amp; &#x3D; \\vec &#123;\\mathbf &#123;0&#125;&#125; \\\\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\\nabla \\cdot \\vec &#123;\\mathbf &#123;B&#125;&#125; &amp; &#x3D; 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\\end &#123;array&#125;$$</pre></td></tr></table></figure><p>行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msqrt><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sqrt {3x-1}+(1+x)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>独立块显示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover><mo>−</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mfrac><mrow><mn>4</mn><mi>π</mi></mrow><mi>c</mi></mfrac><mover accent=\"true\"><mi mathvariant=\"bold\">j</mi><mo>⃗</mo></mover><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>4</mn><mi>π</mi><mi>ρ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover><mtext> </mtext><mo>+</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mover accent=\"true\"><mn mathvariant=\"bold\">0</mn><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin {array}{c}\n\n\\nabla \\times \\vec {\\mathbf {B}} -\\, \\frac1c\\, \\frac {\\partial\\vec {\\mathbf {E}}}{\\partial t} &amp;\n= \\frac {4\\pi}{c}\\vec {\\mathbf {j}}    \\nabla \\cdot \\vec {\\mathbf {E}} &amp; = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec {\\mathbf {E}}\\, +\\, \\frac1c\\, \\frac {\\partial\\vec {\\mathbf {B}}}{\\partial t} &amp; = \\vec {\\mathbf {0}} \\\\\n\n\\nabla \\cdot \\vec {\\mathbf {B}} &amp; = 0\n\n\\end {array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.1938640000000005em;vertical-align:-1.846932em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">E</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">B</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9774399999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">j</span></span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92744em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">0</span></span></span></span><span style=\"top:-3.21344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathnormal\">ρ</span></span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>总而言之，这个主题非常强大～</p>\n",
            "tags": [
                "工具",
                "前端",
                "hexo"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/compile-learning-experiment_4/",
            "url": "https://ysx.cosine.ren/compile-learning-experiment_4/",
            "title": "编译原理 实验四 LR(1)分析法程序",
            "date_published": "2022-04-30T18:43:49.000Z",
            "content_html": "<p>第三次实验因为逆波兰式比较简单所以略过 x</p>\n<p>源代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l1c2l4aWFuL0NvbXBpbGVQcmluY2lwbGVMZWFybmluZy90cmVlL21hc3Rlci9leHBlcmltZW50XzQ=\">CompilePrincipleLearning/experiment_4 · yusixian/CompilePrincipleLearning (github.com)</span></p>\n<p>在 demo 文件夹中～</p>\n<h1 id=\"一实验目的\"><a class=\"anchor\" href=\"#一实验目的\">#</a> 一.\t实验目的</h1>\n<ol>\n<li>掌握 LR (1) 分析法的基本原理</li>\n<li>掌握 LR (1) 分析表的构造方法</li>\n<li>掌握 LR (1) 驱动程序的构造方法</li>\n</ol>\n<h1 id=\"二实验内容及要求\"><a class=\"anchor\" href=\"#二实验内容及要求\">#</a> 二.\t实验内容及要求</h1>\n<p>构造 LR (1) 分析程序，利用它进行语法分析，判断给出的符号串是否为该文法识别的句子，了解 LR（K）分析方法是严格的从左向右扫描，和自底向上的语法分析方法。</p>\n<p>根据某一文法编制调试 LR（1）分析程序，以便对任意输入的符号串进行分析。本次实验的目的主要是加深对 LR（1）分析法的理解。</p>\n<p><strong>对下列文法，用 LR（1）分析法对任意输入的符号串进行分析</strong>：</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（0）S’->E</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（1）E->E+T</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（2）E->T</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>（3）T->T*F</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>（4）T->F</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>（5）F->(E)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>（6）F->i</pre></td></tr></table></figure><p>输出的格式如下：</p>\n<p>(1) LR（1）分析程序，编制人：姓名，学号，班级</p>\n<p>(2) 输入一以 #结束的符号串 (包括 +-*/（）i#)：在此位置输入符号串</p>\n<p>(3) 输出过程如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>步骤</strong></th>\n<th><strong>状态栈</strong></th>\n<th><strong>符号栈</strong> ****</th>\n<th><strong>剩余输入串</strong></th>\n<th><strong>动作</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>#</td>\n<td>i+i*i#</td>\n<td>移进</td>\n</tr>\n</tbody>\n</table>\n<p>(4) 输入符号串为非法符号串或合法符号串</p>\n<p>注意：</p>\n<p>1. 表达式中允许使用运算符（+|*）、分割符（括号）、字符 i，结束符 #；</p>\n<p>2. 如果遇到错误的表达式，应输出错误提示信息（该信息越详细越好）；</p>\n<p>3. 对学有余力的同学，测试用的表达式事先放在文本文件中，一行存放一个表达式，同时以分号分割。同时将预期的输出结果写在另一个文本文件中，以便和输出进行对照；</p>\n<p>4．可采用的其它的文法，但是必须是 LR1 分析方法。</p>\n<h1 id=\"三实验过程\"><a class=\"anchor\" href=\"#三实验过程\">#</a> 三.\t实验过程</h1>\n<h2 id=\"1-构造识别lr1文法活前缀的dfa\"><a class=\"anchor\" href=\"#1-构造识别lr1文法活前缀的dfa\">#</a> 1、构造识别 LR（1）文法活前缀的 DFA</h2>\n<p>如图：新标签页打开，不糊的。</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b812acc3e4e4ea9929eef56cebea020~tplv-k3u1fbpfcp-watermark.image?\" alt=\"LR1_DFA.drawio.png\" /></p>\n<p>action 表和 goto 表如下：</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dbe68ae771f4a89a6dca82976915452~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<h2 id=\"2-采用的数据结构\"><a class=\"anchor\" href=\"#2-采用的数据结构\">#</a> 2、采用的数据结构</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ACTION 表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// + * ( ) i #</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string action<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//goto 表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// a b #</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> _goto<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string vt <span class=\"token operator\">=</span> <span class=\"token string\">\"+*()i#\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 终结符表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string vn <span class=\"token operator\">=</span> <span class=\"token string\">\"ETF\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 非终结符表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>string LR<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"E->E+T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E->T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->T*F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->(E)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->i\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 存放产生式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> chars<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 符号栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> state<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 状态栈</span></pre></td></tr></table></figure><h2 id=\"3-头文件声明和全局变量定义\"><a class=\"anchor\" href=\"#3-头文件声明和全局变量定义\">#</a> 3、头文件声明和全局变量定义</h2>\n<p>如下。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> string ExpFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./exp.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> string GotoFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./goto.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> string ActionFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./action.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> Null <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// ACTION 表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// + * ( ) i #</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>string action<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//goto 表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// a b #</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> _goto<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>string vt <span class=\"token operator\">=</span> <span class=\"token string\">\"+*()i#\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 终结符表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>string vn <span class=\"token operator\">=</span> <span class=\"token string\">\"ETF\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 非终结符表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>string LR<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"E->E+T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E->T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->T*F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->(E)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->i\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 存放产生式</span></pre></td></tr></table></figure><h2 id=\"4-函数汇总\"><a class=\"anchor\" href=\"#4-函数汇总\">#</a> 4、函数汇总</h2>\n<h3 id=\"1函数汇总表\"><a class=\"anchor\" href=\"#1函数汇总表\">#</a> （1）函数汇总表</h3>\n<table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>功能简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>readFile</code></td>\n<td>读取文件函数，返回一个 string 动态数组，以行数分割</td>\n</tr>\n<tr>\n<td><code>init</code></td>\n<td>初始化函数，在该函数中进行 goto 表和 action 表的初始化</td>\n</tr>\n<tr>\n<td><code>printActions / printGotos</code></td>\n<td>输出 goto 表与 action 表</td>\n</tr>\n<tr>\n<td><code>isTerminator</code></td>\n<td>判断当前字符 c 是否是终结符</td>\n</tr>\n<tr>\n<td><code>findTerminator</code></td>\n<td>返回终结符所处下标</td>\n</tr>\n<tr>\n<td><code>findNonTerminator</code></td>\n<td>返回非终结符所处下标</td>\n</tr>\n<tr>\n<td><code>s2string</code></td>\n<td>将栈转换为字符串返回，方便输出步骤</td>\n</tr>\n<tr>\n<td><code>analyzeLR1</code></td>\n<td>利用 LR1 分析法分析字符串 exp，输出其分析步骤</td>\n</tr>\n<tr>\n<td><code>main </code></td>\n<td>主程序入口，调用读取文件函数开始分析</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2函数的调用关系\"><a class=\"anchor\" href=\"#2函数的调用关系\">#</a> （2）函数的调用关系</h3>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b99924fde594015aac1b75d324243c7~tplv-k3u1fbpfcp-watermark.image?\" alt=\"function4.drawio.png\" /></p>\n<h3 id=\"3流程图\"><a class=\"anchor\" href=\"#3流程图\">#</a> （3）流程图</h3>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbd377b4720c450894253ad587ca8c3f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"main.drawio.png\" /></p>\n<h2 id=\"5-实验结果\"><a class=\"anchor\" href=\"#5-实验结果\">#</a> 5、实验结果</h2>\n<h3 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h3>\n<p>action.txt 文件</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s6\tN\tN\tN\tN\tacc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r2\ts7\tN\tr2\tN\tr2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r4\tr4\tN\tr4\tN\tr4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>r6\tr6\tN\tr6\tN\tr6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s6\tN\tN\ts11\tN\tN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>r1\ts7\tN\tr1\tN\tr1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>r3\tr3\tN\tr3\tN\tr3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>r5\tr5\tN\tr5\tN\tr5</pre></td></tr></table></figure><p>goto.txt 文件</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1\t2\t3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8\t2\t3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>N\t9\t3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>N\tN\t10</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>N\tN\tN</pre></td></tr></table></figure><p>exp.txt 文件</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i+(i*i)*(i+i)#</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i*i+i*i#</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>i+i*i+i*(i+i*i)#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>i+*(i)+i(i+i*i)#</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i+i(i)#</pre></td></tr></table></figure><h3 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h3>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00706fefb691427592dcf885bd5729a7~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image1.png\" /></p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca94078bbded4bf5802757568e8221b4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image2.png\" /></p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26196777c3a241799dcd13ea1a30debc~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image3.png\" /></p>\n<h1 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author: cos</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Date: 2022-04-30 14:20:51</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @LastEditTime: 2022-05-01 02:34:12</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @LastEditors: cos</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Description: 实验 4 LR (1) 分析法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @FilePath: \\CompileTheory\\experiment_4\\demo\\main.cpp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> string ExpFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./exp.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> string GotoFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./goto.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> string ActionFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./action.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> Null <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// ACTION 表</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// + * ( ) i #</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>string action<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//goto 表</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// a b #</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> _goto<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>string vt <span class=\"token operator\">=</span> <span class=\"token string\">\"+*()i#\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 终结符表</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>string vn <span class=\"token operator\">=</span> <span class=\"token string\">\"ETF\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 非终结符表</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>string LR<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"E->E+T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E->T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->T*F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->(E)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->i\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 存放产生式</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 读文件</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>string fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ifstream fin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        fin<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        string temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------------ACTION表------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+\\t*\\t(\\t)\\ti\\t$\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> action<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printGotos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------------GOTO表------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"E\\tT\\tF\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> _goto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> actions <span class=\"token operator\">=</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>ActionFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        string row <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            string temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                temp <span class=\"token operator\">+=</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            action<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">printActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> gotos <span class=\"token operator\">=</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>GotoFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        string row <span class=\"token operator\">=</span> gotos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            string temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                temp <span class=\"token operator\">+=</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            _goto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> Null <span class=\"token operator\">:</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">printGotos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isTerminator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">return</span> vt<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">findTerminator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回终结符所处下标</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">return</span> vt<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">findNonTerminator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回非终结符的下标</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">return</span> vn<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">// 将栈转换为字符串返回</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>string <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    string str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\">// 输出剩余输入串</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printRestInput</span><span class=\"token punctuation\">(</span>string exp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">analyzeLR1</span><span class=\"token punctuation\">(</span>string exp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 分析一个表达式</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> chars<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 符号栈</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> state<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 状态栈</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始状态为 0</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    chars<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始符号为#</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    string charsStr <span class=\"token operator\">=</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> copyState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    copyState<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 序号</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前输入指针</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"序号\\t\\t状态栈\\t\\t符号栈\\t\\t输入串\\t\\t描述\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 初始状态 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">int</span> nowState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">char</span> nowChar <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 当前输入字符</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">int</span> isT <span class=\"token operator\">=</span> <span class=\"token function\">findTerminator</span><span class=\"token punctuation\">(</span>nowChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isT <span class=\"token operator\">==</span> Null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 非终结符</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error!\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"出现非法字符，程序错误退出\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        string actionStr <span class=\"token operator\">=</span> action<span class=\"token punctuation\">[</span>nowState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>isT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr <span class=\"token operator\">==</span> <span class=\"token string\">\"acc\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" accept 接受！ \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error! 程序异常退出\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 归约</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 选用第几个产生式归约</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                chars<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 出栈，归约</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                state<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                charsStr <span class=\"token operator\">=</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                copyState<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 便于输出</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            chars<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 产生式左部入符号栈</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            charsStr <span class=\"token operator\">+=</span> LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token keyword\">int</span> nowState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token keyword\">int</span> gidx <span class=\"token operator\">=</span> <span class=\"token function\">findNonTerminator</span><span class=\"token punctuation\">(</span>LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            <span class=\"token keyword\">int</span> newState <span class=\"token operator\">=</span> _goto<span class=\"token punctuation\">[</span>nowState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>gidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            copyState<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token function\">printRestInput</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 归约 \"</span> <span class=\"token operator\">&lt;&lt;</span> LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 移进</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">int</span> newState <span class=\"token operator\">=</span>  <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            copyState<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            chars<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nowChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            charsStr <span class=\"token operator\">+=</span> nowChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token operator\">++</span>idx<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输入指针后移</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            <span class=\"token function\">printRestInput</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> actionStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 移进 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error!\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"程序异常退出\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"LR（1）分析程序，编制人：xxx xxxxxxxx xxxx班\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"提示:本程序只能对由'i','+','*','/','(',')'构成的以'#'结束的表达式进行分析，每行读入一个表达式\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"读取的文件名为：\"</span> <span class=\"token operator\">&lt;&lt;</span> ExpFileName <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> exps <span class=\"token operator\">=</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>ExpFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> exps<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        string exp <span class=\"token operator\">=</span> exps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n------------------待分析表达式\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"：\"</span><span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isTerminator</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第 \"</span><span class=\"token operator\">&lt;&lt;</span>   i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"行输入的字符串不合法，请重新输入\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"表达式\"</span>  <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"分析开始\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>            <span class=\"token function\">analyzeLR1</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "CS基础",
                "编译原理"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day31/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day31/",
            "title": "剑指offer day31 数学（困难）",
            "date_published": "2022-04-29T14:08:00.000Z",
            "content_html": "<p>day31 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1paS1sY29mLw==\">剑指 Offer 14- II. 剪绳子 II</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mLw==\">剑指 Offer 43. 1～n 整数中 1 出现的次数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 44. 数字序列中某一位的数字</span></p>\n<p>知识点：数学，难度为中等、困难、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1paS1sY29mLw==\">剑指 Offer 14- II. 剪绳子 II</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mLw==\">剑指 Offer 43. 1～n 整数中 1 出现的次数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 44. 数字序列中某一位的数字</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS1zZWFyY2g=\">二分查找</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<p>最后一天了…… 被今天的数学题…… 按在地上摩擦，嘿嘿嘿</p>\n<h1 id=\"剑指-offer-14-ii-剪绳子-ii\"><a class=\"anchor\" href=\"#剑指-offer-14-ii-剪绳子-ii\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1paS1sY29mLw==\">剑指 Offer 14- II. 剪绳子 II</span></h1>\n<p>给你一根长度为  <code>n</code>  的绳子，请把绳子剪成整数长度的  <code>m</code>  段（m、n 都是整数，n&gt;1 并且 m&gt;1），每段绳子的长度记为  <code>k[0],k[1]...k[m - 1]</code>  。请问  <code>k[0]*k[1]*...*k[m - 1]</code>  可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。</p>\n<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= n &lt;= 1000</code></li>\n</ul>\n<p>注意：本题与主站 343 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW50ZWdlci1icmVhay8=\">https://leetcode-cn.com/problems/integer-break/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>这道题是之前剪绳子一模一样，不过这里多了取模运算，可以利用贪心思想</p>\n<ul>\n<li>若  <code>n &lt; 4</code> ，返回  <code>n - 1</code></li>\n<li>若  <code>n == 4</code> ，返回  <code>4</code></li>\n<li>若  <code>n &gt; 4</code> ，分成尽可能多的长度为  <code>3</code>  的小段，循环中每次长度  <code>n</code>  减去 <code>3</code> ，乘积 <code>res</code>  乘以 <code>3</code> ，最后返回时乘上小于等于 4 的最后一小段后的结果，每次乘法操作后记得 <strong>取余</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cuttingRope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        n <span class=\"token operator\">-=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-43-1~n-整数中-1-出现的次数\"><a class=\"anchor\" href=\"#剑指-offer-43-1~n-整数中-1-出现的次数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mLw==\">剑指 Offer 43. 1～n 整数中 1 出现的次数</span></h1>\n<p>输入一个整数  <code>n</code>  ，求 1～n 这 n 个整数的十进制表示中 1 出现的次数。</p>\n<p>例如，输入 12，1～12 这些整数中包含 1 的数字有 1、10、11 和 12，1 一共出现了 5 次。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： n = 12\n输出： 5\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： n = 13\n输出： 6\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt; 2^31</code></li>\n</ul>\n<p>注意：本题与主站 233 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLWRpZ2l0LW9uZS8=\">https://leetcode-cn.com/problems/number-of-digit-one/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>题目越短，事越大，看官方题解如下，难得官方题解讲的这么清楚明白一次：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mL3NvbHV0aW9uLzFuLXpoZW5nLXNodS16aG9uZy0xLWNodS14aWFuLWRlLWNpLXNodS11bWFqOC8=\">1～n 整数中 1 出现的次数 - 1～n 整数中 1 出现的次数 - 力扣（LeetCode） (leetcode-cn.com)</span></p>\n<p>总结如下：</p>\n<blockquote>\n<p>当数位为  <code>10^k</code>  时，最后的  <code>k</code>  个数位每  <code>10^(k+1)</code>  个数会循环一次，并且其中包含  <code>10^k</code>  个 1，由于  <code>n</code>  包含  <code>n/10^(k+1)</code>  个完整的循环，那么这一部分的  <code>1</code>  的个数为  <code>(n/10^(k+1))*10^k</code> 。不在循环中的部分还有  <code>n mod 10^(k+1)</code>  个数，这一部分的  <code>1</code>  的个数为  <code>n mod 10^(k+1) - 10^k + 1</code> ，如果这个值小于  <code>0</code> ，那么调整为出现  <code>0</code>  次；如果这个值大于  <code>10^k</code>  ，那么调整为出现  <code>10^k</code>  次。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">countDigitOne</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> mulk <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> mulk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> rest <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>mulk<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>mulk<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mulk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        res <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>mulk<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>mulk <span class=\"token operator\">+</span> rest</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        mulk <span class=\"token operator\">*=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-44-数字序列中某一位的数字\"><a class=\"anchor\" href=\"#剑指-offer-44-数字序列中某一位的数字\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 44. 数字序列中某一位的数字</span></h1>\n<p>数字以 0123456789101112131415… 的格式序列化到一个字符序列中。在这个序列中，第 5 位（从下标 0 开始计数）是 5，第 13 位是 1，第 19 位是 4，等等。</p>\n<p>请写一个函数，求任意第 n 位对应的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： n = 3\n输出： 3\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： n = 11\n输出： 0\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt; 2^31</code></li>\n</ul>\n<p>注意：本题与主站 400 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnRoLWRpZ2l0Lw==\">https://leetcode-cn.com/problems/nth-digit/</span></p>\n<h2 id=\"思路及代码-3\"><a class=\"anchor\" href=\"#思路及代码-3\">#</a> 思路及代码</h2>\n<p>建议看题解，自己根本没法讲这么明白：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mL3NvbHV0aW9uL2pzLTV4aW5nLWRhaS1tYS1qaS1zaGkteGluZy16aHUtc2hpLWJ5LW8tMnNrZC8=\">[JS] 5 行代码，几十行注释 - 数字序列中某一位的数字)</span></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findNthDigit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        n <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">++</span>i</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>n <span class=\"token operator\">%</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>完结撒花～明天开剑指 offer 专项计划</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c32319d3217473485def70035c4b785~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day30/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day30/",
            "title": "剑指offer day30 分治算法（困难）",
            "date_published": "2022-04-28T15:08:00.000Z",
            "content_html": "<p>day30 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGEteWluLWNvbmctMWRhby16dWktZGEtZGUtbndlaS1zaHUtbGNvZi8=\">剑指 Offer 17. 打印从 1 到最大的 n 位数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWRlLW5pLXh1LWR1aS1sY29mLw==\">剑指 Offer 51. 数组中的逆序对</span></p>\n<p>知识点：数组、数学、分治，难度为简单、困难</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGEteWluLWNvbmctMWRhby16dWktZGEtZGUtbndlaS1zaHUtbGNvZi8=\">剑指 Offer 17. 打印从 1 到最大的 n 位数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWRlLW5pLXh1LWR1aS1sY29mLw==\">剑指 Offer 51. 数组中的逆序对</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS1pbmRleGVkLXRyZWU=\">树状数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NlZ21lbnQtdHJlZQ==\">线段树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span></td>\n<td>困难</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-17-打印从1到最大的n位数\"><a class=\"anchor\" href=\"#剑指-offer-17-打印从1到最大的n位数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGEteWluLWNvbmctMWRhby16dWktZGEtZGUtbndlaS1zaHUtbGNvZi8=\">剑指 Offer 17. 打印从 1 到最大的 n 位数</span></h1>\n<p>输入数字  <code>n</code> ，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: n = 1\n输出: [1,2,3,4,5,6,7,8,9]\n</code></pre>\n<p>说明：</p>\n<ul>\n<li>用返回一个整数列表来代替打印</li>\n<li>n 为正整数</li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>不考虑大数，那么这道题秒杀。考虑的话…… 不听不听我不听 QAQ（以后有机会补上）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">printNumbers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> maxv <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxv<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-51-数组中的逆序对\"><a class=\"anchor\" href=\"#剑指-offer-51-数组中的逆序对\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWRlLW5pLXh1LWR1aS1sY29mLw==\">剑指 Offer 51. 数组中的逆序对</span></h1>\n<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: [7,5,6,4]\n输出: 5\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>0 &lt;= 数组长度 &lt;= 50000</code></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>文字少少，难度大大</p>\n<p>直接暴力肯定是不行的，需要用到归并排序，在合并时，左右两数组（ <code>s~mid</code>  、 <code>mid+1~e</code> ）各自都是从小到大排好序的，那么当左指针  <code>i</code>  指向的数大于右指针  <code>j</code>  指向的数即  <code>nums[i] &gt; nums[j]</code>  时，则  <code>i~mid</code>  的元素均大于  <code>j</code>  位置上的元素，此时产生的逆序对个数即为  <code>mid-i+1</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reversePairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 合并 s~mid mid+1~e</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 新数组的下标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 大于 说明产生了逆序对～</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                res <span class=\"token operator\">+=</span> mid<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;=</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>s<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">>=</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "数组",
                "分治",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day29/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day29/",
            "title": "剑指offer day29 动态规划（困难）",
            "date_published": "2022-04-27T13:12:00.000Z",
            "content_html": "<p>day29 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhlbmctemUtYmlhby1kYS1zaGktcGktcGVpLWxjb2Yv\">剑指 Offer 19. 正则表达式匹配</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hvdS1zaHUtbGNvZi8=\">剑指 Offer 49. 丑数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbmdlLXRvdS16aS1kZS1kaWFuLXNodS1sY29mLw==\">剑指 Offer 60. n 个骰子的点数</span></p>\n<p>知识点：字符串、数学、动态规划，难度为困难、中等、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhlbmctemUtYmlhby1kYS1zaGktcGktcGVpLWxjb2Yv\">剑指 Offer 19. 正则表达式匹配</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hvdS1zaHUtbGNvZi8=\">剑指 Offer 49. 丑数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2hhc2gtdGFibGU=\">哈希表</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbmdlLXRvdS16aS1kZS1kaWFuLXNodS1sY29mLw==\">剑指 Offer 60. n 个骰子的点数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3Byb2JhYmlsaXR5LWFuZC1zdGF0aXN0aWNz\">概率与统计</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-19-正则表达式匹配\"><a class=\"anchor\" href=\"#剑指-offer-19-正则表达式匹配\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhlbmctemUtYmlhby1kYS1zaGktcGktcGVpLWxjb2Yv\">剑指 Offer 19. 正则表达式匹配</span></h1>\n<p>请实现一个函数用来匹配包含 <code>'. '</code>  和 <code>'*'</code>  的正则表达式。模式中的字符 <code>'.'</code>  表示任意一个字符，而 <code>'*'</code>  表示它前面的字符可以出现任意次（含 0 次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串 <code>&quot;aaa&quot;</code>  与模式 <code>&quot;a.a&quot;</code>  和 <code>&quot;ab*ac*a&quot;</code>  匹配，但与 <code>&quot;aa.a&quot;</code>  和 <code>&quot;ab*a&quot;</code>  均不匹配。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入:\ns = &quot;aa&quot;\np = &quot;a&quot;\n输出: false\n解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入:\ns = &quot;aa&quot;\np = &quot;a*&quot;\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 &quot;aa&quot; 可被视为 'a' 重复了一次。\n</code></pre>\n<p><strong>示例 3:</strong></p>\n<pre><code>输入:\ns = &quot;ab&quot;\np = &quot;.*&quot;\n输出: true\n解释: &quot;.*&quot; 表示可匹配零个或多个（'*'）任意字符（'.'）。\n</code></pre>\n<p><strong>示例 4:</strong></p>\n<pre><code>输入:\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 &quot;aab&quot;。\n</code></pre>\n<p><strong>示例 5:</strong></p>\n<pre><code>输入:\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n输出: false\n</code></pre>\n<ul>\n<li><code>s</code>  可能为空，且只包含从  <code>a-z</code>  的小写字母。</li>\n<li><code>p</code>  可能为空，且只包含从  <code>a-z</code>  的小写字母以及字符  <code>.</code>  和  <code>*</code> ，无连续的  <code>'*'</code> 。</li>\n</ul>\n<p>注意：本题与主站 10 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVndWxhci1leHByZXNzaW9uLW1hdGNoaW5nLw==\">https://leetcode-cn.com/problems/regular-expression-matching/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>不愧是困难题，想不出来<sup>_</sup></p>\n<p>看完题解，wow 还有这种思路</p>\n<ul>\n<li><code>dp[i][j]</code>  表示  <code>s</code>  中前  <code>i</code>  个字符是否匹配  <code>p</code>  中前  <code>j</code>  个字符</li>\n<li><code>dp[0][0]</code>  是可行的，置为  <code>true</code> ，其他初始置为  <code>false</code></li>\n</ul>\n<p>遍历时</p>\n<ul>\n<li>若  <code>p</code>  中 第  <code>j</code>  个字符不是 <code>*</code>  或  <code>.</code> ，则必须在 s 中匹配一个相同的字母，有  <code>dp[i][j] = s[i] == p[j] ? dp[i-1][j-1]: false</code></li>\n<li>若  <code>p</code>  中 第  <code>j</code>  个字符为 <code>.</code>  一定成功匹配  <code>dp[i][j] = dp[i-1][j-1]</code></li>\n<li>若为  <code>*</code>  则可以\n<ul>\n<li>不匹配字符，将该组合扔掉，不再进行匹配   <code>dp[i][j] |= dp[i][j-2]</code></li>\n<li>匹配  <code>s</code>  末尾的一个字符，将该字符扔掉，而该组合还可以继续进行匹配   <code>dp[i][j] = dp[i-1][j] | dp[i][j-2]</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;string&#125; p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isMatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">let</span> c2 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 不使用 *</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                c2 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-49-丑数\"><a class=\"anchor\" href=\"#剑指-offer-49-丑数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hvdS1zaHUtbGNvZi8=\">剑指 Offer 49. 丑数</span></h1>\n<p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n</code></pre>\n<p><strong>说明:</strong></p>\n<ol>\n<li><code>1</code>  是丑数。</li>\n<li><code>n</code>  <strong>不超过</strong> 1690。</li>\n</ol>\n<p>注意：本题与主站 264 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdWdseS1udW1iZXItaWkv\">https://leetcode-cn.com/problems/ugly-number-ii/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>设 m1、m2、m3 表示 ×2、×3、×5 的结果，比较其指向的值，将最小的放入最终的合并数组中，并将相应指针向后移动一个元素。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">nthUglyNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> m2 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> m3 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i3<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> m5 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i5<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">,</span> m3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">===</span> m2<span class=\"token punctuation\">)</span> i2<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">===</span> m3<span class=\"token punctuation\">)</span> i3<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">===</span> m5<span class=\"token punctuation\">)</span> i5<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-60-n个骰子的点数\"><a class=\"anchor\" href=\"#剑指-offer-60-n个骰子的点数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbmdlLXRvdS16aS1kZS1kaWFuLXNodS1sY29mLw==\">剑指 Offer 60. n 个骰子的点数</span></h1>\n<p>把 n 个骰子扔在地上，所有骰子朝上一面的点数之和为 s。输入 n，打印出 s 的所有可能的值出现的概率。</p>\n<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>1 &lt;= n &lt;= 11</code></p>\n<h2 id=\"思路及代码-3\"><a class=\"anchor\" href=\"#思路及代码-3\">#</a> 思路及代码</h2>\n<p>dp [i][j] 表示 i 个骰子时，点数总和取值的概率</p>\n<ul>\n<li>如 1 个骰子的时候总和可能为 [1, 2, 3, 4, 5, 6]</li>\n<li>2 个骰子时，为 [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</li>\n<li>i 个骰子时，总和个数为  <code>6*i-(i-1)</code>  化简为  <code>5*i+1</code></li>\n<li>由于新增骰子的点数只可能为 1 至 6 ，因此概率  <code>dp[i-1][x]</code>  仅与  <code>dp[i][x+1]</code> ,  <code>dp[i][x+2]</code> , ... ,  <code>dp[i][x+6]</code>  相关。因此，遍历  <code>dp[i-1]</code>  中各点数和的概率贡献值，并将贡献值相加至  <code>dp[i]</code>  中所有相关项，即可完成的递推。。</li>\n<li>也就是说，增加骰子的个数到  <code>i</code>  个时， <code>i-1</code>  个骰子的点数  <code>j</code>  会对拥有  <code>i</code>  个骰子时的点数  <code>j+k</code>  产生影响</li>\n<li>由于每次都只跟  <code>i-1</code>  有关，故可优化空间</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">dicesProbability</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//i 个骰子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// i*6-(i-1)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  j <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                next<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        dp <span class=\"token operator\">=</span> next</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> dp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "字符串",
                "动态规划",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day28/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day28/",
            "title": "剑指offer day28 搜索与回溯算法（困难）",
            "date_published": "2022-04-26T14:32:00.000Z",
            "content_html": "<p>day28 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveHUtbGllLWh1YS1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 37. 序列化二叉树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemktZnUtY2h1YW4tZGUtcGFpLWxpZS1sY29mLw==\">剑指 Offer 38. 字符串的排列</span></p>\n<p>知识点：树、字符串、回溯，难度为困难、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveHUtbGllLWh1YS1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 37. 序列化二叉树</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RlcHRoLWZpcnN0LXNlYXJjaA==\">深度优先搜索</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemktZnUtY2h1YW4tZGUtcGFpLWxpZS1sY29mLw==\">剑指 Offer 38. 字符串的排列</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JhY2t0cmFja2luZw==\">回溯</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-37-序列化二叉树\"><a class=\"anchor\" href=\"#剑指-offer-37-序列化二叉树\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveHUtbGllLWh1YS1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 37. 序列化二叉树</span></h1>\n<p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>\n<p>你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n<p><strong>提示：</strong> 输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmxlZXRjb2RlLWNuLmNvbS9oYy9rYi9hcnRpY2xlLzExOTQzNTMv\">LeetCode 序列化二叉树的格式</span>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>\n<p><strong>示例：</strong></p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70a2e7018db1416dab0c4907d0e73893~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n<pre><code>输入： root = [1,2,3,null,null,4,5]\n输出： [1,2,3,null,null,4,5]\n</code></pre>\n<p>注意：本题与主站 297 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2VyaWFsaXplLWFuZC1kZXNlcmlhbGl6ZS1iaW5hcnktdHJlZS8=\">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<ul>\n<li>序列化：先序遍历二叉树，遇到空子树的时序列化成  <code>N,</code> ，值序列化为值 + <code>,</code>  并继续递归序列化。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> str<span class=\"token operator\">+</span><span class=\"token string\">'N,'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    str <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> str</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>反序列化：将原先的序列分割开来，得到元素列表，然后从左向右遍历这个序列\n<ul>\n<li>当前的元素为  <code>N</code>  则当前为空树</li>\n<li>先解析这棵树的左子树，再解析它的右子树</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> root </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>完整代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * function TreeNode(val) &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     this.val = val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     this.left = this.right = null;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * Encodes a tree to a single string.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @param &#123;TreeNode&#125; root</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @return &#123;string&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">serialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> str<span class=\"token operator\">+</span><span class=\"token string\">'N,'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> str</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * Decodes your encoded data to tree.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param &#123;string&#125; data</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @return &#123;TreeNode&#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deserialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> root </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * Your functions will be called as such:</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * deserialize(serialize(root));</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> */</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-38-字符串的排列\"><a class=\"anchor\" href=\"#剑指-offer-38-字符串的排列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemktZnUtY2h1YW4tZGUtcGFpLWxpZS1sY29mLw==\">剑指 Offer 38. 字符串的排列</span></h1>\n<p>输入一个字符串，打印出该字符串中字符的所有排列。</p>\n<p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入： s = &quot;abc&quot;\n输出：[ &quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot; ]\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>1 &lt;= s 的长度 &lt;= 8</code></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>经典の字符串全排列</p>\n<p>不过注意，这里是有重复元素的全排列～所以需要用到 map，之前出现过的就不必再排列</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;string[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">permutation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">permu</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rest<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rest<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            m<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">permu</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> str<span class=\"token operator\">+</span>rest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">permu</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "树",
                "字符串",
                "回溯"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day27/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day27/",
            "title": "剑指offer day27 栈与队列（困难）",
            "date_published": "2022-04-25T15:32:00.000Z",
            "content_html": "<p>day27 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaHVhLWRvbmctY2h1YW5nLWtvdS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - I. 滑动窗口的最大值</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZHVpLWxpZS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - II. 队列的最大值</span></p>\n<p>知识点：队列、设计、滑动窗口，难度为困难、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaHVhLWRvbmctY2h1YW5nLWtvdS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - I. 滑动窗口的最大值</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3F1ZXVl\">队列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NsaWRpbmctd2luZG93\">滑动窗口</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21vbm90b25pYy1xdWV1ZQ==\">单调队列</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZHVpLWxpZS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - II. 队列的最大值</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2Rlc2lnbg==\">设计</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3F1ZXVl\">队列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21vbm90b25pYy1xdWV1ZQ==\">单调队列</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-59-i-滑动窗口的最大值\"><a class=\"anchor\" href=\"#剑指-offer-59-i-滑动窗口的最大值\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaHVhLWRvbmctY2h1YW5nLWtvdS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - I. 滑动窗口的最大值</span></h1>\n<p>给定一个数组  <code>nums</code>  和滑动窗口的大小  <code>k</code> ，请找出所有滑动窗口里的最大值。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre>\n<p><strong>提示：</strong></p>\n<p>你可以假设 <em>k</em> 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p>\n<p>注意：本题与主站 239 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2xpZGluZy13aW5kb3ctbWF4aW11bS8=\">https://leetcode-cn.com/problems/sliding-window-maximum/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p><a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day16/#239\">冲刺春招 - 精选笔面试 66 题大通关 16</a> 同款题</p>\n<p>用一个队列 q 存储下标，其对应元素单调递减</p>\n<ul>\n<li>若滑动窗口中两个元素  <code>j &lt; i</code>  并且  <code>nums[j] &lt;= nums[i]</code>  ，只要  <code>j</code>  还在窗口中，那么  <code>i</code>  一定也还在窗口中，所以最值一定不是  <code>nums[j]</code> ，故可以将其移除</li>\n<li>滑动过程中记录，若队尾元素小于等于当前新元素，则弹出，直到为空或者队尾元素大于新元素</li>\n<li>同时若队头所存下标  <code>q[0]</code>  小于窗口左侧  <code>l</code> ，则不断将队首弹出</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; k</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxSlidingWindow</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> l<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-59-ii-队列的最大值\"><a class=\"anchor\" href=\"#剑指-offer-59-ii-队列的最大值\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZHVpLWxpZS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - II. 队列的最大值</span></h1>\n<p>请定义一个队列并实现函数  <code>max_value</code>  得到队列里的最大值，要求函数 <code>max_value</code> 、 <code>push_back</code>  和  <code>pop_front</code>  的<strong>均摊</strong>时间复杂度都是 O (1)。</p>\n<p>若队列为空， <code>pop_front</code>  和  <code>max_value</code>  需要返回 -1</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: \n[&quot;MaxQueue&quot;,&quot;push_back&quot;,&quot;push_back&quot;,&quot;max_value&quot;,&quot;pop_front&quot;,&quot;max_value&quot;]\n[[],[1],[2],[],[],[]]\n输出: [null,null,null,2,1,2]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入: \n[&quot;MaxQueue&quot;,&quot;pop_front&quot;,&quot;max_value&quot;]\n[[],[],[]]\n输出: [null,-1,-1]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= push_back,pop_front,max_value的总操作数 &lt;= 10000</code></li>\n<li><code>1 &lt;= value &lt;= 10^5</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>比较类似之前的 min 栈：<a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/offer/day1/#offer-30-min\">剑指 offer day1 栈与队列（简单）</a></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @algorithm @lc id=100337 lang=javascript </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @title dui-lie-de-zui-da-zhi-lcof</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">MaxQueue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">MaxQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">max_value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @param &#123;number&#125; value</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">MaxQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">push_back</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token class-name\">MaxQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">pop_front</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> value</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * Your MaxQueue object will be instantiated and called as such:</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * var obj = new MaxQueue()</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> * var param_1 = obj.max_value()</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> * obj.push_back(value)</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> * var param_3 = obj.pop_front()</pre></td></tr><tr><td data-num=\"44\"></td><td><pre> */</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "滑动窗口",
                "队列",
                "设计"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day26/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day26/",
            "title": "剑指offer day26 字符串（中等）",
            "date_published": "2022-04-24T15:00:00.000Z",
            "content_html": "<p>day26 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlhby1zaGktc2h1LXpoaS1kZS16aS1mdS1jaHVhbi1sY29mLw==\">剑指 Offer 20. 表示数值的字符串</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmEtemktZnUtY2h1YW4temh1YW4taHVhbi1jaGVuZy16aGVuZy1zaHUtbGNvZi8=\">剑指 Offer 67. 把字符串转换成整数</span></p>\n<p>知识点：字符串、模拟，难度为中等、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlhby1zaGktc2h1LXpoaS1kZS16aS1mdS1jaHVhbi1sY29mLw==\">剑指 Offer 20. 表示数值的字符串</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmEtemktZnUtY2h1YW4temh1YW4taHVhbi1jaGVuZy16aGVuZy1zaHUtbGNvZi8=\">剑指 Offer 67. 把字符串转换成整数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-20-表示数值的字符串\"><a class=\"anchor\" href=\"#剑指-offer-20-表示数值的字符串\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlhby1zaGktc2h1LXpoaS1kZS16aS1mdS1jaHVhbi1sY29mLw==\">剑指 Offer 20. 表示数值的字符串</span></h1>\n<p>请实现一个函数用来判断字符串是否表示<strong>数值</strong>（包括整数和小数）。</p>\n<p><strong>数值</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>若干空格</li>\n<li>一个 <strong>小数</strong> 或者 <strong>整数</strong></li>\n<li>（可选）一个  <code>'e'</code>  或  <code>'E'</code>  ，后面跟着一个 <strong>整数</strong></li>\n<li>若干空格</li>\n</ol>\n<p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>\n<p>（可选）一个符号字符（ <code>'+'</code>  或  <code>'-'</code> ）</p>\n</li>\n<li>\n<p>下述格式之一：</p>\n<ol>\n<li>至少一位数字，后面跟着一个点  <code>'.'</code></li>\n<li>至少一位数字，后面跟着一个点  <code>'.'</code>  ，后面再跟着至少一位数字</li>\n<li>一个点  <code>'.'</code>  ，后面跟着至少一位数字</li>\n</ol>\n</li>\n</ol>\n<p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>（可选）一个符号字符（ <code>'+'</code>  或  <code>'-'</code> ）</li>\n<li>至少一位数字</li>\n</ol>\n<p>部分<strong>数值</strong>列举如下：</p>\n<ul>\n<li><code>[&quot;+100&quot;, &quot;5e2&quot;, &quot;-123&quot;, &quot;3.1416&quot;, &quot;-1E-16&quot;, &quot;0123&quot;]</code></li>\n</ul>\n<p>部分<strong>非数值</strong>列举如下：</p>\n<ul>\n<li><code>[&quot;12e&quot;, &quot;1a3.14&quot;, &quot;1.2.3&quot;, &quot;+-5&quot;, &quot;12e+5.4&quot;]</code></li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： s = &quot;0&quot;\n输出： true\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： s = &quot;e&quot;\n输出： false\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入： s = &quot;.&quot;\n输出： false\n</code></pre>\n<p><strong>示例 4：</strong></p>\n<pre><code>输入： s = &quot;    .1  &quot;\n输出： true\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 20</code></li>\n<li><code>s</code>  仅含英文字母（大写和小写），数字（ <code>0-9</code> ），加号  <code>'+'</code>  ，减号  <code>'-'</code>  ，空格  <code>' '</code>  或者点  <code>'.'</code>  。</li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>简简单单一个模拟</p>\n<ul>\n<li>去除前后空格</li>\n<li>判断是否存在 e/E\n<ul>\n<li>存在则判断前缀是否为整数 / 小数，再判断后缀是否为整数</li>\n<li>不存在则直接判断整个是否为整数 / 小数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 去除前后空格</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>cnt </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">judgeDouble</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">let</span> isDot <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDot<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span> cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                isDot <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDot<span class=\"token punctuation\">)</span> pre <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> idx <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">let</span> post <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judgeDouble</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">judgeDouble</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-67-把字符串转换成整数\"><a class=\"anchor\" href=\"#剑指-offer-67-把字符串转换成整数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmEtemktZnUtY2h1YW4temh1YW4taHVhbi1jaGVuZy16aGVuZy1zaHUtbGNvZi8=\">剑指 Offer 67. 把字符串转换成整数</span></h1>\n<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n<p><strong>说明：</strong></p>\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: &quot;42&quot;\n输出: 42\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: &quot;   -42&quot;\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n</code></pre>\n<p><strong>示例 3:</strong></p>\n<pre><code>输入: &quot;4193 with words&quot;\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n</code></pre>\n<p><strong>示例 4:</strong></p>\n<pre><code>输入: &quot;words and 987&quot;\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n</code></pre>\n<p><strong>示例 5:</strong></p>\n<pre><code>输入: &quot;-91283472332&quot;\n输出: -2147483648\n解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n</code></pre>\n<p>注意：本题与主站 8 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3RyaW5nLXRvLWludGVnZXItYXRvaS8=\">https://leetcode-cn.com/problems/string-to-integer-atoi/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>官解是写了个自动机……</p>\n<p>纯纯的模拟就行了</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">strToInt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">?</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">++</span>idx</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">let</span> Int_max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> Int_min <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span>flag <span class=\"token operator\">>=</span> Int_max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Int_max</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span>flag <span class=\"token operator\">&lt;=</span> Int_min<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Int_min</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token operator\">++</span>idx</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token operator\">*</span>flag</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "字符串",
                "模拟"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day25/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day25/",
            "title": "剑指offer day25 模拟（中等）",
            "date_published": "2022-04-23T15:00:00.000Z",
            "content_html": "<p>day25 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1bi1zaGktemhlbi1kYS15aW4tanUtemhlbi1sY29mLw==\">剑指 Offer 29. 顺时针打印矩阵</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhhbi1kZS15YS1ydS1kYW4tY2h1LXh1LWxpZS1sY29mLw==\">剑指 Offer 31. 栈的压入、弹出序列</span></p>\n<p>知识点：数组、栈、模拟，难度为简单、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1bi1zaGktemhlbi1kYS15aW4tanUtemhlbi1sY29mLw==\">剑指 Offer 29. 顺时针打印矩阵</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdHJpeA==\">矩阵</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NpbXVsYXRpb24=\">模拟</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhhbi1kZS15YS1ydS1kYW4tY2h1LXh1LWxpZS1sY29mLw==\">剑指 Offer 31. 栈的压入、弹出序列</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0YWNr\">栈</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NpbXVsYXRpb24=\">模拟</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-29-顺时针打印矩阵\"><a class=\"anchor\" href=\"#剑指-offer-29-顺时针打印矩阵\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1bi1zaGktemhlbi1kYS15aW4tanUtemhlbi1sY29mLw==\">剑指 Offer 29. 顺时针打印矩阵</span></h1>\n<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出： [1,2,3,6,9,8,7,4,5]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出： [1,2,3,4,8,12,11,10,9,5,6,7]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= matrix.length &lt;= 100</code></li>\n<li><code>0 &lt;= matrix[i].length &lt;= 100</code></li>\n</ul>\n<p>注意：本题与主站 54 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3BpcmFsLW1hdHJpeC8=\">https://leetcode-cn.com/problems/spiral-matrix/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>这不还是螺旋矩阵嘛！</p>\n<p>移步<a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day6/#54\">冲刺春招 - 精选笔面试 66 题大通关 day6</a></p>\n<ul>\n<li>每次就一直往右下左上的顺序走就行了</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[][]&#125; matrix</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">spiralOrder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">matrix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span>m</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-31-栈的压入-弹出序列\"><a class=\"anchor\" href=\"#剑指-offer-31-栈的压入-弹出序列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhhbi1kZS15YS1ydS1kYW4tY2h1LXh1LWxpZS1sY29mLw==\">剑指 Offer 31. 栈的压入、弹出序列</span></h1>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出： true\n解释： 我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出： false\n解释： 1 不能在 2 之前弹出。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n<li><code>pushed</code>  是  <code>popped</code>  的排列。</li>\n</ol>\n<p>注意：本题与主站 946 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWRhdGUtc3RhY2stc2VxdWVuY2VzLw==\">https://leetcode-cn.com/problems/validate-stack-sequences/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>每次入栈后判断是否可以弹出序列。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @title zhan-de-ya-ru-dan-chu-xu-lie-lcof</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number[]&#125; pushed</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;number[]&#125; popped</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">validateStackSequences</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pushed<span class=\"token punctuation\">,</span> popped</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pushed<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pushed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> popped<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "模拟",
                "栈",
                "数组"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day24/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day24/",
            "title": "剑指offer day24 数学（中等）",
            "date_published": "2022-04-22T15:49:00.000Z",
            "content_html": "<p>day24 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mLw==\">剑指 Offer 14- I. 剪绳子</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGUtd2VpLXNkZS1saWFuLXh1LXpoZW5nLXNodS14dS1saWUtbGNvZi8=\">剑指 Offer 57 - II. 和为 s 的连续正数序列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveXVhbi1xdWFuLXpob25nLXp1aS1ob3Utc2hlbmcteGlhLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 62. 圆圈中最后剩下的数字</span></p>\n<p>知识点：数学、双指针，难度为中等、简单、简单</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mLw==\">剑指 Offer 14- I. 剪绳子</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGUtd2VpLXNkZS1saWFuLXh1LXpoZW5nLXNodS14dS1saWUtbGNvZi8=\">剑指 Offer 57 - II. 和为 s 的连续正数序列</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3R3by1wb2ludGVycw==\">双指针</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2VudW1lcmF0aW9u\">枚举</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveXVhbi1xdWFuLXpob25nLXp1aS1ob3Utc2hlbmcteGlhLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 62. 圆圈中最后剩下的数字</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>简单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-14-i-剪绳子\"><a class=\"anchor\" href=\"#剑指-offer-14-i-剪绳子\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mLw==\">剑指 Offer 14- I. 剪绳子</span></h1>\n<p>给你一根长度为  <code>n</code>  的绳子，请把绳子剪成整数长度的  <code>m</code>  段（m、n 都是整数，n&gt;1 并且 m&gt;1），每段绳子的长度记为  <code>k[0],k[1]...k[m-1]</code>  。请问  <code>k[0]*k[1]*...*k[m-1]</code>  可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= n &lt;= 58</code></li>\n</ul>\n<p>注意：本题与主站 343 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW50ZWdlci1icmVhay8=\">https://leetcode-cn.com/problems/integer-break/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>数学题，没做出来，看了题解的推导 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mL3NvbHV0aW9uL21pYW4tc2hpLXRpLTE0LWktamlhbi1zaGVuZy16aS10YW4teGluLXNpLXhpYW5nLWJ5Lw==\">面试题 14- I. 剪绳子</span>，主要有以下几点</p>\n<ul>\n<li>将绳子以相等长度切分为多段时，所得乘积最大。</li>\n<li>尽可能将绳子以 <code>长度3等分</code>  为多段时，乘积最大\n<ul>\n<li>若最后一段为  <code>2</code>  保留，不在拆分为  <code>1+1</code></li>\n<li>若最后一段为  <code>1</code>  应将一份  <code>3+1</code>  换为  <code>2+2</code> <br />\n 则有以下算法流程：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cuttingRope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-57-ii-和为s的连续正数序列\"><a class=\"anchor\" href=\"#剑指-offer-57-ii-和为s的连续正数序列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGUtd2VpLXNkZS1saWFuLXh1LXpoZW5nLXNodS14dS1saWUtbGNvZi8=\">剑指 Offer 57 - II. 和为 s 的连续正数序列</span></h1>\n<p>输入一个正整数  <code>target</code>  ，输出所有和为  <code>target</code>  的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： target = 9\n输出： [[2,3,4],[4,5]]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： target = 15\n输出： [[1,2,3,4,5],[4,5,6],[7,8]]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= target &lt;= 10^5</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>双指针。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; target</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[][]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findContinuousSequence</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">++</span>l</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>r</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token operator\">++</span>l</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-62-圆圈中最后剩下的数字\"><a class=\"anchor\" href=\"#剑指-offer-62-圆圈中最后剩下的数字\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveXVhbi1xdWFuLXpob25nLXp1aS1ob3Utc2hlbmcteGlhLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 62. 圆圈中最后剩下的数字</span></h1>\n<p>0,1,・・・,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3。</p>\n<p></p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: n = 5, m = 3\n输出: 3\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入: n = 10, m = 17\n输出: 2\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 10^5</code></li>\n<li><code>1 &lt;= m &lt;= 10^6</code></li>\n</ul>\n<h2 id=\"思路及代码-3\"><a class=\"anchor\" href=\"#思路及代码-3\">#</a> 思路及代码</h2>\n<p>约瑟夫环。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; m</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lastRemaining</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> i</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "双指针",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/2022-life-review/",
            "url": "https://ysx.cosine.ren/2022-life-review/",
            "title": "2022，写给自己的一篇文章",
            "date_published": "2022-04-21T18:02:14.000Z",
            "content_html": "<p>2022，写给自己的一篇文章</p>\n<p>就在这几天，我的春招找实习结束了。投了很多家，挂了很多家，总结了不少经验教训。有很多不甘，意识到了自己的不足还有很多，也开始每天刷刷题，为秋招提前批做准备了。</p>\n<p>有感而发，写一篇记录自己过去的博客，后面可能随意更新。</p>\n<p><span id=\"more\"></span></p>\n<p>翻看相册，翻到了高中的毕业留念，顿时就怀念起来了。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/qq_pic_merged_1650557249898.jpg\" alt=\"qq_pic_merged_1650557249898.jpg\" /></p>\n<p>刚报这个专业的时候，老爸虽然不建议我走他的老路，但还是没有反对，所有志愿填的都是计算机或者软件工程，事实上，上了大学之后才发现，我好像真的找到了我热爱的东西，那就是编程。同学、老师、很多人对我的第一反应都是，妹子也喜欢写代码？多无趣啊，以后头发肯定少（虽然发量确实少）。也有觉得很酷的。甚至连我自己都一度有点怀疑自己，去知乎搜过不少相关回答（女生学计算机怎么怎么样 xxxx……），但是，到了大一下学期之后，我明白了压根就没什么性别之分，还是热爱重要。我也不喜欢别人拿我跟别女生比较，我就是我，敲代码是兴趣，若这份兴趣能赚到钱就更棒了，仅此而已。</p>\n<p>我不是个喜欢写命题作文的人，也不是个擅长于考试与应试教育的人。从高中开始，我就意识到了这一点。“没有什么文化细胞，写的东西都是流水账”...... 所以这篇文章也是我无聊到一定境界才会发生的一个奇迹。高中的我喜欢数学，讨厌理综和语文、英语，到了大学我也依然不喜欢大物，但是慢慢的，喜欢用博客记录一些流水账，不论是技术还是生活。</p>\n<p>上大学以来，发生了很多以前没有想过的事，也收获了很多东西。这个大学过的还是蛮充实的，社团留任部长、学生会留任部长、奖学金也拿了一年的、也成为了预备党员、勤工俭学也干过、各种校奖也都拿了一遍、绩点也拿了一次班级第一、竞赛也打过不少小比赛、也折腾过云服务器、挂过自动打卡、写过爬虫、参加各种训练营……</p>\n<p>但是，充实并不代表着就能学到很多，现在想想，也做过不少当时看来牛逼极了，现在觉得是无用功的事情。很多时候反而是在白忙活……</p>\n<p>技术上，不能自满，不能停滞不前…… 大学以来的课设，全部都是自己独立完成，虽然分数高低很玄学（自觉还行的数据库课设，只得了一个中，自觉不太行的 c++ 课设和 Java 课设都拿了优）。犹记得当初 Java 课设，见到学长用 JavaFX 写而不是 swing 写的界面后惊为天人，决定了不用丑丑的 swing 写而是用 JavaFX 自己定制，当时肝了有一周吧，每天都在敲课设，临近截止的那几天时，甚至睡在了办公室里防止回去敲代码打扰室友。现在：居然要肝那么久，我好菜啊。</p>\n<p>生产力工具上，我从大一的不知所措，甚至用干过手机刷 oj 这件事，到现在熟练使用 idea、datagrip、vscode 等，天知道我都经历了些什么变迁...</p>\n<p>感情上…… 嗯这个不太好意思说，略过</p>\n<p>温馨提示：下面的回忆大多为流水账哦，可以关闭窗口了。</p>\n<h2 id=\"大一上\"><a class=\"anchor\" href=\"#大一上\">#</a> 大一上</h2>\n<p>入学前，怀念那个能跟家长一起逛校园的日子……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/qq_pic_merged_1650557330958.jpg\" alt=\"qq_pic_merged_1650557330958.jpg\" /></p>\n<p>刚来到这个专业的时候，对电脑的认知只停留在打游戏，做做 ppt，写写文档等。自从开学前就在群里了解到编程之后，我就开始看看慕课。</p>\n<p>开学的时候参加了计算机服务社和院学生会，加入计服社这个可能是我大学最重要的决定之一，认识了很多大佬、学长学姐，极大幅度的拓宽了我的圈子和认知，还点亮了修电脑的技能（虽然也就会重装系统和拆不同型号的笔记本康康小问题）。计服社的义修真的很有意思</p>\n<p>最忙的时候，甚至还会发朋友圈抱怨哈哈哈哈哈，现在想想觉得当时的自己可太幼稚了呢，虽然事实上后面还有的是更难的时候。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_044240_1.jpg\" alt=\"IMG_20220418_044240_1.jpg\" /></p>\n<p>那个时候的我还很喜欢拿手机到处拍拍校园风景，对一切都很好奇。加入学生会新媒体后更是拿个相机到处跑，喜欢的不得了。</p>\n<ul>\n<li>拍一拍钟楼</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228694745.jpeg\" alt=\"1650228694745.jpeg\" /></p>\n<ul>\n<li>拍一拍晚霞</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228730266.jpeg\" alt=\"1650228730266.jpeg\" /></p>\n<p>拍一拍澡堂外的小树林</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228815779.jpeg\" alt=\"1650228815779.jpeg\" /></p>\n<p>那个时候还存在着的小蓝，现在都已经不在了</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228872042.jpeg\" alt=\"1650228730266.jpeg\" /></p>\n<p>这是学校哦，莲湖旁的芦苇丛</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228942880.jpeg\" alt=\"1650228942880.jpeg\" /></p>\n<p>拍一拍初雪</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228972597.jpeg\" alt=\"1650228972597.jpeg\" /></p>\n<p>拍一拍军训大阅兵</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229105658.jpg\" alt=\"mmexport1650229105658.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229112534.jpg\" alt=\"mmexport1650229112534.jpg\" /></p>\n<p>新媒体的第一次聚餐</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229146146.jpg\" alt=\"mmexport1650229146146.jpg\" /></p>\n<p>那是大学有幸参加过得第一次院运动会，那时候谁想得到会是最后一次参加。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229193757.jpg\" alt=\"mmexport1650229193757.jpg\" /></p>\n<p>计服社知识竞赛上震撼全场的题目 (人才出题人！是谁捏)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229446870.jpg\" alt=\"mmexport1650229446870.jpg\" /></p>\n<p>雨天躲宿舍安心敲代码，那个时候用的工具还是 cb……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229534361.jpg\" alt=\"mmexport1650229534361.jpg\" /></p>\n<p>关于双十一计服社的群头像：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_050230_1.jpg\" alt=\"IMG_20220418_050230_1.jpg\" /></p>\n<p>计服社的元旦晚会 以及 2019 幼稚的自我总结</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229658285.jpg\" alt=\"mmexport1650229658285.jpg\" /></p>\n<p>这么幼稚的人谁啊 - -</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_050652_1.jpg\" alt=\"IMG_20220418_050652_1\" /></p>\n<h2 id=\"大一下\"><a class=\"anchor\" href=\"#大一下\">#</a> 大一下</h2>\n<p>在大一上之后的寒假里，我开始提前自学下学期的 c++，对代码依然抱有很大的热情，写过很蠢的自我总结，也干过这种事捏。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_051426_1.jpg\" alt=\"IMG_20220418_051426_1.jpg\" /></p>\n<p>第三次尝试拆机，在家，暴力出奇迹了……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_051553_1.jpg\" alt=\"IMG_20220418_051553_1.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230141443.jpg\" alt=\"mmexport1650230141443.jpg\" /></p>\n<p>开学后继续学习 c++，慕课是跟着 mooc 的某知名慕课学习的，做其中作业 (魔兽世界 123) 时，头一次体验到代码量的增加，一开始写了 100 多行觉得哇我好棒，到后来结课作业写了 700 多行，再到后来课设用 c++ 写了 1000 行，我逐渐理解了一切.jpg，学习了 STL 以及能打一点点比赛了</p>\n<p>开始尝试写博客，将自己的学习理解记录下来。</p>\n<p>c++ 综合案例，第一次尝试写点小游戏</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230237802.jpg\" alt=\"mmexport1650230237802.jpg\" /></p>\n<p>对了，大一下学期其实因为疫情，一直没去学校，线上开的学，也因此大一上结束刚在一起，就异地了近一年......(残念)</p>\n<p>家附近的湖</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230286645.jpg\" alt=\"mmexport1650230286645.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230300651.jpg\" alt=\"mmexport1650230300651.jpg\" /></p>\n<p>寒假开练，练了一暑假的专题之后，作出决定决定走开发路线而不是 acm 路线，原因有很多，如对自己不自信、当时找不到队友、对开发更感兴趣等等。现在想想，也不后悔。</p>\n<h2 id=\"大二上\"><a class=\"anchor\" href=\"#大二上\">#</a> 大二上</h2>\n<p>快逃，这学期全是课。还要打工，5 号楼值班，虽说每个月能挣个三四百的但是还是蛮累的。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230722988.jpg\" alt=\"mmexport1650230722988.jpg\" /></p>\n<p>选修选了桥牌的倒霉孩子 (愿天堂没有桥牌考试)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230527096.jpg\" alt=\"mmexport1650230527096.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230529628.jpg\" alt=\"mmexport1650230529628.jpg\" /></p>\n<p>礼物 × 砖头✓ 但是真的沉</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230581780.jpg\" alt=\"mmexport1650230581780.jpg\" /></p>\n<p>第一次自己做可乐鸡翅！还有第一次炸薯条给自己吃 x 很好吃 (虽然糊了点)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230620273.jpg\" alt=\"mmexport1650230620273.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230963587.jpg\" alt=\"mmexport1650230963587.jpg\" /></p>\n<p>寒假回了老家，看望大黄 (姨奶家超级乖的狗子【怎么感觉眉清目秀的】都不叫的还让随便摸<br />\n就是不知道为啥跟我身上衣服颜色特别搭</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231052859.jpg\" alt=\"mmexport1650231052859.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230985241.jpg\" alt=\"mmexport1650230985241.jpg\" /></p>\n<h2 id=\"大二下\"><a class=\"anchor\" href=\"#大二下\">#</a> 大二下</h2>\n<p>春天到了，花开的很漂亮</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231082395.jpg\" alt=\"mmexport1650231082395.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231086402.jpg\" alt=\"mmexport1650231086402.jpg\" /></p>\n<p>智能科技联盟，奇怪的技能点增加了！(并没有)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231161300.jpg\" alt=\"mmexport1650231161300.jpg\" /></p>\n<p>为了美术鉴赏论文而去美术馆，对，就这么真实。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231280985.jpg\" alt=\"mmexport1650231280985.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231278039.jpg\" alt=\"mmexport1650231278039.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231223573.jpg\" alt=\"mmexport1650231223573.jpg\" /></p>\n<p>期间，有个超厉害的 20 级学妹一起组队，由于我也没怎么训练，一起去河农大省赛打了铁 QAQ (不过农大的欧式建筑真的是好风光)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231308524.jpg\" alt=\"mmexport1650231308524.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231503148.jpg\" alt=\"mmexport1650231503148.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231316123.jpg\" alt=\"mmexport1650231316123.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231319783.jpg\" alt=\"mmexport1650231319783.jpg\" /></p>\n<p>这学期的绩点看起来倒是稍微没那么拉了（上学期侯老师教的离散和这学期的操作系统都是非常好的老师）</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231572937.jpg\" alt=\"mmexport1650231572937.jpg\" /></p>\n<p>放假了依旧是出去吃吃吃喝喝喝（郑州物价，赞！）</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231542501.jpg\" alt=\"mmexport1650231542501.jpg\" /></p>\n<p>好像是在这个学期，我开发了小爱课程表我们学校的适配，到现在已经有 900 多个人用了，真不可思议……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/Screenshot_2021-12-24-03-05-56-464_com.miui.voice.jpg\" alt=\"Screenshot_2021-12-24-03-05-56-464_com.miui.voice.jpg\" /></p>\n<p>尝试开发小程序</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1640286522786.jpg\" alt=\"mmexport1640286522786.jpg\" /></p>\n<h2 id=\"大三上\"><a class=\"anchor\" href=\"#大三上\">#</a> 大三上</h2>\n<p>暑假里折腾了云服务器，域名，自动打卡，用 WordPress 搭了简易博客，期间也试过一阵子个人网盘 (感觉没意思)<br />\n 最初的博客样子：丑，但能用</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231880694.jpg\" alt=\"mmexport1650231880694.jpg\" /></p>\n<p>去考了考 PTA 乙级，虽然并没有满分。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_054405_1.jpg\" alt=\"IMG_20220418_054405_1.jpg\" /></p>\n<p>期间拿了个省银 (终于有个小奖了，感谢队友，感谢 CCTV，感谢)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_054550_1.jpg\" alt=\"IMG_20220418_054550_1.jpg\" /></p>\n<p>欸好像还有天梯赛，去年这个时候～</p>\n<p>《关于我们部门要审核 2019 年所有学生活动跟学院新闻的新闻稿所以我写了个爬虫这件事》<br />\n真  好  玩  呐<br />\n虽然事后并没有用上，突然又不用审核了（落泪</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232036012.jpg\" alt=\"mmexport1650232036012.jpg\" /></p>\n<p>去看联动拿了张海报贴宿舍 (我超 ○)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232079182.jpg\" alt=\"mmexport1650232079182.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232115925.jpg\" alt=\"mmexport1650232115925.jpg\" /></p>\n<p>关于 vscode 甚至能用来写汇编这件事</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232135312.jpg\" alt=\"mmexport1650232135312.jpg (1541×765) (jsdelivr.net)\" /></p>\n<h2 id=\"大三下\"><a class=\"anchor\" href=\"#大三下\">#</a> 大三下</h2>\n<p>之后，就是今年年初，开始学前端，向学长请教，寒假冲了，3 月份开始找暑期实习。期间又双叒叕封校了</p>\n<p>宿舍装备升级！</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20211231_172620.jpg\" alt=\"IMG_20211231_172620.jpg\" /></p>\n<p>哦对，放一张今年铜三铁四的春招实习战况：非常惨烈。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/spring-2022-yuque.png\" alt=\"spring-2022-yuque.png\" /></p>\n",
            "tags": [
                "随笔",
                "总结"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day23/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day23/",
            "title": "剑指offer day23 数学（简单）",
            "date_published": "2022-04-21T07:19:00.000Z",
            "content_html": "<p>day23 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yv\">剑指 Offer 39. 数组中出现次数超过一半的数字</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ291LWppYW4tY2hlbmctamktc2h1LXp1LWxjb2Yv\">剑指 Offer 66. 构建乘积数组</span></p>\n<p>知识点：数组、哈希、前缀和，难度为简单、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yv\">剑指 Offer 39. 数组中出现次数超过一半的数字</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2hhc2gtdGFibGU=\">哈希表</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RpdmlkZS1hbmQtY29ucXVlcg==\">分治</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2NvdW50aW5n\">计数</span> \\</td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ291LWppYW4tY2hlbmctamktc2h1LXp1LWxjb2Yv\">剑指 Offer 66. 构建乘积数组</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3ByZWZpeC1zdW0=\">前缀和</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-39-数组中出现次数超过一半的数字\"><a class=\"anchor\" href=\"#剑指-offer-39-数组中出现次数超过一半的数字\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yv\">剑指 Offer 39. 数组中出现次数超过一半的数字</span></h1>\n<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>1 &lt;= 数组长度 &lt;= 50000</code></p>\n<p>注意：本题与主站 169 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWFqb3JpdHktZWxlbWVudC8=\">https://leetcode-cn.com/problems/majority-element/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>思路一：利用哈希，当出现次数超过一半就立刻返回，但这样空间复杂度和时间复杂度都为 O (n)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">majorityElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            m<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>思路二：在大神<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdS9qeWQv\"> Krahets</span> 题解中提到的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yvc29sdXRpb24vbWlhbi1zaGktdGktMzktc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLTMv\">摩尔投票法</span>，主要要注意两个推论，详见题解。</p>\n<ul>\n<li>推论一： 若记 <strong>众数</strong> 的票数为  <code>+1</code>  ，<strong>非众数</strong> 的票数为  <code>-1</code>  ，则一定有所有数字的<strong>票数和</strong>  <code>&gt; 0</code> 。</li>\n<li>推论二： 若数组的前  <code>a</code>  个数字的 <strong>票数和</strong>  <code>= 0</code>  ，则 数组剩余  <code>(n−a)</code>  个数字的 <strong>票数和一定仍</strong>  <code>&gt; 0</code>  ，即后  <code>(n-a)</code>  个数字的 众数仍为  <code>x</code> 。</li>\n</ul>\n<blockquote>\n<p>ps：这个思路真是清奇。没想到</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">majorityElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> vote <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> candidate <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vote <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            candidate <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        vote <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> candidate<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> candidate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-66-构建乘积数组\"><a class=\"anchor\" href=\"#剑指-offer-66-构建乘积数组\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ291LWppYW4tY2hlbmctamktc2h1LXp1LWxjb2Yv\">剑指 Offer 66. 构建乘积数组</span></h1>\n<p>给定一个数组  <code>A[0,1,…,n-1]</code> ，请构建一个数组  <code>B[0,1,…,n-1]</code> ，其中  <code>B[i]</code>  的值是数组  <code>A</code>  中除了下标  <code>i</code>  以外的元素的积，即  <code>B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]</code> 。不能使用除法。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入: [1,2,3,4,5]\n输出: [120,60,40,30,24]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>所有元素乘积之和不会溢出 32 位整数</li>\n<li><code>a.length &lt;= 100000</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>这题就有些类似之前字节校园的题目：<a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day14/#%E6%80%9D%E8%B7%AF-3\">冲刺春招 - 精选笔面试 66 题大通关 day14：135. 分发糖果</a> 的弱化弱化版了，从左往右初始化下数组  <code>l</code> ,  <code>l[i]</code>  表示 i 左侧所有数字的乘积，而第二次遍历从右侧开始，算出右侧乘积和后直接加到数组上。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">constructArr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        l<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 右侧乘积 &amp; res 计算</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            r <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> r</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "哈希",
                "数组",
                "前缀和"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day22/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day22/",
            "title": "剑指offer day22 位运算（中等）",
            "date_published": "2022-04-20T12:30:00.000Z",
            "content_html": "<p>day22 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtbGNvZi8=\">剑指 Offer 56 - I. 数组中数字出现的次数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtaWktbGNvZi8=\">剑指 Offer 56 - II. 数组中数字出现的次数 II</span></p>\n<p>知识点：数组、位运算，难度为中等、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtbGNvZi8=\">剑指 Offer 56 - I. 数组中数字出现的次数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpdC1tYW5pcHVsYXRpb24=\">位运算</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtaWktbGNvZi8=\">剑指 Offer 56 - II. 数组中数字出现的次数 II</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpdC1tYW5pcHVsYXRpb24=\">位运算</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-56-i-数组中数字出现的次数\"><a class=\"anchor\" href=\"#剑指-offer-56-i-数组中数字出现的次数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtbGNvZi8=\">剑指 Offer 56 - I. 数组中数字出现的次数</span></h1>\n<p>一个整型数组  <code>nums</code>  里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是 O (n)，空间复杂度是 O (1)。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： nums = [4,1,4,6]\n输出： [1,6] 或 [6,1]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： nums = [1,2,10,4,1,4,3,3]\n输出： [2,10] 或 [10,2]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 10000</code></li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>分组进行异或，将相同的数字分至一组，不同的两个数组分至不同的一组，通过 mask 确定分组条件。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">singleNumbers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> xor <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\">// 为这两数字的异或</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    xor <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> mask <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xor <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      mask <span class=\"token operator\">=</span> mask <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            a <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> b <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-56-ii-数组中数字出现的次数-ii\"><a class=\"anchor\" href=\"#剑指-offer-56-ii-数组中数字出现的次数-ii\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtaWktbGNvZi8=\">剑指 Offer 56 - II. 数组中数字出现的次数 II</span></h1>\n<p>在一个数组  <code>nums</code>  中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： nums = [3,4,3,3]\n输出： 4\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： nums = [9,1,7,9,7,9,7]\n输出： 1\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 10000</code></li>\n<li><code>1 &lt;= nums[i] &lt; 2^31</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>每一位贡献加起来 %3，为 1 则为这个数的 1。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">singleNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span> <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            num <span class=\"token operator\">=</span> num <span class=\"token operator\">>></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> ans</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "数组",
                "位运算"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day21/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day21/",
            "title": "剑指offer day21 位运算（简单）",
            "date_published": "2022-04-19T15:50:00.000Z",
            "content_html": "<p>day21 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItamluLXpoaS16aG9uZy0xZGUtZ2Utc2h1LWxjb2Yv\">剑指 Offer 15. 二进制中 1 的个数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYnUteW9uZy1qaWEtamlhbi1jaGVuZy1jaHUtenVvLWppYS1mYS1sY29mLw==\">剑指 Offer 65. 不用加减乘除做加法</span></p>\n<p>知识点：位运算、数学，难度为简单、简单</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItamluLXpoaS16aG9uZy0xZGUtZ2Utc2h1LWxjb2Yv\">剑指 Offer 15. 二进制中 1 的个数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpdC1tYW5pcHVsYXRpb24=\">位运算</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYnUteW9uZy1qaWEtamlhbi1jaGVuZy1jaHUtenVvLWppYS1mYS1sY29mLw==\">剑指 Offer 65. 不用加减乘除做加法</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpdC1tYW5pcHVsYXRpb24=\">位运算</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>简单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-15-二进制中1的个数\"><a class=\"anchor\" href=\"#剑指-offer-15-二进制中1的个数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItamluLXpoaS16aG9uZy0xZGUtZ2Utc2h1LWxjb2Yv\">剑指 Offer 15. 二进制中 1 的个数</span></h1>\n<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 <span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYW1taW5nX3dlaWdodA==\">汉明重量</span>).）。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\n<li>在 Java 中，编译器使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkElOEMlRTglQkYlOUIlRTUlODglQjYlRTglQTElQTUlRTclQTAlODEvNTI5NTI4NA==\">二进制补码</span> 记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数  <code>-3</code> 。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： n = 11 (控制台输入 00000000000000000000000000001011)\n输出： 3\n解释： 输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： n = 128 (控制台输入 00000000000000000000000010000000)\n输出： 1\n解释： 输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入： n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）\n输出： 31\n解释： 输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>输入必须是长度为  <code>32</code>  的 <strong>二进制串</strong> 。</li>\n</ul>\n<p>注意：本题与主站 191 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLTEtYml0cy8=\">https://leetcode-cn.com/problems/number-of-1-bits/</span></p>\n<h2 id=\"思路与代码\"><a class=\"anchor\" href=\"#思路与代码\">#</a> 思路与代码</h2>\n<p>之前曾经接触过一个神奇的运算： <code>x = x &amp; x-1</code>  可以将 x 的最后一位  <code>1</code>  变为  <code>0</code></p>\n<p>这里就可以用这个性质。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n - a positive integer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hammingWeight</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        n <span class=\"token operator\">&amp;=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">++</span>res</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-65-不用加减乘除做加法\"><a class=\"anchor\" href=\"#剑指-offer-65-不用加减乘除做加法\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYnUteW9uZy1qaWEtamlhbi1jaGVuZy1jaHUtenVvLWppYS1mYS1sY29mLw==\">剑指 Offer 65. 不用加减乘除做加法</span></h1>\n<p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入: a = 1, b = 1\n输出: 2\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>a</code> ,  <code>b</code>  均可能是负数或 0</li>\n<li>结果不会溢出 32 位整数</li>\n</ul>\n<h2 id=\"思路与代码-2\"><a class=\"anchor\" href=\"#思路与代码-2\">#</a> 思路与代码</h2>\n<p>相加可以简单的用异或，但要注意进位，而进位  <code>c</code>  也没法直接加，所以需要循环，每次将  <code>a^b</code>  即 <strong>ab 的无进位和</strong> 赋给 a，将 <strong>进位和 <code>c</code> </strong> 赋给 b，直到 b 也就是进位和为 0，就可直接返回 a。</p>\n<ul>\n<li>进位和的计算就可以用 <code>(a&amp;b) &lt;&lt; 1</code> ，只有两位都为 1 才进位</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span>  <span class=\"token comment\">// 进位和</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        a <span class=\"token operator\">=</span> a<span class=\"token operator\">^</span>b</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        b <span class=\"token operator\">=</span> c</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "位运算",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day20/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day20/",
            "title": "剑指offer day20 分治算法（中等）",
            "date_published": "2022-04-18T15:30:00.000Z",
            "content_html": "<p>day20 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhvbmctamlhbi1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 07. 重建二叉树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXpoaS1kZS16aGVuZy1zaHUtY2ktZmFuZy1sY29mLw==\">剑指 Offer 16. 数值的整数次方</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLWhvdS14dS1iaWFuLWxpLXh1LWxpZS1sY29mLw==\">剑指 Offer 33. 二叉搜索树的后序遍历序列</span></p>\n<p>知识点：树、递归、分治，难度为中等、中等、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhvbmctamlhbi1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 07. 重建二叉树</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2hhc2gtdGFibGU=\">哈希表</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RpdmlkZS1hbmQtY29ucXVlcg==\">分治</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXpoaS1kZS16aGVuZy1zaHUtY2ktZmFuZy1sY29mLw==\">剑指 Offer 16. 数值的整数次方</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLWhvdS14dS1iaWFuLWxpLXh1LWxpZS1sY29mLw==\">剑指 Offer 33. 二叉搜索树的后序遍历序列</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0YWNr\">栈</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS1zZWFyY2gtdHJlZQ==\">二叉搜索树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-07-重建二叉树\"><a class=\"anchor\" href=\"#剑指-offer-07-重建二叉树\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhvbmctamlhbi1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 07. 重建二叉树</span></h1>\n<p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</p>\n<p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>\n<p><strong>示例 1:</strong></p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fa8a56cae82482aa01716055939f2e5~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n<pre><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>Input: preorder = [-1], inorder = [-1]\nOutput: [-1]\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>0 &lt;= 节点个数 &lt;= 5000</code></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p><a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day9/#105\">冲刺春招 - 精选笔面试 66 题大通关 day9</a> 同款题目<br />\n因为无重复，所以找出根节点在中序遍历中的下标，算出左右子节点数量，切分递归构建即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; preorder</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number[]&#125; inorder</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;TreeNode&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">buildTree</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">preorder<span class=\"token punctuation\">,</span> inorder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> inorder<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> root</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-16-数值的整数次方\"><a class=\"anchor\" href=\"#剑指-offer-16-数值的整数次方\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXpoaS1kZS16aGVuZy1zaHUtY2ktZmFuZy1sY29mLw==\">剑指 Offer 16. 数值的整数次方</span></h1>\n<p>实现 <a href=\"https://www.cplusplus.com/reference/valarray/pow/\">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： x = 2.00000, n = 10\n输出： 1024.00000\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： x = 2.10000, n = 3\n输出： 9.26100\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入： x = 2.00000, n = -2\n输出： 0.25000\n解释： 2-2 = 1/22 = 1/4 = 0.25\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n<li><code>-2^31 &lt;= n &lt;= 2^31-1</code></li>\n<li><code>-10^4 &lt;= xn &lt;= 10^4</code></li>\n</ul>\n<p>注意：本题与主站 50 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcG93eC1uLw==\">https://leetcode-cn.com/problems/powx-n/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>快速幂板子题，就是稍微注意下，踩了个坑，JS 中右移符号 <code>&gt;&gt;</code>  是算术移位，需要考虑符号位，而这里应该用 <code>&gt;&gt;&gt;</code>  逻辑右移，详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXpoaS1kZS16aGVuZy1zaHUtY2ktZmFuZy1sY29mL3NvbHV0aW9uL2phdmFzY3JpcHRqaWUtanVlLXdlbi10aS15aS13ZWkteXVuLXN1YW4taDR1OS8=\"> javascript 解决问题移位运算的坑</span></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myPow</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 快速幂嘛。处理下 n 为负数的情况</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            x <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            n <span class=\"token operator\">>>>=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-33-二叉搜索树的后序遍历序列\"><a class=\"anchor\" href=\"#剑指-offer-33-二叉搜索树的后序遍历序列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLWhvdS14dS1iaWFuLWxpLXh1LWxpZS1sY29mLw==\">剑指 Offer 33. 二叉搜索树的后序遍历序列</span></h1>\n<p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回  <code>true</code> ，否则返回  <code>false</code> 。假设输入的数组的任意两个数字都互不相同。</p>\n<p>参考以下这颗二叉搜索树：</p>\n<pre><code>     5\n    / \\\n   2   6\n  / \\\n 1   3\n</code></pre>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: [1,6,3,2,5]\n输出: false\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入: [1,3,2,6,5]\n输出: true\n</code></pre>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>数组长度 &lt;= 1000</code></li>\n</ol>\n<h2 id=\"思路及代码-3\"><a class=\"anchor\" href=\"#思路及代码-3\">#</a> 思路及代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; postorder</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">verifyPostorder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">postorder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 小大中间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span> r</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> leftRT <span class=\"token operator\">=</span> l</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 小 找到第一个大的 实际左子树的根为 leftRT-1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>leftRT<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> root<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>leftRT  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">let</span> rightRT <span class=\"token operator\">=</span> leftRT</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 大 找到第一个小的 按理说会找到 root 的位置。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>rightRT<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> root<span class=\"token punctuation\">)</span> rightRT<span class=\"token operator\">++</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> rightRT <span class=\"token operator\">==</span> r <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> leftRT <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>leftRT<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 验证左右子树</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "树",
                "递归",
                "分治"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/163-yanxuan-review-2022-spring-frontend/",
            "url": "https://ysx.cosine.ren/163-yanxuan-review-2022-spring-frontend/",
            "title": "2022春暑期实习网易严选前端一二HR面凉经",
            "date_published": "2022-04-18T11:00:20.000Z",
            "content_html": "<h1 id=\"一面已过\"><a class=\"anchor\" href=\"#一面已过\">#</a> 一面（已过）</h1>\n<p>3.31 的一面，总共就 20 分钟左右，挺光速的，因为我项目里主要有 koa 的项目，所以 koa 问挺多的</p>\n<ul>\n<li>自我介绍</li>\n<li>介绍下 react</li>\n<li>说下 virtual-dom 和 diff 算法</li>\n<li>react 写的时候有遇到什么难点吗？</li>\n<li>koa 中间件模型说一下（说了些洋葱圈模型）</li>\n<li>场景：有一个 url，列表，底下很多 1000 多个 uri，点击事件怎么样绑定好？\n<ul>\n<li>没太懂，说了下事件委托绑定在 url 那儿</li>\n<li>想不起来用啥获取了，完事后查了下，event.target</li>\n</ul>\n</li>\n<li>一些项目相关的东西</li>\n<li>反问\n<ul>\n<li>业务 &amp; 技术栈：没啥好说，就 react 嘛</li>\n<li>流程？：三面，2 轮技术 + 1 轮 hr</li>\n</ul>\n</li>\n</ul>\n<p>面后第三天收到二面通知，二面也是半小时，清明假期后 4.6 面试。</p>\n<h1 id=\"二面已过\"><a class=\"anchor\" href=\"#二面已过\">#</a> 二面（已过）</h1>\n<p>4.6 清明节假期后二面，因为签到比较早面试官直接叫到我了。。。属于是刚翻开书准备复习就要考试了。第一个项目是后端所以问的都是后端的东西（瘫）</p>\n<ul>\n<li>除了 nodejs 还用过哪些其他框架\n<ul>\n<li>我说 Java 的 SpringBoot、Mybatis</li>\n</ul>\n</li>\n<li>Sequelize 怎么用的（扯了半天）</li>\n<li>用 Node 写和 Java 写的区别，带给你的比较深的感觉\n<ul>\n<li>感觉 Node 比较轻</li>\n</ul>\n</li>\n<li>性能上有实际用代码去比较过吗（没 qwq）</li>\n<li>在 Springboot 里面定义和 node 里面的差别，哪种方式更让你舒服</li>\n<li>后台用的 js 还是 ts（js，嘤嘤嘤）</li>\n<li>说一下数据库的表设计等，Sequelize 写操作和读操作都是怎么做的</li>\n<li>遇到过哪些多表联合查询的场景</li>\n<li>对接的时候有做过接口测试和文档等的吗\n<ul>\n<li>这个我熟 (bushi)，接口测试用例我写了好多，文档也写了老大一部分</li>\n</ul>\n</li>\n<li>服务器多实例场景怎么设计登录流程（懵）</li>\n<li>前端模块化和后端 Java 模块化的区别</li>\n<li>模块化原理</li>\n<li>最常用的 es6 特性有哪些\n<ul>\n<li>主要 async 和解构赋值，谈谈原理和实现</li>\n</ul>\n</li>\n<li>最近看的有趣的技术知识能跟我说一下吗</li>\n<li>实习大概啥时候能到岗</li>\n</ul>\n<p>4.11 收到 hr 面邮件，约在了 4.18，等 hr 面 ing…… 听说网易 hr 面经常挂人 qwq 害怕，许愿能过吧。</p>\n<h1 id=\"hr面\"><a class=\"anchor\" href=\"#hr面\">#</a> hr 面</h1>\n<p>4.18 下午 4 点，hr 面。<br />\n16 分钟，光速（可能是我语速太快了）小姐姐很温柔</p>\n<ul>\n<li>上学到现在印象最深最有成就感或者最有挑战的事情\n<ul>\n<li>百度前端训练营项目完完整整的做完了。</li>\n</ul>\n</li>\n<li>你这个项目中的角色是什么</li>\n<li>整个项目有多少人，做了多久</li>\n<li>这个项目的关键点是什么</li>\n<li>在做这个项目中协作的时候有遇到过什么困难吗</li>\n<li>给这个项目打几分\n<ul>\n<li>扣 1 分给接口规范</li>\n<li>再扣 1 给数据库的结构，8 分</li>\n</ul>\n</li>\n<li>这个项目能成功的客观因素和主观因素\n<ul>\n<li>项目同学都非常优秀，上手非常快</li>\n</ul>\n</li>\n<li>在这个项目中有什么学习和沉淀吗</li>\n<li>你自己认为你自己有什么短板或者不足需要在未来进行补齐的吗\n<ul>\n<li>有什么行动计划</li>\n</ul>\n</li>\n<li>你对实习地点怎么看\n<ul>\n<li>都可以！特想去杭州！（</li>\n</ul>\n</li>\n<li>到岗时间和实习时长\n<ul>\n<li>5 月初，3 个月以上</li>\n</ul>\n</li>\n<li>反问\n<ul>\n<li>公司的管理制度：前端是在一个大团队里面的，可能有不同的小组去支持不同的业务板块，有 leader 带。</li>\n<li>如果过了，入职前有什么需要我去学习的东西吗：\n<ul>\n<li>入职前按照正常流程，先按照正常流程了解网易严选、熟悉代码规范、了解业务、文档等。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>第二天来短信，挂了呢（果然呢）</p>\n",
            "tags": [
                "笔试面经",
                "面经",
                "前端",
                "面经"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day19/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day19/",
            "title": "剑指offer day19 搜索与回溯算法（中等）",
            "date_published": "2022-04-17T11:48:00.000Z",
            "content_html": "<p>day19 题目： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcWl1LTEybi1sY29mLw==\">剑指 Offer 64. 求 1+2+…+n</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLXp1aS1qaW4tZ29uZy1nb25nLXp1LXhpYW4tbGNvZi8=\">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS16dWktamluLWdvbmctZ29uZy16dS14aWFuLWxjb2Yv\">剑指 Offer 68 - II. 二叉树的最近公共祖先</span></p>\n<p>知识点：树、递归、dfs/bfs，难度为中等、简单、简单</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcWl1LTEybi1sY29mLw==\">剑指 Offer 64. 求 1+2+…+n</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpdC1tYW5pcHVsYXRpb24=\">位运算</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JyYWludGVhc2Vy\">脑筋急转弯</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLXp1aS1qaW4tZ29uZy1nb25nLXp1LXhpYW4tbGNvZi8=\">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RlcHRoLWZpcnN0LXNlYXJjaA==\">深度优先搜索</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS1zZWFyY2gtdHJlZQ==\">二叉搜索树</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS16dWktamluLWdvbmctZ29uZy16dS14aWFuLWxjb2Yv\">剑指 Offer 68 - II. 二叉树的最近公共祖先</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RlcHRoLWZpcnN0LXNlYXJjaA==\">深度优先搜索</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS10cmVl\">二叉树</span></td>\n<td>简单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-64-求12n\"><a class=\"anchor\" href=\"#剑指-offer-64-求12n\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcWl1LTEybi1sY29mLw==\">剑指 Offer 64. 求 1+2+…+n</span></h1>\n<p>求  <code>1+2+...+n</code>  ，要求不能使用乘除法、for、while、if、else、switch、case 等关键字及条件判断语句（A?B:C）。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: n = 3\n输出: 6\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入: n = 9\n输出: 45\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 10000</code></li>\n</ul>\n<h2 id=\"思路与代码\"><a class=\"anchor\" href=\"#思路与代码\">#</a> 思路与代码</h2>\n<p>看这题的 tag：脑筋急转弯就能发现不对劲……</p>\n<p>主要就是用短路运算符来代替条件判断</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sumNums</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+=</span> <span class=\"token function\">sumNums</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> n</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-68-i-二叉搜索树的最近公共祖先\"><a class=\"anchor\" href=\"#剑指-offer-68-i-二叉搜索树的最近公共祖先\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLXp1aS1qaW4tZ29uZy1nb25nLXp1LXhpYW4tbGNvZi8=\">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</span></h1>\n<p>给定一个二叉搜索树，找到该树中两个指定节点的最近公共祖先。<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUMlODAlRTglQkYlOTElRTUlODUlQUMlRTUlODUlQjElRTclQTUlOTYlRTUlODUlODgvODkxODgzND9mcj1hbGFkZGlu\">百度百科</span>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc7700522f0a4880ba8b5735e0d7fc7d~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。\n</code></pre>\n<p><strong>说明:</strong></p>\n<ul>\n<li>所有节点的值都是唯一的。</li>\n<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>\n</ul>\n<p>注意：本题与主站 235 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG93ZXN0LWNvbW1vbi1hbmNlc3Rvci1vZi1hLWJpbmFyeS1zZWFyY2gtdHJlZS8=\">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/</span></p>\n<h2 id=\"思路与代码-2\"><a class=\"anchor\" href=\"#思路与代码-2\">#</a> 思路与代码</h2>\n<p>根据之前<a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day17/#%E6%80%9D%E8%B7%AF-2\">冲刺春招 - 精选笔面试 66 题大通关 17</a> 的经验，思路一为先从一个节点往上走将沿途的 vis 置为 true，再从另一个结点往上走，遇到 vis 为 true 的就是最近共同祖先，返回。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;TreeNode&#125; root</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;TreeNode&#125; p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;TreeNode&#125; q</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @return &#123;TreeNode&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lowestCommonAncestor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> fa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rt<span class=\"token punctuation\">,</span> pre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rt <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fa<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> vis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">let</span> nowv <span class=\"token operator\">=</span> q</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        vis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            nowv <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    nowv <span class=\"token operator\">=</span> p</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> nowv</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            nowv <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>思路二则是利用二叉搜索树的性质，从根节点开始遍历，官方题解如下：</p>\n<ul>\n<li>若当前节点值大于  <code>p</code>  和  <code>q</code>  的值，说明  <code>p</code>  和  <code>q</code>  应该在当前节点的左子树，将当前节点移动到它的左子节点；</li>\n<li>若当前节点的值小于  <code>p</code>  和  <code>q</code>  的值，说明  <code>p</code>  和  <code>q</code>  应该在当前节点的右子树，将当前节点移动到它的右子节点；</li>\n<li>若等于当前节点的值不满足上述两条要求，那么说明当前节点就是「分岔点」。此时， <code>p</code>  和  <code>q</code>  要么在当前节点的不同的子树中，要么其中一个就是当前节点。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;TreeNode&#125; root</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;TreeNode&#125; p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;TreeNode&#125; q</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @return &#123;TreeNode&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lowestCommonAncestor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> q<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> root</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-68-ii-二叉树的最近公共祖先\"><a class=\"anchor\" href=\"#剑指-offer-68-ii-二叉树的最近公共祖先\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS16dWktamluLWdvbmctZ29uZy16dS14aWFuLWxjb2Yv\">剑指 Offer 68 - II. 二叉树的最近公共祖先</span></h1>\n<p>给定一个二叉树，找到该树中两个指定节点的最近公共祖先。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUMlODAlRTglQkYlOTElRTUlODUlQUMlRTUlODUlQjElRTclQTUlOTYlRTUlODUlODgvODkxODgzND9mcj1hbGFkZGlu\">百度百科</span>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed3ce8239e9e460aad44bd1fedadd2de~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出: 3\n解释: 节点 5 和节点 1 的最近公共祖先是节点 3。\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出: 5\n解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。\n</code></pre>\n<p><strong>说明:</strong></p>\n<ul>\n<li>所有节点的值都是唯一的。</li>\n<li>p、q 为不同节点且均存在于给定的二叉树中。</li>\n</ul>\n<p>注意：本题与主站 236 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG93ZXN0LWNvbW1vbi1hbmNlc3Rvci1vZi1hLWJpbmFyeS10cmVlLw==\">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/</span></p>\n<h2 id=\"思路与代码-3\"><a class=\"anchor\" href=\"#思路与代码-3\">#</a> 思路与代码</h2>\n<p>用上题的思路 1 就好了。</p>\n<p><code>fa</code>  存每个结点的父节点，从上向下遍历一次初始化 <code>fa</code> ，再从下往上初始化  <code>vis</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lowestCommonAncestor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> fa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rt<span class=\"token punctuation\">,</span> pre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rt <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        fa<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> vis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> nowv <span class=\"token operator\">=</span> q</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        vis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            nowv <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    nowv <span class=\"token operator\">=</span> p</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> nowv</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            nowv <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nowv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "树",
                "dfs/bfs",
                "递归"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day18/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day18/",
            "title": "剑指offer day18 搜索与回溯算法（中等）",
            "date_published": "2022-04-16T09:58:00.000Z",
            "content_html": "<p>day18 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS1zaGVuLWR1LWxjb2Yv\">剑指 Offer 55 - I. 二叉树的深度</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGluZy1oZW5nLWVyLWNoYS1zaHUtbGNvZi8=\">剑指 Offer 55 - II. 平衡二叉树</span></p>\n<p>知识点：树、dfs/bfs，难度为简单、简单</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS1zaGVuLWR1LWxjb2Yv\">剑指 Offer 55 - I. 二叉树的深度</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RlcHRoLWZpcnN0LXNlYXJjaA==\">深度优先搜索</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JyZWFkdGgtZmlyc3Qtc2VhcmNo\">广度优先搜索</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGluZy1oZW5nLWVyLWNoYS1zaHUtbGNvZi8=\">剑指 Offer 55 - II. 平衡二叉树</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RlcHRoLWZpcnN0LXNlYXJjaA==\">深度优先搜索</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS10cmVl\">二叉树</span></td>\n<td>简单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-55-i-二叉树的深度\"><a class=\"anchor\" href=\"#剑指-offer-55-i-二叉树的深度\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS1zaGVuLWR1LWxjb2Yv\">剑指 Offer 55 - I. 二叉树的深度</span></h1>\n<p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p>\n<p>例如：</p>\n<p>给定二叉树  <code>[3,9,20,null,null,15,7]</code> ，</p>\n<pre><code>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</code></pre>\n<p>返回它的最大深度 3 。</p>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 10000</code></li>\n</ol>\n<p>注意：本题与主站 104 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1kZXB0aC1vZi1iaW5hcnktdHJlZS8=\">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>递归，直接返回左右两边最大的深度 + 1</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;TreeNode&#125; root</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxDepth</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-55-ii-平衡二叉树\"><a class=\"anchor\" href=\"#剑指-offer-55-ii-平衡二叉树\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGluZy1oZW5nLWVyLWNoYS1zaHUtbGNvZi8=\">剑指 Offer 55 - II. 平衡二叉树</span></h1>\n<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过 1，那么它就是一棵平衡二叉树。</p>\n<p><strong>示例 1:</strong></p>\n<p>给定二叉树  <code>[3,9,20,null,null,15,7]</code></p>\n<pre><code>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</code></pre>\n<p>返回  <code>true</code>  。<br />\n<br />\n<strong>示例 2:</strong></p>\n<p>给定二叉树  <code>[1,2,2,3,3,null,null,4,4]</code></p>\n<pre><code>       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n</code></pre>\n<p>返回  <code>false</code>  。</p>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= 树的结点个数 &lt;= 10000</code></li>\n</ul>\n<p>注意：本题与主站 110 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFsYW5jZWQtYmluYXJ5LXRyZWUv\">https://leetcode-cn.com/problems/balanced-binary-tree/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>先判断当前结点的左右子树高度是否满足平衡二叉树要求，然后判断左右子树是否为平衡二叉树，两条件都满足才能为平衡二叉树</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;TreeNode&#125; root</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isBalanced</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">countHeight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">countHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">countHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">countHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">countHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "树",
                "dfs/bfs"
            ]
        }
    ]
}