{
    "version": "https://jsonfeed.org/version/1",
    "title": "余弦の博客",
    "subtitle": "WA的一声就哭了",
    "icon": "https://ysx.cosine.ren/images/favicon.ico",
    "description": "愿岁并谢，与友长兮",
    "home_page_url": "https://ysx.cosine.ren",
    "items": [
        {
            "id": "https://ysx.cosine.ren/secure-basics-4/",
            "url": "https://ysx.cosine.ren/secure-basics-4/",
            "title": "信息安全概论复习四 Chapte8、9、10",
            "date_published": "2022-05-24T19:02:38.000Z",
            "content_html": "<p>此次复习：Chapter-8: 无线局域网安全（重点 WAPI）</p>\n<p>Chapter-9: 网络安全技术（重点网络扫描、防火墙、IDS 和蜜罐的基本原理）</p>\n<p>Chapter-10: 信息隐藏与数字水印技术（重点数字水印）</p>\n<p><span id=\"more\"></span></p>\n<details class=\"info\"><summary>内容概述</summary><div>\n<p>Chapter-8: 无线局域网安全</p>\n<p>本章介绍无线局域网 (WLAN）面临的安全威胁和安全需求，实现 WLAN 安全保护的机制。</p>\n<ul>\n<li>WLAN 及其安全需求</li>\n<li>有线等同保密协议 WEP</li>\n<li>WLAN 鉴别与保密基础结构 WAPI</li>\n</ul>\n<p>Chapter-9: 网络安全技术</p>\n<p>本章主要学习网络环境下安全防范技术</p>\n<ul>\n<li>网络安全包括哪些常用技术和手段</li>\n<li>网络扫描技术作用和实施</li>\n<li>网络防火墙的作用和工作机理</li>\n<li>入侵检测：IDS 和蜜罐的基本原理</li>\n</ul>\n<p>Chapter-10: 信息隐藏与数字水印技术</p>\n<p>本章主要讲授信息隐藏技术和数字水印技术，介绍信息隐藏和数字水印的相关概念、应用、实现方法。</p>\n<ul>\n<li>信息隐藏的工作原理及实现方法</li>\n<li>数字水印的应用及实现方法</li>\n</ul>\n</div></details>\n<h1 id=\"无线局域网安全\"><a class=\"anchor\" href=\"#无线局域网安全\">#</a> 无线局域网安全</h1>\n<h2 id=\"wlan及其安全需求\"><a class=\"anchor\" href=\"#wlan及其安全需求\">#</a> WLAN 及其安全需求</h2>\n<p>WLAN = Wireless Local Area Network</p>\n<ul>\n<li>WLAN 的基本特点\n<ul>\n<li>采用射频无线电信号传输，通信链路具有 <strong>开放性</strong></li>\n<li>容易遭受窃听和攻击，网络安全问题突出。</li>\n</ul>\n</li>\n<li>WLAN 技术规范\n<ul>\n<li>IEEE802.11 系列标准：物理层、数据链路层\n<ul>\n<li>IEEE802.11 中定义了 WEP (Wired Equivalent Privacy)</li>\n</ul>\n</li>\n<li>IEEE802.11i：WLAN 安全保护规范，于 2004 年发布</li>\n</ul>\n</li>\n<li>WLAN 的工作模式\n<ul>\n<li><strong>自组织模式</strong> (Ad Hoc)：无线网络终端 (STA) <strong>点对点通信</strong>，自组织构建无线通信网络</li>\n<li><strong>基础设施模式</strong>：无线网络终端通过访问点 AP (Access Point) 相互通信，并实现与有线网络连接通信</li>\n</ul>\n</li>\n<li>WLAN 的安全问题\n<ul>\n<li><strong>接入控制</strong>：只有<strong>合法实体</strong>才能访问 WLAN 及相关资源</li>\n<li><strong>链路保密通信</strong>：无线链路通信应该确保数据的<strong>保密性</strong>、<strong>完整性</strong>及数据源的<strong>可认证性</strong></li>\n</ul>\n</li>\n<li>WLAN 的安全机制\n<ul>\n<li>实体认证、链路加密、完整性保护、数据源认证……</li>\n</ul>\n</li>\n<li>WLAN 安全保护方法分类\n<ul>\n<li>采用<strong>非密码技术</strong>的<strong>接入控制</strong>机制</li>\n<li>采用<strong>基于密码技术的安全机制</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"非密码技术的接入控制机制举例\"><a class=\"anchor\" href=\"#非密码技术的接入控制机制举例\">#</a> 非密码技术的接入控制机制举例</h3>\n<ul>\n<li>服务集识别码 SSIb (Service Set Identifier) 认证\n<ul>\n<li>每个 AP 设有一个 SSID，可以把 SSID 作为一群 WLAN 子系统设备所<strong>共享</strong>的<strong>网域识别码</strong></li>\n</ul>\n</li>\n<li>地址过滤机制\n<ul>\n<li>如采用 MAC 地址过滤机制，配置 MAC 地址访问列表 ACL (Access Control List)</li>\n</ul>\n</li>\n<li>定向天线或控制传输功率</li>\n</ul>\n<p>而基于共享密钥实现 WLAN 安全就要靠 WEP 了 👇</p>\n<h2 id=\"有线等同保密协议-wep\"><a class=\"anchor\" href=\"#有线等同保密协议-wep\">#</a> 有线等同保密协议 WEP</h2>\n<h3 id=\"wep-概述\"><a class=\"anchor\" href=\"#wep-概述\">#</a> WEP 概述</h3>\n<p>有线等同保密协议 WEP: Wired Equivalent Privacy</p>\n<ul>\n<li>企图提供<strong>与有线网等同</strong>的数据保密性</li>\n<li>采用<strong>流密码算法  <code>RC4</code> </strong>，基于共享密钥实现实体认证和数据保密通信</li>\n</ul>\n<p>WEP 定义了两种认证机制</p>\n<ul>\n<li><strong>开放系统认证</strong> (Open System Authentication)：实际上为<strong>空认证</strong></li>\n<li><strong>共享密钥认证</strong> (Shared Key Authentication)：实现<strong>基于共享密钥</strong>的质询 —— 响应握手协议。</li>\n</ul>\n<p>WEP 的安全性</p>\n<ul>\n<li><code>RC4</code>  密码作为一种流密码，其安全程度 取决于 <strong>密钥流的随机程度</strong>\n<ul>\n<li>流密码密钥流的随机程度并不高，在安全上存在一定风险</li>\n</ul>\n</li>\n<li>802.11 的帧格式也容易泄露部分密钥特定字节的信息。</li>\n</ul>\n<p>RSN 跳过...</p>\n<h2 id=\"wlan-鉴别与-wapi-保密基础结构\"><a class=\"anchor\" href=\"#wlan-鉴别与-wapi-保密基础结构\">#</a> WLAN 鉴别与 WAPI 保密基础结构</h2>\n<p>GB15629.11 中定义了 WLAN 鉴别与保密基础结构 WAPI，包括两个部分：</p>\n<ul>\n<li>WLAN <strong>鉴别</strong>基础结构  <code>WAI</code>  (WLAN Authenticatiot Infrastructure)</li>\n<li>WLAN <strong>保密</strong>基础结构  <code>WPI</code>  (WLAN Privacy Infrastructure)</li>\n</ul>\n<p>WAPI 使用<strong>椭圆曲线 ECC 公钥密码</strong>算法，以及国家密码办指定的商用对称密码算法，分别实现对 WLAN 实体的鉴别和传输数据加密保护。</p>\n<h3 id=\"wai\"><a class=\"anchor\" href=\"#wai\">#</a> WAI</h3>\n<p>WAI 采用公钥密码体制，重新定义了数字证书结构实现实体身份与公钥的绑定，实现实体间认证和密钥协商，且证书格式与 X.509 不兼容。</p>\n<h1 id=\"网络安全技术\"><a class=\"anchor\" href=\"#网络安全技术\">#</a> 网络安全技术</h1>\n<h2 id=\"网络安全包括哪些常用技术和手段\"><a class=\"anchor\" href=\"#网络安全包括哪些常用技术和手段\">#</a> 网络安全包括哪些常用技术和手段</h2>\n<p>由于网络的存在，攻击者更容易通过网络非法入侵他人网络系统、计算机系统，非法访问网络上的资源，非法窃取终端系统中的数据。</p>\n<p>内部网络、外部网络与安全边界</p>\n<ul>\n<li>网络通常分为<strong>内部网络</strong>和<strong>外部网络</strong>（也称公共网络，如 Internet）</li>\n<li>内外网络之间的连接设备（路由器）成为 <strong>安全边界</strong></li>\n<li>对安全边界的监控是网络安全的重要内容</li>\n</ul>\n<p>构建网络安全防御体系，除了必要的人、制度、机制、管理等方面保障，还要依赖于各种网络安全技术</p>\n<ul>\n<li><strong>扫描技术</strong>：发现<strong>内部网络</strong>安全薄弱环节，进行完善保护</li>\n<li><strong>防火墙技术</strong>：在<strong>内部与外部网络衔接</strong>处，阻止外部对内部网络的访问，限制内部对外部网络的访问等</li>\n<li><strong>入侵检测系统</strong>：发现非正常的<strong>外部对内部网络的入侵</strong>行为，报警并阻止入侵行为和影响的进一步扩大</li>\n<li><strong>隔离网闸技术</strong>：在<strong>物理隔离</strong>的两个网络之间进行安全数据交换</li>\n</ul>\n<h2 id=\"网络扫描技术作用和实施\"><a class=\"anchor\" href=\"#网络扫描技术作用和实施\">#</a> 网络扫描技术作用和实施</h2>\n<p>如何探测网络拓扑结构及网络中系统存在的安全弱点？这就需要网络扫描技术。</p>\n<p>网络扫描技术目的是发现网络中的设备及系统是否存在安全漏洞。典型的网络扫描包括<strong>主机扫描</strong>和<strong>端口扫描</strong>。</p>\n<p>主机扫描</p>\n<ul>\n<li>目的是确定在目标网络上的主机<strong>是否可达</strong></li>\n<li>常用的扫描手段如 <code>ICMP Echo</code>  扫描、 <code>Broadcast ICMP</code>  扫描等</li>\n<li>防火墙和网络过滤设备常常导致传统的探测手段变得无效\n<ul>\n<li>为了突破这种限制，攻击者通常利用  <code>ICMP</code>  协议提供的<strong>错误消息机制</strong>，例如发送异常的 IP 包头、在 IP 头中设置无效的字段值、错误的数据分片，以及通过超长包探测内部路由器和反向映射探测等</li>\n</ul>\n</li>\n</ul>\n<p>端口扫描</p>\n<ul>\n<li>目的是发现目标主机的<strong>开放端口</strong>，包括网络协议和各种应用监听的端口</li>\n<li>端口扫描技术包括<strong>开放扫描</strong>、<strong>隐蔽扫描</strong>和<strong>半开放扫描</strong>等。</li>\n<li>典型的端口扫描方法（看看就好）\n<ul>\n<li>TCP Connect 扫描和 TCP 反向 ident 扫描</li>\n<li>TCP Xmas 和 TCP Null 扫描是 FIN 扫描的两个变种。TCP FTP 代理扫描</li>\n<li>分段扫描，将数据包分为两个较小的 IP 段</li>\n<li>TCP SYN 扫描和 TCP 间接扫描，两种半开放扫描</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"网络防火墙的作用和工作机理\"><a class=\"anchor\" href=\"#网络防火墙的作用和工作机理\">#</a> 网络防火墙的作用和工作机理</h2>\n<p>如何隔离内部网络和外部网络？这就需要网络防火墙！</p>\n<p>网络防火墙是建立在内部网络 (Intranet) 与外部网络 (Extranet) 之间的<strong>安全网关</strong> (Gateway)。</p>\n<h3 id=\"防火墙的概念-功能\"><a class=\"anchor\" href=\"#防火墙的概念-功能\">#</a> 防火墙的概念、功能</h3>\n<ul>\n<li>内部网络与外部网络之间<strong>所有</strong>的网络数据流<strong>都必须经过</strong>防火墙</li>\n<li>只有<strong>符合安全策略</strong>的数据流<strong>才能通过</strong>防火墙</li>\n<li>防火墙自身应具有非常强的抗攻击免疫力</li>\n</ul>\n<p>防火墙的功能</p>\n<ul>\n<li>防火墙是网络安全的屏障</li>\n<li>防火墙可以强化网络安全策略</li>\n<li>对网络接入和访问进行监控审计</li>\n<li>防止内部信息的外泄</li>\n<li>集成其它网络应用功能，如 <code>VPN</code> 、 <code>NAT</code>  等</li>\n</ul>\n<h3 id=\"防火墙的工作原理\"><a class=\"anchor\" href=\"#防火墙的工作原理\">#</a> 防火墙的工作原理</h3>\n<h4 id=\"包过滤技术\"><a class=\"anchor\" href=\"#包过滤技术\">#</a> 包过滤技术</h4>\n<ul>\n<li>包过滤防火墙 工作在 OSI 体系结构的<strong>网络层</strong></li>\n<li>对通过防火墙的每个 IP 数据包的头部、协议、地址、端口、类型等信息进行检查，与预先设定好的防火墙过滤规则进行匹配</li>\n<li>一旦发现某个数据包的某个或多个部分与过滤规则匹配并且条件为 <strong>阻止</strong> 的时候，这个数据包就会被<strong>丢弃</strong></li>\n<li>从 “静态包过滤” 到 “动态包过滤”</li>\n<li>包过滤防火墙通常要对经过的数据包<strong>检查下列字段</strong>：\n<ul>\n<li>源 IP 地址和目的 IP 地址</li>\n<li>TCP、UDP 和 ICMP 等 <strong>协议类型</strong></li>\n<li>源 TCP 端口和目的 <strong>TCP 端口</strong></li>\n<li>源 UDP 端口和目的 <strong>UDP 端口</strong></li>\n<li>ICMP <strong>消息类型</strong></li>\n<li>输出分组的<strong>网络接口</strong></li>\n</ul>\n</li>\n<li>包过滤规则的<strong>匹配结果</strong>分为三种情况：\n<ul>\n<li>如果一个分组与一个<strong>拒绝转发</strong>的规则相匹配，则该分组将被<strong>禁止通过</strong></li>\n<li>如果一个分组与一个<strong>允许转发</strong>的规则相匹配，则该分组将被<strong>允许通过</strong></li>\n<li>如果一个分组没有与任何的规则相匹配，则该分组将被禁止通过</li>\n</ul>\n<blockquote>\n<p>这里遵循了 <strong>“一切未被允许的皆禁止”</strong> 的原则</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"应用代理技术\"><a class=\"anchor\" href=\"#应用代理技术\">#</a> 应用代理技术</h4>\n<ul>\n<li>具有应用协议分析 (Application Profocol AnaysIs) 能力的防火墙</li>\n<li>“应用协议分析” 技术工作在 OSI 模型的最高层 —— 应用层，在这一层防火墙能看到应用数据最终形式，从而可以实现更高级、更全面的数据检测</li>\n<li>采取<strong>代理机制</strong>工作，内外部网络之间的通信都要<strong>先经过代理服务器审核</strong>，<strong>不能直接连接会话</strong>，这样就可以避免攻击者使用 “数据驱动” 网络攻击</li>\n<li>代理机制使防火墙的性能受到一定的限制</li>\n</ul>\n<h4 id=\"状态监视技术\"><a class=\"anchor\" href=\"#状态监视技术\">#</a> 状态监视技术</h4>\n<p>状态监视技术（Stateful Inspection）</p>\n<ul>\n<li>在<strong>动态包过滤技术基础上</strong>发展而来的防火墙技术</li>\n<li>能对网络通信各个层次实施监测，并根据各种过滤规则进行决策</li>\n<li>状态监视技术在支持对每个数据包的头部、协议、地址、端口类型等信息进行分析的基础上，进一步发展了 <strong>“会话过滤”</strong> (Session Filtering）功能</li>\n<li>在每个连接建立时，防火墙会为该连接构造一个会话状态，包含了该连接数据包的所有信息</li>\n<li>之后基于连接状态信息对每个数据包的内容进行分析和监视</li>\n<li>状态监视技术结合了包过滤技术和应用代理技术，实现上更复杂，也会<strong>占用更多资源</strong></li>\n</ul>\n<h2 id=\"入侵检测ids和蜜罐的基本原理\"><a class=\"anchor\" href=\"#入侵检测ids和蜜罐的基本原理\">#</a> 入侵检测：IDS 和蜜罐的基本原理</h2>\n<p>如何检测非法入侵网络行为？IDS!</p>\n<ul>\n<li><strong>入侵检测</strong>：通过<strong>收集和分析</strong>计算机网络或系统中 <strong>若干关键点</strong> 的信息，检查网络或系统中是否存在<strong>违反安全策略的行为</strong>和<strong>被攻击的迹象</strong></li>\n<li>实现这一功能的软件与硬件组合即构成 <strong>入侵检测系统  <code>IDS</code> </strong> (Intrusion Detection System)</li>\n<li>分为 IDS 与 IPS (Intrusion Prevention System)</li>\n</ul>\n<p>入侵检测系统分类如下：</p>\n<ul>\n<li><strong>主机型</strong> IDS ：安装在<strong>服务器或 PC 机</strong>上的软件，监测到达主机的网络信息流</li>\n<li><strong>网络型</strong> IDS：一般配置在<strong>网络入口</strong>处（路由器) 或网络核心交换处（核心交换路由器）通过<strong>旁路技术</strong>监测网络上的信息流</li>\n</ul>\n<h3 id=\"ids-的主要功能与组成\"><a class=\"anchor\" href=\"#ids-的主要功能与组成\">#</a> IDS 的主要功能与组成</h3>\n<p>入侵检测系统的主要功能如下：</p>\n<ul>\n<li>监测、记录并<strong>分析</strong>用户和系统的<strong>活动</strong></li>\n<li><strong>核查</strong>系统配置和漏洞</li>\n<li><strong>评估</strong>系统关键资源和数据文件的<strong>完整性</strong></li>\n<li><strong>识别</strong>已知的攻击行为</li>\n<li><strong>统计分析</strong>异常行为</li>\n<li><strong>管理</strong>操作系统<strong>日志</strong>，识别违反安全策略的用户活动</li>\n</ul>\n<p>IDS 需要分析的数据称为<strong>事件</strong> (Event)，它可以是网络中的数据包，也可以是从系统日志等其它途径得到的信息。</p>\n<p>IDS 一般包括以下组件</p>\n<ul>\n<li>事件产生器 (Event generators)</li>\n<li>事件分析器 (Event analyzers)</li>\n<li>响应单元 (Response units)</li>\n<li>事件数据库 (Event databases)</li>\n</ul>\n<h3 id=\"网络-ids-与主机-ids-基本原理\"><a class=\"anchor\" href=\"#网络-ids-与主机-ids-基本原理\">#</a> 网络 IDS 与主机 IDS 基本原理</h3>\n<p>网络 IDS 是网络上的一个监听设备，通过<strong>监听网络上传递的报文</strong>，按照协议对报文进行分析，并<strong>报告网络中可能存在的入侵</strong>或非法使用者信息，还能对入侵行为自动地反击</p>\n<p>网络 IDS 的工作原理：按<strong>事件分析方法</strong>分类</p>\n<ul>\n<li>基于<strong>知识</strong>的数据模式判断方法：\n<ul>\n<li>分析、建立网络中非法使用者 (入侵者) 的工作方法 —— 数据模型</li>\n<li>在实时检测网络流量时，将网络中读取的数据与数据模型比对，匹配成功则报告事件。</li>\n</ul>\n</li>\n<li>基于<strong>行为</strong>的行为模式判断方法\n<ul>\n<li><strong>统计行为判断</strong>：根据上面模式匹配的事件，在进行事后统计分析时，<strong>根据已知非法行为的规则判断出非法行为</strong>。</li>\n<li><strong>异常行为判断</strong>：根据平时统计的各种信息，得出正常网络行为准则，当遇到<strong>违背这种准则</strong>的事件发生时，<strong>报告非法</strong>行为事件</li>\n</ul>\n</li>\n</ul>\n<p>主机 IDS 的基本原理：<strong>以主机系统日志、应用程序日志等作为数据源</strong>，也可以包括其他资源（如网络、文件、进程)，从所在的主机上收集信息并进行分析，通过查询、监听当前系统的各种资源的使用、运行状态，发现系统资源被非法使用或修改的事件，并进行上报和处理。</p>\n<h3 id=\"蜜罐技术\"><a class=\"anchor\" href=\"#蜜罐技术\">#</a> 蜜罐技术</h3>\n<p>如何更有效地检测非法入侵网络的行为？通过蜜罐技术</p>\n<p>蜜罐 (Honeypot) 技术顾名思义，可以看成是一种<strong>诱导技术</strong>，目的是发现恶意攻击和入侵。</p>\n<p>通过设置一个 “希望被探测攻击甚至攻陷” 的系统，模拟正常的计算机系统或网络环境，<strong>引诱</strong>攻击者<strong>入侵</strong>蜜罐系统，从而发现甚至定位入侵者，发现攻击模式、手段和方法，进而发现配置系统的缺陷和漏洞，以便完善安全配置管理消除安全隐患。</p>\n<p>蜜罐可以分为高交互蜜罐和低交互蜜罐<br />\n根据系统载体不同可以分类为物理蜜罐和虚拟蜜罐</p>\n<h4 id=\"高交互蜜罐-high-interaction-honeypots\"><a class=\"anchor\" href=\"#高交互蜜罐-high-interaction-honeypots\">#</a> 高交互蜜罐 (High-interaction honeypots)</h4>\n<p>一个高交互蜜罐是一个<strong>常规的计算机系统</strong>，如使用一台标准计算机、路由器等</p>\n<ul>\n<li>高交互蜜罐实际上是一个配置了真实操作系统和服务的系统为攻击者提供一个可以交互的真实系统</li>\n<li>这一系统在网络中没有常规任务，也没有固定的活动用户</li>\n<li>系统上<strong>只运行正常守护进程</strong>或服务，不应该有任何不正常的进程，也<strong>不产生任何网络流量</strong></li>\n</ul>\n<p>高交互蜜罐可以完全被攻陷，它们运行真实操作系统，可能带有所有已知和未知的安全漏洞，攻击者与真实的系统和真实的服务交互，使得我们能够捕获<strong>大量的威胁信息</strong>。</p>\n<p>当攻击者获得对蜜罐非授权访问时，可以捕捉他们对漏洞的利用，监视他们的操作，找到他们的工具，搞清他们的动机。</p>\n<p>即使攻击者使用了我们尚不知道的未知漏洞，通过分析其入侵过程和行为，可以发现其使用的方法和手段，即所谓发现 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTlCJUI2JUU2JTk3JUE1JUU2JTk0JUJCJUU1JTg3JUJC\">“零日攻击”</span>。</p>\n<h4 id=\"低交互蜜罐low-interaction-honeypots\"><a class=\"anchor\" href=\"#低交互蜜罐low-interaction-honeypots\">#</a> 低交互蜜罐 (Low-interaction honeypots)</h4>\n<p>低交互蜜罐则是使用特定软件工具模拟操作系统、网络堆栈或<br />\n某些特殊应用程序的一部分功能，例如具有网络堆栈、提供 TCP 连接、提供 HTTP 模拟服务等。</p>\n<ul>\n<li>低交互蜜罐允许攻击者与目标系统有限交互，允许管理员了解关于攻击的主要的定量信息</li>\n<li>优点是简单、易安装和易维护，只需要安装和配置一个工具软件即可</li>\n<li>典型的低交互蜜罐工具软件，有 <code>Tiny HoneypotHoneyd</code> 、 <code>Nepentbes</code>  等，以及用于 <code>Web</code>  欺骗的 Google 入侵蜜罐 <code>GHH</code> (Google Hack Honeypot) 、 <code>PHP.HoP</code>  等</li>\n<li>由于低交互蜜罐只为攻击者提供一个模拟交互系统，这系统不会完全被攻陷，因此，低交互蜜罐构造了一个可控环境，风险有限。</li>\n<li><strong>因为蜜罐没有生产价值，任何连接蜜罐的尝试都被认为是可疑的</strong></li>\n<li></li>\n</ul>\n<h4 id=\"物理蜜罐和虚拟蜜罐\"><a class=\"anchor\" href=\"#物理蜜罐和虚拟蜜罐\">#</a> 物理蜜罐和虚拟蜜罐</h4>\n<p>物理蜜罐意味着蜜罐运行在一个物理计算机上</p>\n<ul>\n<li>物理蜜罐 通常<strong>暗指高交互</strong>，允许系统被完全攻陷</li>\n<li>物理蜜罐安装和维护成本高，为每个空闲 IP 地址（空闲即被用于监听入侵）部署一个物理蜜罐是不切实际的</li>\n</ul>\n<p>虚拟蜜罐是在一台物理计算机上部署多个虚拟机作为蜜罐</p>\n<ul>\n<li>可以是低交互蜜罐也可以是高交互蜜罐</li>\n<li>虚拟蜜罐配置资源少、成本低，易于维护</li>\n<li>通常使用如  <code>VMware</code> 、 <code>Virtual PC</code>  虚拟机软件。</li>\n</ul>\n<h1 id=\"信息隐藏与数字水印技术\"><a class=\"anchor\" href=\"#信息隐藏与数字水印技术\">#</a> 信息隐藏与数字水印技术</h1>\n<h2 id=\"信息隐藏的工作原理及实现方法\"><a class=\"anchor\" href=\"#信息隐藏的工作原理及实现方法\">#</a> 信息隐藏的工作原理及实现方法</h2>\n<p>密码技术本质上是一种数据变换，将数据从一种编码变换成另一种编码，而且变换过程受密钥控制。</p>\n<p>信息隐藏技术</p>\n<ul>\n<li><strong>利用</strong>特定载体中具有随机特性的<strong>冗余部分</strong>，将有特别意义的或重要的信息嵌入其中掩饰其存在</li>\n<li>嵌入的秘密信息称为<strong>隐藏信息</strong>，嵌入秘密信息后的载体称<strong>隐藏载体</strong></li>\n<li>信息隐藏与 “隐写术 (Steganography)”</li>\n</ul>\n<h3 id=\"信息隐藏的基本特征\"><a class=\"anchor\" href=\"#信息隐藏的基本特征\">#</a> 信息隐藏的基本特征</h3>\n<ul>\n<li><strong>隐蔽性</strong>：也称<strong>透明性</strong>或<strong>不可见性</strong>，在特定载体中嵌入秘密信息后在不引起所嵌入信息质量下降的前提下，<strong>不显著改变</strong>隐藏载体的<strong>外部特征</strong></li>\n<li><strong>不可检测性</strong>：嵌入秘密信息后载体与原始载体具有<strong>一致</strong>的特性</li>\n<li><strong>鲁棒性</strong>：不因隐藏载体 (如图像) 的某种改动而导致隐藏信息丢失。\n<ul>\n<li>所谓 “改动” 包括传输过程对载体进行的一般信号处理（滤波、增强、重采样、有损压缩等……）、一般的几何变换（平移、旋转、缩放、分割等……）和恶意攻击等</li>\n</ul>\n</li>\n<li><strong>自恢复性</strong>：经过了一些操作和变换后，可能会使隐藏载体受到较大的破坏，如果只留下部分的数据，在<strong>不需要宿主信号</strong>的情况，却<strong>仍能恢复隐藏信息</strong>的特征就是所谓的自恢复性。</li>\n<li><strong>安全性</strong>：隐藏算法有较强的<strong>抗攻击能力</strong>，即隐藏算法必须能够承受一定程度的人为攻击，保证隐藏信息不会被破坏。</li>\n</ul>\n<h3 id=\"信息隐藏的基本手段\"><a class=\"anchor\" href=\"#信息隐藏的基本手段\">#</a> 信息隐藏的基本手段</h3>\n<p>图像中嵌入信息的方法一般分为<strong>空域 (或时域) 替换方法</strong>及<strong>变换域方法</strong>。</p>\n<h4 id=\"空域替换方法\"><a class=\"anchor\" href=\"#空域替换方法\">#</a> 空域替换方法</h4>\n<p>空域替换方法是用隐藏信息替换载体信息中的<strong>冗余部分</strong></p>\n<ul>\n<li>一种简单的替换方法就是用隐藏信息位替换载体中<strong>最不重要的位</strong> (LSB: Least Significant Bit)，将秘密数据转换成 0、1 比特流，然后将其藏入到图像时域数据的最低比特上。</li>\n<li>例如把一个灰度图像的某个像点的灰度值由 190 变成 191, 人的肉眼是看不出来的。</li>\n<li>信息嵌入过程，即选择一个载体元素子集，例如每个元素代表一个像点的灰度，然后在子集上执行替换操作，即把子集元素最不重要的位 (如最低位) 替换为隐藏信息位，提取过程直接提取隐藏载体集合元素对应的位。</li>\n</ul>\n<p>其特点如下：</p>\n<ul>\n<li>隐藏效果好，且能够做到盲提取。</li>\n<li>鲁棒性差：容易遭受图像压缩、裁剪等图像处理而丢失秘密数据</li>\n<li>安全性低：图像中嵌入信息部分与没有嵌入信息部分具有不同的统计特性，<strong>容易遭受攻击</strong></li>\n</ul>\n<h4 id=\"变换域技术\"><a class=\"anchor\" href=\"#变换域技术\">#</a> 变换域技术</h4>\n<p>采用变换域技术，可在载体图像的<strong>显著区域隐藏信息</strong>。</p>\n<ul>\n<li>在伪装系统中，在信号<strong>频域</strong>中嵌入信息比在空域中嵌入信息具有更好的健壮性，<strong>能够更好地抵御攻击</strong>，如压缩、裁剪和一些图像处理。</li>\n<li>典型的变换方法如使用离散余弦变换 (DCT)、小波变换等方法在图像中嵌入信息，变换可以在整个图像上进行，也可以对整个图像分块后操作。</li>\n<li>当然，图像中能够隐藏的信息数量和可以获得的健壮性之间存在着矛盾。</li>\n</ul>\n<h2 id=\"数字水印的应用及实现方法\"><a class=\"anchor\" href=\"#数字水印的应用及实现方法\">#</a> 数字水印的应用及实现方法</h2>\n<p>数字产品具有易修改、易复制、易窃取的特点，数字知识产权保护成为基于网络数字产品应用迫切需要解决的实际问题。</p>\n<h3 id=\"数字水印基本概念\"><a class=\"anchor\" href=\"#数字水印基本概念\">#</a> 数字水印基本概念</h3>\n<ul>\n<li>数字水印 (Digital Watermark) 是指嵌入在数字产品中<strong>不可见</strong>、<strong>不易移除</strong>的数字信号，可以是图像、符号、数字等一切可以作为标识和标记的信息</li>\n<li>其目的是进行<strong>版权保护</strong>、<strong>所有权证明</strong>、<strong>指纹</strong> (追踪发布多份拷贝）和<strong>完整性保护</strong>等</li>\n<li>版权保护数字水印包含<strong>数字产品的出处</strong>和<strong>版权所有者标识</strong>，能够提供版权证明。</li>\n</ul>\n<h3 id=\"数字水印基本特点\"><a class=\"anchor\" href=\"#数字水印基本特点\">#</a> 数字水印基本特点</h3>\n<ul>\n<li><strong>鲁棒性</strong>：嵌入数字水印的媒体在受到无意损害或蓄意攻击后，仍然能够提取出数字水印信息\n<ul>\n<li>例如，加入图像中的水印必须能够承受施加于图像的变换操作，不会因变换处理而丢失，水印信息经检验提取后应清晰可辨</li>\n</ul>\n</li>\n<li><strong>不可见性</strong> (透明性)：数字水印<strong>不影响宿主媒体的主观质量</strong>\n<ul>\n<li>例如，嵌入水印的图像不应有视觉质量下降，与原始图像对比，很难发现二者区别</li>\n</ul>\n</li>\n<li><strong>安全性</strong>：数字水印应能抵御各种攻击，必须能够惟一地标识原始图像的相关信息，<strong>任何第三方都不能伪造他人的水印信息</strong></li>\n</ul>\n<h3 id=\"数字水印分类\"><a class=\"anchor\" href=\"#数字水印分类\">#</a> 数字水印分类</h3>\n<p>按照数字水印提取过程<strong>是否需要原始宿主的参与</strong>，可将其分为秘密水印、半秘密水印、公开水印</p>\n<ul>\n<li><strong>秘密水印</strong>：检测水印时<strong>需要输入原始数据或原始水印</strong></li>\n<li><strong>半秘密水印</strong> (半盲化水印)：不使用原始数据而使用水印拷贝检测水印</li>\n<li><strong>公开水印</strong> (盲化水印)：检测水印时不需要原始数据也不需要原始水印</li>\n</ul>\n<p>按照水印的<strong>用途</strong>不同，可以分为文本水印、图像水印、音频水印、视频水印</p>\n<p>按照数字水印<strong>自身类型</strong>，可分为有意义数字水印、无意义水印</p>\n<ul>\n<li><strong>有意义数字水印</strong>：如数字水印本身为<strong>有特定意义的图像</strong></li>\n<li><strong>无意义数字水印</strong>：如数字水印本身为<strong>序列</strong>。</li>\n</ul>\n<p>在版权保护领域，<strong>有意义数字水印更具有版权证明能力</strong>。</p>\n<h3 id=\"数字水印算法分类\"><a class=\"anchor\" href=\"#数字水印算法分类\">#</a> 数字水印算法分类</h3>\n<ul>\n<li><strong>空域算法</strong>\n<ul>\n<li>适用于图像、视频。文本、三维模型等载体</li>\n<li>将水印信息直接嵌入到图像的<strong>像素</strong>、视频的<strong>帧</strong>、文本的字符<strong>特征</strong>及<strong>字符间隙</strong>、三维模型的<strong>空间尺寸</strong>中</li>\n</ul>\n</li>\n<li><strong>时域算法</strong>\n<ul>\n<li>主要适用于<strong>音频</strong>数字水印</li>\n<li>将水印信息嵌入到<strong>音频时域采样</strong>中，如果将时间序列看成一个普通的维度，时域算法可以等价于<strong>一维空域算法</strong></li>\n</ul>\n</li>\n<li><strong>变换域算法</strong>\n<ul>\n<li>适用于音频、图像、视频等数字载体</li>\n<li>将水印信息嵌入载体的变换域系数中</li>\n<li>先对载体进行特定数学变换，再对变换后得到的变换域系数加水印，最后通过相应的逆变换将加了水印的变换域载体变换回原域</li>\n<li>变换域算法具有不可见性、鲁棒性好、抗攻击能力强等优点</li>\n</ul>\n</li>\n<li><strong>压缩域算法</strong>\n<ul>\n<li>主要针对音频、图像、视频等数字载体</li>\n<li>利用 JPEG、MPEG 等图像、视频<strong>压缩技术</strong>的结构和特点，将水印嵌入到压缩过程中的各种<strong>变量值域</strong>中。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "笔记",
                "CS基础",
                "信息安全概论"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/secure-basics-3/",
            "url": "https://ysx.cosine.ren/secure-basics-3/",
            "title": "信息安全概论复习三 Chapter5、6、7",
            "date_published": "2022-05-24T15:27:30.000Z",
            "content_html": "<p>此次复习：Chapter-5: 公钥密码技术<br />\n Chapter-6: 密钥管理<br />\n Chapter-7: 安全协议<br />\n<span id=\"more\"></span></p>\n<details class=\"info\"><summary>内容概述</summary><div>\n<p>Chapter-5: 公钥密码技术<br />\n公钥密码的加密密钥公开，解决了密钥管理与分发问题。本章介绍几个典型的公钥密钥算法，包括基于大数分解难题的 RSA 算法，基于离散对数难解问题的 Diffie-Hellman / ElGamal 密码体制</p>\n<ul>\n<li>RSA 公钥密码算法</li>\n<li>Diffie-Hellman 密钥协商机制</li>\n</ul>\n<p>Chapter-6: 密钥管理<br />\n密钥管理是密码技术应用的核心，本章讲解对称密钥和公钥密码应用中的密钥管理技术。</p>\n<ul>\n<li>对称密码中密钥的管理与分发</li>\n<li>公钥密码中密钥管理与应用 —— 公钥基础设施 PKI</li>\n<li>公钥基础设施中公钥载体 —— 数字证书</li>\n</ul>\n<p>Chapter-7: 安全协议<br />\n本章讲解安全协议的概念、网络分层体系结构中典型安全协议分类。重点讲解的虚拟专用网协议 IPSec、传输层安全协议 TLS。</p>\n<ul>\n<li>网络体系结构中各层实现安全保护的机制</li>\n<li>虚拟专用网协议 IPSec 安全保护机理及工作过程</li>\n<li>传输层安全协议 TLS 安全保护机理及工作过程</li>\n</ul>\n</div></details>\n<p><!-- more --></p>\n<h1 id=\"公钥密码技术\"><a class=\"anchor\" href=\"#公钥密码技术\">#</a> 公钥密码技术</h1>\n<h2 id=\"rsa公钥密码算法\"><a class=\"anchor\" href=\"#rsa公钥密码算法\">#</a> RSA 公钥密码算法</h2>\n<ul>\n<li>RSA 是一个经典公钥密码系统，以其设计者 Rivest 、 Shamir 和 Adleman 三人名字命名，1978 年公开其描述</li>\n<li>RSA 既可以用于 <strong>加密</strong> 也可以用于 <strong>签名</strong> ，应用广泛</li>\n<li>RSA 算法包括公钥和私钥两个密钥\n<ul>\n<li>公钥可以让任何人知道并用于加密消息</li>\n<li>使用公钥加密的消息只能使用对应的私钥解密</li>\n</ul>\n</li>\n<li>RSA 公钥密码系统包括 <strong>密钥产生</strong> 、 <strong>加密</strong> 和 <strong>解密</strong> 3 个内容。</li>\n</ul>\n<h3 id=\"密钥产生\"><a class=\"anchor\" href=\"#密钥产生\">#</a> 密钥产生</h3>\n<p>用户 A 进行以下工作</p>\n<ol>\n<li>选择两个 <strong>素数</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>\n<ul>\n<li>随机选择，具有相似的比特长度</li>\n</ul>\n</li>\n<li>计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">n=pq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 用于公钥和私钥的 <strong>模运算</strong></li>\n</ul>\n</li>\n<li>计算 <strong>欧拉函数</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)=(p-1)(q-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ol>\n<blockquote>\n<p>欧拉函数：在数论中，对正整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> ，欧拉函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 是 小于或等于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的正整数中与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 互质的数的数目。<br />\n(一般认为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\varphi (1) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> ) <br />\n有重要定理如下：p 和 q 是互素的数字，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">n=p*q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6597200000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)= \\varphi(p)\\varphi(q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span>。 特别地，若 p 和 q 都是素数，则有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n) = (p-1)(q-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。<br />\n拓展阅读：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vSGlnZ2Vydy9wLzE0MDgyOTU3Lmh0bWw=\">欧拉函数（Euler’s Totient Function）的通式与分析</span></p>\n</blockquote>\n<ol start=\"4\">\n<li>计算 <strong>公钥指数</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> 必须是欧拉函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 中的一个整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>&lt;</mo><mi>e</mi><mo>&lt;</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1&lt;e&lt;\\varphi(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 互素（即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 除了 1 以外没有其他公因子）</li>\n</ul>\n</li>\n<li>计算 <strong>私钥指数</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>\n<ul>\n<li>使 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> 满足 全等关系 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width=\"0.6666666666666666em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">de \\equiv 1 \\mod \\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> （ps：同余定理）</li>\n</ul>\n<blockquote>\n<p>同余定理：给定一个正整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> ，如果两个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 满足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a-b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 能够被 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 整除，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><mi>m</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{(a-b)}{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 得到一个<strong>整数</strong>，那么就称整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 对模 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 同余，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≡</mo><mi>b</mi><mspace></mspace><mspace width=\"0.6666666666666666em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">a \\equiv b\\mod m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>。对模 m 同余是整数的一个等价关系。<br />\n换言之，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ed-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 只能被 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 整除</p>\n</blockquote>\n<ul>\n<li>通常使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ2MzQzMzgvYXJ0aWNsZS9kZXRhaWxzLzQwMjEwNDM1\">拓展欧几里得算法</span> 快速计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> (求乘法逆元)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> 作为私钥指数 <strong>保密</strong></li>\n</ul>\n</li>\n<li>用户 A 发布公钥 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n,e)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span></li>\n</ol>\n<h4 id=\"举个栗子\"><a class=\"anchor\" href=\"#举个栗子\">#</a> 举个栗子</h4>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>61</mn><mo separator=\"true\">,</mo><mi>q</mi><mo>=</mo><mn>53</mn><mspace linebreak=\"newline\"></mspace><mi>n</mi><mo>=</mo><mi>p</mi><mo>×</mo><mi>q</mi><mo>=</mo><mn>61</mn><mo>×</mo><mn>53</mn><mo>=</mo><mn>3233</mn><mspace linebreak=\"newline\"></mspace><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>61</mn><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mn>53</mn><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3120</mn></mrow><annotation encoding=\"application/x-tex\">p=61, q=53\\\\\nn=p \\times q = 61 \\times 53=3233\\\\\n\\varphi(n)=(61-1) \\times (53-1)=3120</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">3</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">3</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> 使得 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 互素，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 除了 1 以外没有其他公因子，可选择一个素数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>17</mn></mrow><annotation encoding=\"application/x-tex\">e=17</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">7</span></span></span></span>，然后判断相互是否整除。（3120 不整除 17，所以 ok）</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>17</mn></mrow><annotation encoding=\"application/x-tex\">e=17\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">7</span></span></span></span></span></p>\n<p>计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> , 实际上是计算模 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的 e  的 <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzg3Mjg2NDI=\">乘法逆元</span></strong> 。因为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>17</mn><mo>×</mo><mn>2753</mn><mo>=</mo><mn>46801</mn></mrow><annotation encoding=\"application/x-tex\">17 \\times 2753=46801</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">1</span></span></span></span>，即 46801 除 3120 余 1。所以</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mo>=</mo><mn>2753</mn></mrow><annotation encoding=\"application/x-tex\">d=2753\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">3</span></span></span></span></span></p>\n<ul>\n<li>即公钥为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mn>3233</mn><mo separator=\"true\">,</mo><mi>e</mi><mo>=</mo><mn>17</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n=3233, e=17)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>私钥为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mn>3233</mn><mo separator=\"true\">,</mo><mi>d</mi><mo>=</mo><mn>2753</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n=3233, d=2753)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h3 id=\"加解密过程\"><a class=\"anchor\" href=\"#加解密过程\">#</a> 加解密过程</h3>\n<p>用户 B 加密消息 M 发送给 用户 A，加密过程如下：</p>\n<ul>\n<li>将消息 M 转换为一个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo>&lt;</mo><mi>m</mi><mo>&lt;</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m,(0&lt;m&lt;n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mo>≡</mo><mi>c</mi><mspace></mspace><mspace width=\"0.6666666666666666em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">me \\equiv c \\mod n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c = m^e(mod \\ n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> （公钥加密）</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>123</mn><mspace linebreak=\"newline\"></mspace><mi>c</mi><mo>=</mo><mn>12</mn><msup><mn>3</mn><mn>17</mn></msup><mspace></mspace><mspace width=\"1em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>3233</mn><mo>=</mo><mn>855</mn></mrow><annotation encoding=\"application/x-tex\">m=123\\\\\nc=123^{17}\\mod 3233 = 855\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">3</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span></span></span></p>\n<p>用户 A 收到消息 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 后，做如下工作</p>\n<ul>\n<li>计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>d</mi><mo>≡</mo><mi>m</mi><mspace></mspace><mspace width=\"0.6666666666666666em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">cd \\equiv m \\mod n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><msup><mi>c</mi><mi>d</mi></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m = c^d(mod \\ n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> （私钥解密）</li>\n<li>计算出的 m 可以转换为消息 M</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>85</mn><msup><mn>5</mn><mn>2753</mn></msup><mspace></mspace><mspace width=\"1em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>3233</mn><mo>=</mo><mn>123</mn></mrow><annotation encoding=\"application/x-tex\">m=855^{2753} \\mod 3233 = 123\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">3</span></span></span></span></span></p>\n<h3 id=\"rsa安全的保证\"><a class=\"anchor\" href=\"#rsa安全的保证\">#</a> RSA 安全的保证</h3>\n<ul>\n<li>RSA 的安全性依赖于大整数分解问题，对于一个大整数进行素因数分解在数学上仍然是一个困难</li>\n<li>然而，目前能够分解的整数已经超过十进制的 200 位，因此建议 RSA 的模数 n 至少要在 1024 比特以上长度</li>\n</ul>\n<h2 id=\"diffie-hellman-密钥协商机制\"><a class=\"anchor\" href=\"#diffie-hellman-密钥协商机制\">#</a> Diffie-Hellman 密钥协商机制</h2>\n<p>能不能在不安全的通信信道上传输一些公开信息，最终使得双方获得秘密信息？这就需要 <strong>密钥协商</strong></p>\n<ul>\n<li>D-H 密钥协商机制 可以实现 <strong>在不安全信道上</strong> 为两个实体建立一个共享秘密，协商的秘密可以作为后续对称密码体制的密钥使用</li>\n</ul>\n<blockquote>\n<p>懒得写了，看去吧<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcWNibG9nL3AvOTAxNjcwNC5odG1s\"> Diffie-Hellman 密钥协商算法 &amp; 中间人攻击</span></p>\n</blockquote>\n<h1 id=\"密钥管理\"><a class=\"anchor\" href=\"#密钥管理\">#</a> 密钥管理</h1>\n<p>现代密码技术要求密码算法公开，因此密钥安全是密码系统的关键，是密码应用中最困难的问题。</p>\n<ul>\n<li>对称密码体制：密钥被共享双方或多方持有，且高度保密。\n<ul>\n<li>要考虑密钥 <strong>在哪里产生</strong> ？</li>\n<li>如何 <strong>分发</strong> ？</li>\n<li>如何定期 <strong>更新</strong> ？</li>\n<li>如何处理密钥 <strong>泄露</strong> ？</li>\n</ul>\n</li>\n<li>公钥密码体制：公钥被共享双方或多方持有，但不高度保密。\n<ul>\n<li>要考虑 密钥对 <strong>如何产生</strong>？</li>\n<li><strong>谁</strong> 来产生？</li>\n<li>私钥如何 <strong>存储</strong>？</li>\n<li>正在使用的公钥是有效且正确的吗？</li>\n<li>私钥泄露或丢失如何 <strong>更新</strong> 密钥对？</li>\n</ul>\n</li>\n</ul>\n<p>密钥管理就是对密钥 <strong>从产生到销毁的全过程进行安全控制</strong>，涵盖了密钥的设置、产生、分发、存储、装入、使用、备份、恢复、提取、更新、吊销、销毁以及保护等一系列的内容和过程，其 <strong>核心是确保密钥的安全性不受威胁。</strong></p>\n<ul>\n<li>对称密码体制：以<strong>密钥分发中心</strong>  <code>KDC</code>  (Key Distribution Center) 作为 <strong>可信第三方</strong>  <code>TTP</code> (Trusted Third Party)</li>\n<li>公钥密码体制：<strong>授权中心</strong>  <code>CA</code>  (Certification Authority)</li>\n</ul>\n<p>密钥管理的一些基本要求如下：</p>\n<ul>\n<li><strong>密钥产生</strong>：密钥生成算法及其实现是保证密钥质量的根本，密钥产生应具有较好的<strong>随机性</strong></li>\n<li><strong>密钥长度</strong>：决定了 <strong>密钥空间大小</strong>，也决定了 <strong>密码强度</strong></li>\n<li><strong>密钥存储</strong>：\n<ul>\n<li>软保护 (口令加密文件)</li>\n<li>硬保护 (智能卡、USB Key 等存储设备)</li>\n</ul>\n</li>\n<li><strong>密钥更新</strong>：密钥应有 <strong>有效期</strong></li>\n<li><strong>密钥撤销</strong>：密钥丢失或遭受攻击时要 <strong>及时更新</strong> 密钥</li>\n<li><strong>会话密钥</strong> (Session Key) ：<strong>一次性</strong>使用的即时密钥</li>\n</ul>\n<h2 id=\"对称密钥管理与分发\"><a class=\"anchor\" href=\"#对称密钥管理与分发\">#</a> 对称密钥管理与分发</h2>\n<p>在有 N 个用户的对称密码系统中，如果要求两两共享密钥，则需要的密钥总数为 N (N-1)/2。</p>\n<ul>\n<li><strong>简单密钥分发</strong>：由<strong>一个</strong>用户产生密钥并通过安全方式分发给其他参与实体</li>\n<li>当用户数较多时，简单密钥分发不可行。</li>\n</ul>\n<p>借助 <strong>公钥密码</strong> 实现对称密码共享密钥动态协商和更新</p>\n<ul>\n<li>利用 D-H 密钥协商协议产生 <strong>共享密钥</strong></li>\n<li>利用 <strong>对方公钥</strong> 加密传递 <strong>会话密钥</strong></li>\n</ul>\n<h2 id=\"密钥的层次化使用\"><a class=\"anchor\" href=\"#密钥的层次化使用\">#</a> 密钥的层次化使用</h2>\n<p>密钥分类与层次化管理：<strong>提高安全性</strong></p>\n<ul>\n<li>使用不同的密钥分别用于不同的用途：\n<ul>\n<li>加密会话消息</li>\n<li>加密其它密钥</li>\n<li>计算消息认证码……</li>\n</ul>\n</li>\n<li>按层次化管理：实体之间先共享主密钥，再使用特定算法 <strong>基于主密钥扩展</strong> 生成多个子密钥。</li>\n</ul>\n<p>密钥分类举例</p>\n<ul>\n<li><strong>主密钥  <code>MK</code> </strong> (Master Key)：在密钥层次结构的 <strong>最高层</strong>\n<ul>\n<li>一般用人工方式建立</li>\n<li>或借助密钥协商机制</li>\n<li>或利用公钥密码体制完成主密钥协商或传递。</li>\n</ul>\n</li>\n<li><strong>密钥确认密钥 <code>KCK</code> </strong> (Key Confirmation Key)：用于在通信中产生消息认证码，<strong>对已产生的密钥或消息进行确认</strong></li>\n<li><strong>密钥加密密钥 <code>KEK</code> </strong> (Key-encrypting Keys)：在密钥传输协议中<strong>加密其他密钥</strong>。</li>\n<li><strong>临时密钥 <code>TK</code> </strong> (Temporal Key)：也称<strong>会话密钥</strong> (Session Key) 。用于加密用户的通信数据。</li>\n</ul>\n<h2 id=\"公钥基础设施-pki\"><a class=\"anchor\" href=\"#公钥基础设施-pki\">#</a> 公钥基础设施 PKI</h2>\n<p>如何能够方便地获取所需要的、有效的、正确的公钥？</p>\n<ul>\n<li>解决办法就是 <strong>公钥基础设施 PKI</strong> (Public Key Infrastructure)</li>\n</ul>\n<h3 id=\"pki-概述\"><a class=\"anchor\" href=\"#pki-概述\">#</a> PKI 概述</h3>\n<ul>\n<li>PKI 是指使用 <strong>公钥密码技术</strong> 实施和提供安全服务的、具有 <strong>普适性</strong> 的安全基础设施，是信息安全领域核心技术之一</li>\n<li>PKI 通过 <strong>权威第三方机构</strong> —— <strong>授权中心 CA</strong> 以签发 <strong>数字证书</strong> 的形式 <strong>发布</strong> 有效实体的 <strong>公钥</strong>。</li>\n<li><strong>数字证书</strong> (Certificate) 是一种特殊的电子文档（也称电子凭证)，包括 <strong>公钥持有者</strong> (称为主体) 的信息及其公钥、有效期、使用方法等信息。数字证书<strong>将证书持有者的身份及其公钥绑定在一起</strong>。</li>\n<li>数字证书的<strong>完整性保护</strong>\n<ul>\n<li>持有者身份与其公钥的绑定关系不能篡改</li>\n<li>解决办法：由 CA 对数字证书进行 <strong>数字签名</strong></li>\n</ul>\n</li>\n<li>PKI 是一种 <strong>由权威机构签发数字证书</strong> 和 <strong>管理数字证书通信实体使用数字证书</strong> 的<strong>方法</strong>、<strong>过程</strong>和<strong>系统</strong>。\n<ul>\n<li>具有可信任的授权中心和认证机构 ——CA</li>\n<li>负责证书的产生、管理、存档、发放、撤销等证书管理</li>\n<li>为用户提供全方位的安全服务</li>\n</ul>\n</li>\n<li>PKI 安全服务的 <strong>实现与应用分离</strong> 是作为 <strong>基础设施</strong> 的重要特征</li>\n</ul>\n<h3 id=\"pki-功能\"><a class=\"anchor\" href=\"#pki-功能\">#</a> PKI 功能</h3>\n<p>PKI 的功能包括 数字<strong>证书管理</strong> 和 基于数字证书的<strong>服务</strong></p>\n<ul>\n<li>证书管理：是 PKI 的核心工作，由 CA 负责\n<ul>\n<li>证书申请</li>\n<li>证书生成</li>\n<li>证书发布</li>\n<li>证书撤销</li>\n<li>证书更新</li>\n<li>证书备份与恢复</li>\n</ul>\n</li>\n<li>PKI 服务：确立证书持有者可信赖的数字身份，通过数字身份与密码机制相结合，提供认证、授权和数字签名等服务\n<ul>\n<li>保密服务</li>\n<li>完整性服务</li>\n<li>认证服务</li>\n<li>不可否认服务</li>\n<li>时间戳</li>\n</ul>\n</li>\n<li>PKI 的交叉认证：不同 PKI 系统的互联互通和业务整合\n<ul>\n<li><strong>在 PKI 之间建立信任关系</strong>，实现一个 PKI 的用户可以验证另一个 PKI 的用户证书</li>\n<li>不同 PKI 的 CA 之间相互签发交叉认证证书：证书的签发者是一个 CA，证书的主体是另一个 CA，在不同安全域之间建立信任关系。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pki-体系结构\"><a class=\"anchor\" href=\"#pki-体系结构\">#</a> PKI 体系结构</h3>\n<ul>\n<li>一个完整的 PKI 系统由 <strong>认证中心 CA</strong> 、<strong>密钥管理中心 KMC</strong>、<strong>注册机构 RA</strong>、<strong>目录服务</strong>、<strong>证书应用服务</strong> 以及 <strong>安全认证应用软件</strong> 等部分组成。</li>\n<li>大规模的 PKI 可以有 <strong>多个 CA</strong>，并按层次结构组织成树型，形成<strong>基于顶级 CA (根 CA) 的信任链</strong>。<br />\nPKI 的体系结构图</li>\n</ul>\n<h2 id=\"数字证书\"><a class=\"anchor\" href=\"#数字证书\">#</a> 数字证书</h2>\n<p>数字证书是实体公钥的载体，用以实现公钥与实体身份的绑定。<br />\n数字证书是一种电子文档，由 3 部分内容构成，其 ASN.1 描述如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Certificate<span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">=</span>SEQUENCE<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    tbsCertificate TBSCertificate<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 证书主体数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    signatureAlgorithm AlgorithmIdentifier<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 签名算法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    signatureValue BITSTRING     <span class=\"token comment\">//CA 的签名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数字证书结构\"><a class=\"anchor\" href=\"#数字证书结构\">#</a> 数字证书结构</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/82ab17efda7943ba83ff3a01fc13cc40.png\" alt=\"数字证书结构\" /></p>\n<p>证书主体数据如下：</p>\n<ul>\n<li><strong>版本号</strong>：0（v1）、1（v2），2（v3）</li>\n<li><strong>序列号</strong>：证书<strong>唯一性编号</strong></li>\n<li><strong>签名算法标识</strong>：CA 为证书签名所用 <strong>签名算法</strong> 和 HASH 算法</li>\n<li><strong>颁发者名称</strong>：用颁发者属性集合标识证书颁发者</li>\n<li><strong>有效期</strong>：证书起始时间和失效时间</li>\n<li><strong>主体名称</strong>：证书持有者属性集合</li>\n<li><strong>主体公钥</strong>：公钥算法和公钥值</li>\n<li><strong>颁发者 / 主体唯一标识符</strong>：可选</li>\n<li><strong>扩展项</strong>：主体、公钥的附加属性，可选</li>\n</ul>\n<h1 id=\"安全协议\"><a class=\"anchor\" href=\"#安全协议\">#</a> 安全协议</h1>\n<h2 id=\"安全协议概述\"><a class=\"anchor\" href=\"#安全协议概述\">#</a> 安全协议概述</h2>\n<p>什么是协议 (protocol)？</p>\n<ul>\n<li>协议是指在 <strong>对等实体</strong> (两方或多方) 之间为完成某项任务所执行的一系列确定的步骤，是协议实体必须<strong>共同遵循</strong>的一套规则</li>\n<li>协议步骤（或规则）是 <strong>明确定义</strong> 的</li>\n<li>协议必须是 <strong>完整</strong> 的</li>\n</ul>\n<p>什么是安全协议？</p>\n<ul>\n<li>为了 <strong>实现特定安全目标</strong>，使用 <strong>密码技术</strong> 在网络和分布式系统中提供各种安全服务的协议，称为安全协议或密码协议</li>\n<li>两类最基本的安全协议： <strong>实体认证协议</strong> 和 <strong>密钥协商协议</strong></li>\n</ul>\n<p>网络协议栈各层上的安全协议：在网络环境下，安全服务可以在不同的网络层次上实施，如下。</p>\n<table>\n<thead>\n<tr>\n<th>所处层次</th>\n<th>安全协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>HTTPS、SSH、PGP、Kerberos、SET、MIME</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP、UDP、SSL、TLS、SOCK5</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IPSec</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>PPP-PAP/CHAP、WEP</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据链路层安全协议\"><a class=\"anchor\" href=\"#数据链路层安全协议\">#</a> 数据链路层安全协议</h3>\n<h4 id=\"ppp-pap\"><a class=\"anchor\" href=\"#ppp-pap\">#</a> PPP-PAP</h4>\n<p><code>PPP-PAP</code>  (Password Authentication Protocol - Point to Point Protocol)</p>\n<blockquote>\n<p><strong>口令认证协议</strong>  <code>PAP</code>  是  <code>PPP</code>  的一个链路控制子协议，对等实体建立初始连接之后，使用 <strong>两次握手</strong> 实现实体认证</p>\n</blockquote>\n<ul>\n<li>被认证一方向认证方持续重复发送 <strong>“用户 ID / 口令”</strong></li>\n<li>直至认证得到响应或连接终止。</li>\n</ul>\n<p>PAP 认证口令以<strong>明文文本</strong>形式在链路上传输，不能防止窃听、重放等攻击，是一种<strong>弱认证方法</strong>。</p>\n<h4 id=\"ppp-chap-验证对等实体身份\"><a class=\"anchor\" href=\"#ppp-chap-验证对等实体身份\">#</a> PPP-CHAP (验证对等实体身份)</h4>\n<p><code>PPP-CHAP</code>  (Challenge Handshake Authentication Protocol)</p>\n<blockquote>\n<p><strong>质询握手认证协议</strong>  <code>PPP-CHAP</code>  是  <code>PPP</code>  协议簇中的一个子协议。通过 <strong>三次握手</strong> 验证对等实体身份</p>\n</blockquote>\n<ul>\n<li>被认证方向认证方发送 <strong>“标识”</strong></li>\n<li>认证方向被认证方发送 <strong>“质询”</strong> （Challenge：随机数） 消息</li>\n<li>被认证方使用质询和口令字（双方事先共享）共同计算哈希值做应答</li>\n</ul>\n<h4 id=\"wep-提供对无线链路的保护\"><a class=\"anchor\" href=\"#wep-提供对无线链路的保护\">#</a> WEP (提供对无线链路的保护)</h4>\n<p>WEP(Wired Equivalent Privacy)</p>\n<blockquote>\n<p><strong>有线网等同保密</strong>  <code>WEP</code>  是 IEEE802.11b 标准中定义的<strong>无线局域网安全协议</strong>。WEP 在数据链路层<strong>提供对无线链路的保护</strong>，实现<strong>无线节点</strong>之间的相互<strong>认证</strong>和<strong>数据保密传输</strong></p>\n</blockquote>\n<ul>\n<li>WEP 使用共享密钥认证，使用 RC4 流密码算法加密数据帧</li>\n<li>WEP 在 802.11 中是可选的，已经发现其存在缺陷，在新的 802.11 标准中被新的协议 (IEEE802.11i) 替换</li>\n</ul>\n<h3 id=\"应用层安全协议\"><a class=\"anchor\" href=\"#应用层安全协议\">#</a> 应用层安全协议</h3>\n<h4 id=\"mime-s-mime-电子邮件安全协议\"><a class=\"anchor\" href=\"#mime-s-mime-电子邮件安全协议\">#</a> MIME / S-MIME (电子邮件安全协议)</h4>\n<p>Multipurpose Internet Mail Extensions / Secure-MIME</p>\n<blockquote>\n<p><code>MIME</code>  <strong>多用途网际邮件扩充协议</strong> 定义了邮件消息格式，方便不同邮件系统之间消息交换。它允许邮件中包含任意类型的文件，如文本、图象、声音、视频及其它应用程序等</p>\n</blockquote>\n<blockquote>\n<p><code>S-MIME</code>  是 <strong>MIME 的安全版本</strong>，提供了一种<strong>安全电子邮件机制</strong>，基于 MIME 标准，S-MIME 为电子消息应用程序提供邮件安全服务，包括<strong>认证</strong>、<strong>完整性保护</strong>、<strong>数据保密</strong>等</p>\n</blockquote>\n<h4 id=\"pgp-pretty-good-privacy\"><a class=\"anchor\" href=\"#pgp-pretty-good-privacy\">#</a> PGP (Pretty Good Privacy)</h4>\n<ul>\n<li>用于<strong>电子邮件</strong>、 <strong>存储数据加密</strong> 和 <strong>数字签名</strong> 的 <strong>开源</strong> 应用程序</li>\n<li>PGP <strong>基于 RSA</strong> 公钥加密体制，实现了对邮件的<strong>加密保护</strong>，以及基于数字签名的源认证和不可否认性保护。</li>\n<li>PGP 支持密钥管理服务器，但其证书模型不同于 X.509</li>\n<li>PGP 模型允许多重、独立而非特殊可信个体签署 “名字 / 密钥” 关联来证明证书的有效性</li>\n</ul>\n<blockquote>\n<p>“只要有足够的签名，名字 / 密钥&gt; 关联就是可信的，因为不会所有的签名者都是‘坏’的”，即所谓 <strong>“信任网” 模型</strong></p>\n</blockquote>\n<h4 id=\"set-一种电子支付安全模型\"><a class=\"anchor\" href=\"#set-一种电子支付安全模型\">#</a> SET (一种电子支付安全模型)</h4>\n<p>SET (Secure Electronic Transaction)</p>\n<ul>\n<li>是一种电子支付安全模型，<strong>用于电子商务的安全保障</strong></li>\n<li>解决 B2C 模式下商家、消费者和银行之间的信任和安全交易问题</li>\n<li>涉及电子商务交易中的交易协定、信息保密、资料完整、数据认证、数据签名等问题</li>\n</ul>\n<h2 id=\"虚拟专用网协议-ipsec\"><a class=\"anchor\" href=\"#虚拟专用网协议-ipsec\">#</a> 虚拟专用网协议 IPSec</h2>\n<p>如何在 IP 层实现安全的数据通信？<br />\nVPN (Virtual Private Network)</p>\n<ul>\n<li>VPN 是建立在公共网络 (如 Internet) 上的<strong>专用网络</strong></li>\n<li>通过在两个系统之间建立安全的信道实现重要数据的安全传输</li>\n<li>VPN 可在路由器、交换机或防火墙等网络设备上实现</li>\n<li>VPN 可以帮助远程用户或公司分支机构以及商业伙伴与内部网络建立可信的安全连接，保证数据传输的安全性</li>\n<li>利用 VPN 技术在互联网环境下建立虚拟的企业用网络，可以大大缩减企业运营成本，增强竞争力。</li>\n</ul>\n<p>IP 层安全协议 IPSec (Internet Protocol Security)</p>\n<ul>\n<li>IPSec 是 IETF 制订的 <strong>VPN 安全标准</strong>，工作在 IP 层，提供 <strong>对 IP 分组进行加密和认证</strong> 的功能。</li>\n<li>用于保护一对主机之间 (主机到主机)、一对安全网关 (网关到网关) 或者安全主机与网关之间 (主机到网关) 的数据流安全。</li>\n<li>IPSec 为 IP 报文段提供 <strong>保密性</strong>、<strong>完整性</strong>、<strong>访问控制</strong>和<strong>数据源认证</strong> 等安全保护服务。</li>\n<li>IPSec 是一个<strong>协议簇</strong>，包括会话初始化阶段通信双方双向认证协议、密钥协商协议，以及对通信会话中每个 IP 报文保护（认证和 / 或加密）协议。</li>\n</ul>\n<h3 id=\"ssl-vpn-secure-sockets-layer-vpn\"><a class=\"anchor\" href=\"#ssl-vpn-secure-sockets-layer-vpn\">#</a> SSL VPN (Secure Sockets Layer VPN)</h3>\n<ul>\n<li>使用安全套接层 SSL 协议实现 VPN 的机制</li>\n<li>通常 SSL 协议被内置于 IE 等浏览器中，使用 SSL 协议进行认证和数据加密的 SSL VPN 就可以免于安装客户端</li>\n<li>SSL VPN 部署简单，同时性能也远低于使用 IPSec 实现的 VPN</li>\n</ul>\n<h2 id=\"传输层安全协议-tls\"><a class=\"anchor\" href=\"#传输层安全协议-tls\">#</a> 传输层安全协议 TLS</h2>\n<p>如何实现 Internet 中通信的两个应用程序之间<strong>认证和数据保密传输</strong>？</p>\n<h3 id=\"tls-概述\"><a class=\"anchor\" href=\"#tls-概述\">#</a> TLS 概述</h3>\n<p>TLS (Transport Layer Security) 的由来</p>\n<ul>\n<li>TLS 协议是一个用于 Internet 上实现保密通信的安全协议</li>\n<li>TLS 协议是 IETF 在 Netscape 公司开发的 SSL (Secure Socket Layer) 协议基础上改进发展而来的</li>\n<li>Netscape 于 1994 年开发了用于保护 Web 通讯的 SSL 协议并在推出 SSL 3.1 时改名为 TLS 1.0</li>\n<li>1997 年 IETF 发布 Draft，1999 年发布 TLSv1.0 (RFC 2246)</li>\n<li>IETF 于 2006 年发布了 TLS v1.1 版本 (RFC 4363)</li>\n</ul>\n<h4 id=\"tls-设计目标\"><a class=\"anchor\" href=\"#tls-设计目标\">#</a> TLS 设计目标</h4>\n<p>TLS 的设计目标如下：</p>\n<ul>\n<li><strong>密码安全性</strong>：TLS 用于在通讯实体间建立安全连接</li>\n<li><strong>互操作性</strong>：独立开发者可以使用 TLS 开发应用程序，而无需交换程序的代码</li>\n<li><strong>扩展性</strong>：提供一种框架，便于加入新的公钥、对称密码</li>\n<li><strong>相对效率性</strong>：密码操作是高 CPU 敏感的，尤其是公钥密码操作，TLS 提供了 <strong>会话缓存机制</strong> 以减少建立的连接数，此外尽量减少网络活动</li>\n</ul>\n<h4 id=\"tls-体系结构\"><a class=\"anchor\" href=\"#tls-体系结构\">#</a> TLS 体系结构</h4>\n<p>TLS 的 <strong>体系结构</strong>：</p>\n<ul>\n<li>TLS 位于 TCP 层与应用层之间，对应用层透明，在可靠传输协议<strong> TCP 之上</strong>建立一个<strong>可靠的端到端安全服务</strong>，为两个通信实体之间提供<strong>保密性和完整性保护</strong></li>\n<li>TLS 协议分为两层\n<ul>\n<li>底层：记录协议层</li>\n<li>上层：握手协议层</li>\n</ul>\n</li>\n<li>TLS 记录协议层：\n<ul>\n<li>TLS 记录协议建立在<strong>可靠</strong>的 TCP 协议上，<strong>为高层协议提供数据封装</strong>，实现压缩 / 解压、加密 / 解密、计算 / 验证 MAC 等操作</li>\n<li>TLS 记录协议要使用 TLS 握手协议协商的密码算法和密钥对上层数据加密，实现保密性。同时使用  <code>HMAC</code>  实现传输消息的<strong>完整性</strong></li>\n</ul>\n</li>\n<li>TLS 握手协议层：\n<ul>\n<li>包含 3 个子协议：TLS 握手协议、TLS 密码规格变更协议、TLS 报警协议</li>\n<li>TLS 握手协议层负责在客户与服务器间进行身份认证、协商加密算法和密钥</li>\n<li>TLS 协议使用 <strong>对称密码</strong> 体制<strong>加密传输数据</strong>，使用 <strong>公钥密码</strong> 体制进行<strong>身份认证</strong> 和 <strong>交换加密密钥</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"tls-会话与连接\"><a class=\"anchor\" href=\"#tls-会话与连接\">#</a> TLS 会话与连接</h4>\n<p>TLS 中有两个重要概念如下：</p>\n<ul>\n<li>TLS <strong>连接</strong>（connection)\n<ul>\n<li>一个连接是一个提供一种合适类型服务的传输过程</li>\n<li>TLS 连接是<strong>端到端</strong>的关系</li>\n<li>连接是<strong>暂时</strong>的，每<strong>一个连接和一个会话关联</strong></li>\n</ul>\n</li>\n<li>TLS <strong>会话</strong> (session）\n<ul>\n<li>1 个 TLS 会话 是在客户与服务器之间的一个关联</li>\n<li>会话由<strong>握手协议创建</strong>，定义一组<strong>可供多个连接共享的密码安全参数</strong></li>\n<li>会话用以<strong>避免</strong>为每一个连接提供新的安全参数所需的<strong>协商代价</strong></li>\n</ul>\n</li>\n</ul>\n<p>会话的状态</p>\n<ul>\n<li>有<strong>多个状态与一个会话</strong>相关联</li>\n<li>一旦一个会话建立，就存在一个读或写的当前状态</li>\n<li>在握手协议中，创建了<strong>挂起的读写状态</strong></li>\n<li>握手协议 <strong>成功</strong>，则将挂起状态<strong>转变为当前状态</strong></li>\n<li>每个会话状态实际上是<strong>一组参数</strong></li>\n</ul>\n",
            "tags": [
                "笔记",
                "CS基础",
                "信息安全概论"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/secure-basics-2/",
            "url": "https://ysx.cosine.ren/secure-basics-2/",
            "title": "信息安全概论复习二 Chapter4 对称密码技术",
            "date_published": "2022-05-22T20:27:30.000Z",
            "content_html": "<p>本章以几个典型对称密码算法为例，介绍对称密码算法实现过程、机理及特点，理解密码算法的应用背景。</p>\n<details class=\"info\"><summary>内容概述</summary><div>\n<p>Chapter-4: 对称密码技术</p>\n<p>本章以几个典型对称密码算法为例，介绍对称密码算法实现过程、机理及特点，理解密码算法的应用背景。</p>\n<ul>\n<li>几个经典的古典密码方案</li>\n<li>数据加密标准 DES</li>\n<li>高级加密标准 AES</li>\n<li>流密码算法</li>\n<li>分组密码算法工作模式</li>\n</ul>\n</div></details>\n<p><span id=\"more\"></span></p>\n<h1 id=\"古典密码\"><a class=\"anchor\" href=\"#古典密码\">#</a> 古典密码</h1>\n<p>古典密码主要分为两种：置换密码与代换密码</p>\n<h2 id=\"置换密码\"><a class=\"anchor\" href=\"#置换密码\">#</a> 置换密码</h2>\n<p>置换密码的特点是保持明文的<strong>所有字符不变</strong>，只是利用置换打乱了明文字符的位置和次序。也就是<strong>改变了明文的结构，不改变明文内容</strong></p>\n<blockquote>\n<p>通过改变明文字符的位置来实现加解密<br />\n典型：栅栏密码、行移位密码等</p>\n</blockquote>\n<h2 id=\"代换密码\"><a class=\"anchor\" href=\"#代换密码\">#</a> 代换密码</h2>\n<blockquote>\n<p>将明文字母 <strong>替换</strong> 成其他字母、数字或符号的方法 <br />\n如果把明文看成是 0 或 1 的比特序列，那么密文就是 0 或 1 比特序列的另一种表达。 <ins>简单粗暴</ins><br />\n典型：凯撒密码</p>\n</blockquote>\n<h3 id=\"凯撒密码\"><a class=\"anchor\" href=\"#凯撒密码\">#</a> 凯撒密码</h3>\n<ul>\n<li>所知道的最早的代替密码</li>\n<li>由 Julius Caesar 发明，首先用在军事通信中</li>\n<li>基本思想：通过将字母移动一定的位数实现加解密</li>\n<li>eg: 每个字母用其后的第三个字母代替（也称 <strong>移位密码</strong>）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>明文</th>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n<th>e</th>\n<th>f</th>\n<th>g</th>\n<th>h</th>\n<th>i</th>\n<th>j</th>\n<th>k</th>\n<th>l</th>\n<th>m</th>\n<th>n</th>\n<th>o</th>\n<th>p</th>\n<th>q</th>\n<th>r</th>\n<th>s</th>\n<th>t</th>\n<th>u</th>\n<th>v</th>\n<th>w</th>\n<th>x</th>\n<th>y</th>\n<th>z</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>密文</td>\n<td>D</td>\n<td>E</td>\n<td>F</td>\n<td>G</td>\n<td>H</td>\n<td>I</td>\n<td>J</td>\n<td>K</td>\n<td>L</td>\n<td>M</td>\n<td>N</td>\n<td>O</td>\n<td>P</td>\n<td>Q</td>\n<td>R</td>\n<td>S</td>\n<td>T</td>\n<td>U</td>\n<td>V</td>\n<td>W</td>\n<td>X</td>\n<td>Y</td>\n<td>Z</td>\n<td>A</td>\n<td>B</td>\n<td>C</td>\n</tr>\n</tbody>\n</table>\n<p>加解密方式 1：查表👆</p>\n<p>加密方式 2：公式计算</p>\n<ul>\n<li>编码明文： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>b</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>z</mi><mo>=</mo><mn>25</mn></mrow><annotation encoding=\"application/x-tex\">a=0,b=1,…,z=25</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span></span>，则明文<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><mi>p</mi><mn>1</mn><mi>p</mi><mn>2</mn><mo>…</mo><mi>p</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">P=p1p2…pn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>加密运算： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mi>p</mi><mi>i</mi></msub><mo>+</mo><mi>k</mi><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo separator=\"true\">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">c_i=p_i+k \\bmod 26,i=1,2,…,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，</li>\n<li>得密文： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub><mo>…</mo><msub><mi>c</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">C=c_1c_2…c_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<p>解密方式 2：公式计算</p>\n<ul>\n<li>密文： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub><mo>…</mo><msub><mi>c</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">C=c_1c_2…c_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>解密运算： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><msub><mi>c</mi><mi>i</mi></msub><mo>−</mo><mi>k</mi><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo separator=\"true\">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p_i=c_i-k \\bmod 26,i=1,2,…,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，</li>\n<li>解密得明文： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>2</mn></msub><mo>…</mo><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">P=p_1p_2…p_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<p>也即凯撒密码的加解密算法如下：</p>\n<ul>\n<li>加密算法： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>26</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c = E(p) = (p+k) \\bmod (26)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>解密算法： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mi>D</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>26</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p = D(c) = (c-k) \\bmod (26)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>密码分析：</p>\n<ul>\n<li>恺撒密码共有密钥 25 个</li>\n<li>可简单地 <strong>依次去测试</strong> ，穷举攻击</li>\n<li>基于字母频率的破译方法</li>\n<li>所破译的明文需要识别</li>\n</ul>\n<p>eg：破译密文 &quot;GCUA VQ DTGCM&quot;</p>\n<ul>\n<li>dzrx sn aqdzj( k=3 )</li>\n<li>easy to break (k=2) 这不就出来了！</li>\n<li></li>\n</ul>\n<h3 id=\"单表代换密码代换替换代替\"><a class=\"anchor\" href=\"#单表代换密码代换替换代替\">#</a> 单表代换密码（代换 / 替换 / 代替）</h3>\n<blockquote>\n<p>可阅读博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhdHF3L2FydGljbGUvZGV0YWlscy8xMTkxNTI3Nzc=\">单表代换密码体制</span></p>\n</blockquote>\n<p>特点：</p>\n<ul>\n<li>不是简单有序地字母移位</li>\n<li>可任意地打乱字母的顺序</li>\n<li>每个明文字母映射到一个不同的随机密文字母</li>\n<li>代换关系可以是一对多，但是必须要保证可逆性</li>\n<li>密钥数目: 26! (26 的阶乘)</li>\n</ul>\n<p>貌似很安全，但其实还是可以通过语言频率进行密码分析</p>\n<ul>\n<li>人类的语言是有冗余的</li>\n<li>字母的 <strong>使用频率</strong> 是不同的</li>\n<li>如在英语中 E 使用的频率最高</li>\n<li>有些字母使用较少</li>\n<li>单字母、双字母、三字母组合统计</li>\n</ul>\n<h3 id=\"多表代换密码维尼吉亚vigenere密码\"><a class=\"anchor\" href=\"#多表代换密码维尼吉亚vigenere密码\">#</a> 多表代换密码（维尼吉亚，Vigenere 密码）</h3>\n<p>多表代换密码跟单表代换密码的区别主要是：多表代换的代换表有多个。</p>\n<ul>\n<li>对于加密，交替使用不同的代换表</li>\n<li>字母的使用频率分布更加平坦</li>\n<li>加密和解密所用的代换表顺序一致</li>\n<li>典型例子就是：维尼吉亚密码</li>\n</ul>\n<p>维吉尼亚密码是最简单的多表代换密码，由多个凯撒移位密码组成。其明文字符集为 a~z，26 个英文字母。将字母按顺序循环移位 k 个，形成一个代换表</p>\n<p>维尼吉亚方阵如下：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/bb252f349361440dbfda1b72767f714c.png\" alt=\"维尼吉亚方阵\" /></p>\n<p>例如，假设明文为： <code>ATTACKATDAWN</code></p>\n<ol>\n<li>选择某一关键词并重复到与明文等长（过短则截取）而得到密钥，如关键词为  <code>LEMON</code>  时，密钥为： <code>LEMONLEMONLE</code></li>\n<li>对于明文的第一个字母  <code>A</code> ，对应密钥的第一个字母  <code>L</code> ，于是使用表格中  <code>L</code>  行字母表进行加密，得到密文第一个字母  <code>L</code></li>\n<li>类似地，明文第二个字母为  <code>T</code> ，使用表中对应的  <code>E</code>  行进行加密，得到密文第二个字母 X。以此类推，可以得到：</li>\n</ol>\n<blockquote>\n<p>明文： <code>ATTACKATDAWN</code>  <br />\n密钥： <code>LEMONLEMONLE</code> <br />\n 密文： <code>LXFOPVEFRNHR</code></p>\n</blockquote>\n<p>解密的过程则与加密相反。</p>\n<ol>\n<li>密钥第一个字母  <code>L</code>  对应  <code>L</code>  行字母表，发现密文第一个字母  <code>L</code>  位于  <code>A</code>  列，因而明文第一个字母为  <code>A</code></li>\n<li>密钥第二个字母  <code>E</code>  对应  <code>E</code>  行字母表，而密文第二个字母  <code>X</code>  位于此行  <code>T</code>  列，因而明文第二个字母为  <code>T</code>  。以此类推便可得到明文。</li>\n</ol>\n<p>也即维吉尼亚密码的加解密算法如下：</p>\n<ul>\n<li>加密算法： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mi>E</mi><msub><mi>k</mi><mi>i</mi></msub></msub><mo stretchy=\"false\">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo>+</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">c_i = E_{k_i}(p_i) = (p_i+k_i) \\bmod 26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0001em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span></span></li>\n<li>解密算法： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><msub><mi>D</mi><msub><mi>k</mi><mi>i</mi></msub></msub><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mi>i</mi></msub><mo>−</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">p_i = D_{k_i}(c_i) = (c_i-k_i) \\bmod 26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0001em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span></span></li>\n</ul>\n<p>可见  <code>Vigenere</code>  密码与单表代换密码的区别仅仅在于：单表移位密码中的位移量  <code>k</code>  是一个固定的常数；而  <code>Vigenere</code>  密码中的  <code>ki</code>  是变化的，<strong>字母的位置不同，则所采用的位移量也不同</strong></p>\n<p>加解密过程 js 代码如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author: cos</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description: Vigenere 加密解密过程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @FilePath: \\secure\\exp_1\\Vigenere.js</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vigenere</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ascii<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//ascii [i] 表示第 i 个字母的 ascii 码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    matrix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ascii <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ascii<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 列主密钥</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 根据明文和关键字生成密钥</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">buildKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plain<span class=\"token punctuation\">,</span> keyword</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>len1<span class=\"token punctuation\">,</span> len2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>plain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> keyword<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len1 <span class=\"token operator\">&lt;=</span> len2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> keyword<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>len1<span class=\"token operator\">/</span>len2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> keyword<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> keyword<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len1<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>len2<span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 根据明文 plain 和密钥关键词 keyword 进行加密</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plain<span class=\"token punctuation\">,</span> keyword</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">let</span> capitalPlain <span class=\"token operator\">=</span> plain<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意先将密钥和明文转为大写</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Vigenere</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">buildKey</span><span class=\"token punctuation\">(</span>capitalPlain<span class=\"token punctuation\">,</span> keyword<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> capitalPlain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">65</span> <span class=\"token comment\">// 选用第 idx 行的</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">let</span> jdx <span class=\"token operator\">=</span> capitalPlain<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">65</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">let</span> nowchar <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>jdx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            res <span class=\"token operator\">+=</span> plain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span> <span class=\"token operator\">?</span> nowchar <span class=\"token operator\">:</span> nowchar<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 若是小写，则密文也对应小写。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 根据明文 plain 和密钥关键词 keyword 进行加密</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">encrypted<span class=\"token punctuation\">,</span> keyword</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">let</span> capitalEd <span class=\"token operator\">=</span> encrypted<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意先将密钥和明文转为大写</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Vigenere</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">buildKey</span><span class=\"token punctuation\">(</span>capitalEd<span class=\"token punctuation\">,</span> keyword<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> capitalEd<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">65</span> <span class=\"token comment\">// 选用第 idx 行的</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">let</span> jdx <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">==</span> capitalEd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在该行中找到密文对应的 ascii 码          </span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">let</span> nowchar <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ascii<span class=\"token punctuation\">[</span>jdx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            res <span class=\"token operator\">+=</span> encrypted<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span> <span class=\"token operator\">?</span> nowchar <span class=\"token operator\">:</span> nowchar<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 若是小写，则解密出来的字母也对应小写。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">printMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方阵如下：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vigenere</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author: cos</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description: 主类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @FilePath: \\secure\\exp_1\\Main.js</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 测试函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Vigenere'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testCase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plain<span class=\"token punctuation\">,</span> keyword</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">明文为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>plain<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, 密钥为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>keyword<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> encrypted <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">,</span> keyword<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">密文为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>encrypted<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> decrypted <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>encrypted<span class=\"token punctuation\">,</span> keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">解密得:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>decrypted<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> testCases <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"ATTACKATDAWN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LEMON\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"haoye\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"QwQqwqOVO\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WHXHP\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"BUS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"YELLO\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"abcdEFGhiJK\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NaHCOx\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"DidILoveU\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cos\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> testCases<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">----------------样例</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">----------------</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">testCase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>testCases<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">printMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出结果：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/71592075688f42b2b1a684949b65e3f4.png\" alt=\"输出结果\" /></p>\n<p>其他典型多表代换密码有：希尔密码（Hill）、转轮密码等……</p>\n<h1 id=\"数据加密标准des\"><a class=\"anchor\" href=\"#数据加密标准des\">#</a> 数据加密标准 DES</h1>\n<p>如何实现<strong>加解密过程相同</strong>、<strong>密钥相同</strong>的对称密码算法？</p>\n<p>数据加密标准  <code>DES</code>  (Data Encryption Standard) 是个著名<strong>分组加密算法</strong>。</p>\n<p>美国国家标准局 1973 年 5 月公开征集用于计算机数据在传输和存储期间实现加密保护的密码算法。</p>\n<ul>\n<li>\n<p>1975 年美国国家标准局接受了 IBM 公司提交的一种密码算法并向社会公开征求意见。</p>\n</li>\n<li>\n<p>1977 年正式采用该算法作为美国数据加密标准。</p>\n</li>\n<li>\n<p>1980 年 12 月美国国家标准协会正式采用该算法作为美国商用加密算法。</p>\n</li>\n</ul>\n<p>美国国家标准局征求加密算法的要求：</p>\n<ul>\n<li>提供高质量的数据保护，防止数据未经授权的泄露和未被察觉的修改。</li>\n<li>具有相当高的复杂性，使得破译的开销超过可能获得的利益，同时又便于理解和掌握。</li>\n<li>密码体制的安全性应该不依赖于算法的保密，其安全性<strong>仅以加密密钥的保密为基础</strong>。</li>\n<li>实现经济，运行有效，并且适用于多种完全不同的应用。</li>\n</ul>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<ul>\n<li>DES 是一种分组密码算法，加密和解密使用相同的密钥</li>\n<li>DES 的分组长度为 64 比特位</li>\n<li>使用 64 比特密钥（其中包括 8 比特奇偶校验位)，密钥通过扩展后产生 16 个子密钥。</li>\n<li>经过 16 轮对明文分组的代换和置换</li>\n<li>DES 算法的步骤，包括 IP 置换、密钥置换、E 扩展置换、S 盒代替、P 盒置换和逆初始置换 IP-1……（寄）</li>\n</ul>\n<p>…… 后续视题型再补充！先看博客吧，感觉不会考具体步骤：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaWRyZWFtby9wLzkzMzM3NTMuaHRtbCNhdXRvaWQtMC0wLTA=\">数据加密算法 -- 详解 DES 加密算法原理与实现</span></p>\n<ol>\n<li class=\"quiz fill\">\n<p>加 / 解密密钥相同有何好处？<span class=\"gap\">用户只需记忆一个密钥，就可用于加密、解密</span>。 </p>\n<blockquote>\n<p>加密解密的计算量小，速度快，简单易用，适合于对海量数据进行加密处理。</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>长度为什么选择 64 比特？<span class=\"gap\">可进行奇偶校验，每 8 位可以用于奇偶校验</span></p>\n<blockquote>\n<p>密钥长度为 64 bit，但是实际数据长度只有 56 位，还有 8 位为奇偶校验位<br />\n校验码这一块推荐 3B1B 的视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXBWNDExeTdFOA==\">【官方双语】汉明码 part2，优雅的全貌</span></p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"高级加密标准-aes\"><a class=\"anchor\" href=\"#高级加密标准-aes\">#</a> 高级加密标准 AES</h1>\n<p>如何设计数学上可证明安全性的对称密码算法？</p>\n<p>1997.4.15，NIST 发起征集高级加密标准的活动，目的是确定一个可以公开技术细节的、全球免费使用的分组密码算法，作为新的数据加密标准。</p>\n<p>1997.9.12，美国联邦登记处公布了正式征集 AES 候选算法的通告。作为进入 AES 候选过程的一个条件，开发者承诺放弃被选中算法的知识产权。</p>\n<p>NTST 对 AES 算法的要求：</p>\n<ul>\n<li>算法应比三重 DES 快，而且至少还要一样的安全</li>\n<li>应具有 128 比特分组长度和 128/192/256 比特密钥长度</li>\n</ul>\n<blockquote>\n<p>64 比特密钥已经能够破解</p>\n</blockquote>\n<p>1998.8.12 首届 AES 会议 NIST 收到 15 个候选算法。1999.3.22 第二次 AES 会议将候选名单减少为 5 个:</p>\n<ul>\n<li>MARS (IBM)、RC6 (MIT)、Rijndael（比）、 Serpent (英、以、美)、Twofish（美)</li>\n</ul>\n<p>2000.4.13 第三次 AES 会议上，对这 5 个候选算法的各种分析结果进行了讨论。</p>\n<p>2000.10.2，NIST 宣布了获胜者:</p>\n<ul>\n<li>比利时密码专家 Vincent Rijmen 和 Joan Daemen 设计的  <code>Rijndael</code>  算法</li>\n</ul>\n<p>2001 年 11 月出版了最终标准 FIPS PUB197，该算法称为 AES:  <code>Advanced Encryption Standard</code> .</p>\n<h2 id=\"rijndael算法\"><a class=\"anchor\" href=\"#rijndael算法\">#</a> Rijndael 算法</h2>\n<ul>\n<li>分组长度为 128 比特，密钥长度为 128/192/256 比特</li>\n<li>使用 <strong>替换置换网络</strong> 设计，而没有采用  <code>Feistel</code>  结构，软硬件实现都很快。</li>\n<li>基本特性\n<ul>\n<li>能够抵抗已知的所有攻击</li>\n<li>在各种平台上执行速度快，代码紧凑</li>\n<li>设计简单</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"aes基本操作流程\"><a class=\"anchor\" href=\"#aes基本操作流程\">#</a> AES 基本操作流程</h2>\n<p>AES 由多轮操作组成，<strong>轮数</strong> 由 <strong>分组和密钥长度</strong> 决定。</p>\n<p>AES 在 4×n 字节的数组（矩阵）上操作，称为状态 (State)，其中 n 是密钥字节数除 4。</p>\n<p>AES 的数据结构</p>\n<ul>\n<li>以字节为单位的方阵描述：输入分组 in 、中间数组 State 、输出分组 out 、密钥分组 K</li>\n<li>排列顺序：方阵中数据从上到下，从左到右排开</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/62085b5cfe89476db3b6705ad4001026.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>允许分组和密钥以 128 比特为基础，以 8 字节倍数扩展长度\n<ul>\n<li>因此 192、256 比特分组或密钥被组织成 4×6、4×8 矩阵</li>\n</ul>\n</li>\n<li>AES 标准中使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>b</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 分别表示<strong>分组矩阵</strong>、<strong>密钥矩阵列数</strong>\n<ul>\n<li>如当分组为 4×6 矩阵，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>b</mi></msub><mo>=</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">N_b=6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span></span></span></span>，密钥为 4×8 矩阵，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">N_k=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span></li>\n</ul>\n</li>\n<li>AES 算法流程中轮数依赖于密钥长度，标准中使用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 表示 <strong>轮数</strong> 。</li>\n<li>AES 包括 3 个分组密码套件：AES-128、AES-192、AES-256，对应 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 分别为 4、6、8，密钥长度对应 128、192 和 256 比特，对应轮数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 等于 10、12、14，分组长度都为 128 比特</li>\n</ul>\n<p>此处省略亿堆操作具体流程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4MjA1MTUzL2FydGljbGUvZGV0YWlscy81NTc5ODYyOA==\">AES 加密算法的详细介绍与实现</span></p>\n<p>其他分组密码算法： <strong>IDEA</strong> 算法、 <strong>Blowfish</strong> 算法、 <strong>RC5/RC6</strong> 算法</p>\n<h1 id=\"流密码算法-rc4\"><a class=\"anchor\" href=\"#流密码算法-rc4\">#</a> 流密码算法 RC4</h1>\n<p>如何实现 “无限” 长度密钥的对称密码算法？</p>\n<ul>\n<li>主密钥：通信双方共享的一定长度密钥</li>\n</ul>\n<p>RC4 算法</p>\n<ul>\n<li>由 主密钥 按一定密钥调度算法 <strong>产生任意长度伪随机密钥字节流</strong> (以字节为单位)</li>\n<li>与明文流 <strong>按字节异或</strong> 生成密文流</li>\n<li>解密时密文流与 <strong>相同的密钥流</strong>同样<strong>按字节异或</strong> 恢复出明文字节流。</li>\n</ul>\n<p>好，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI0NzAxNDQvYXJ0aWNsZS9kZXRhaWxzLzgxNDExNTY1\">对称加密之流密码 RC4</span></p>\n<h1 id=\"分组密码工作模式\"><a class=\"anchor\" href=\"#分组密码工作模式\">#</a> 分组密码工作模式</h1>\n<ul>\n<li>电子密码本（ECB：Electronic Code Book）模式</li>\n<li>密文分组链接（CBC：Cipher Block Chaining）模式</li>\n<li>密文反馈（CFB：Cipher-FeedBack）模式</li>\n<li>输出反馈（OFB：Output-FeedBack）模式</li>\n<li>计数器（CTR：Counter mode）模式</li>\n</ul>\n",
            "tags": [
                "笔记",
                "CS基础",
                "信息安全概论"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/secure-basics-1/",
            "url": "https://ysx.cosine.ren/secure-basics-1/",
            "title": "信息安全概论复习一（Chapter1、2、3）",
            "date_published": "2022-05-22T17:47:30.000Z",
            "content_html": "<p>Chapter-1: 信息安全概论<br />\n Chapter-2: 信息安全保障体系<br />\n Chapter-3: 密码技术概述</p>\n<p>本次复习主要包含上述三章内容</p>\n<details class=\"info\"><summary>内容概述</summary><div>\n<p>Chapter-1: 信息安全概论</p>\n<ul>\n<li>信息安全基本概念</li>\n<li>常见的网络攻击事件及其分类</li>\n</ul>\n<p>Chapter-2: 信息安全保障体系</p>\n<ul>\n<li>信息安全保障基本概念</li>\n<li>常用的安全属性及其实现</li>\n<li>信息安全保障体系结构及信息安全防御模型</li>\n<li>风险评估与等级保护</li>\n</ul>\n<p>Chapter-3: 密码技术概述<br />\n本章介绍密码技术的基本概念、分类、实现和应用原理。内容包括:</p>\n<ul>\n<li>密码技术基本概念及基本术语</li>\n<li>对称密码体制与公钥密码体制</li>\n<li>数字签名技术及其特性</li>\n</ul>\n</div></details>\n<p><span id=\"more\"></span><br />\n 由于不知道重点是啥，就只能靠自己猜了 QAQ</p>\n<h1 id=\"信息安全基本概念\"><a class=\"anchor\" href=\"#信息安全基本概念\">#</a> 信息安全基本概念</h1>\n<h2 id=\"信息-information\"><a class=\"anchor\" href=\"#信息-information\">#</a> 信息 (Information)</h2>\n<p>一种资源和交流的对象，具有 <strong>普遍性</strong>、<strong>共享性</strong>、<strong>增值性</strong>、<strong>可处理性</strong> 和 <strong>多效用性</strong>，对人类社会发展具有特别重要的意义。</p>\n<h2 id=\"信息系统-information-system\"><a class=\"anchor\" href=\"#信息系统-information-system\">#</a> 信息系统 (Information System)</h2>\n<p>由<strong>计算机</strong>及其相关和<strong>配套的设备、设施</strong>（含网络）构成的，按照一定的应用目标和规则对信息进行采集、加工、存储、传输、检索等处理的人机系统。(GB/Z20986-2007)</p>\n<h2 id=\"信息安全事件-information-security-incident\"><a class=\"anchor\" href=\"#信息安全事件-information-security-incident\">#</a> 信息安全事件 (Information Security Incident)</h2>\n<p>由于 <strong>自然</strong> 或者 <strong>人为</strong> 以及 <strong>软硬件本身缺陷或故障</strong> 的原因，对信息系统 <strong>造成危害</strong>，或对社会造成<strong>负面影响</strong>的事件。</p>\n<h2 id=\"信息安全保障-ensuring-information-security\"><a class=\"anchor\" href=\"#信息安全保障-ensuring-information-security\">#</a> 信息安全保障 (Ensuring Information Security)</h2>\n<p>保护信息系统和信息网络中的信息资源免受各种类型的威胁、干扰和破坏。</p>\n<p>措施：查找、防范、阻断引起危害和影响的潜在威胁。</p>\n<h1 id=\"信息安全事件分类\"><a class=\"anchor\" href=\"#信息安全事件分类\">#</a> 信息安全事件分类</h1>\n<p>7 个基本类型</p>\n<ul>\n<li>有害程序事件（Malware）</li>\n<li>网络攻击事件</li>\n<li>信息破坏事件</li>\n<li>信息内容安全事件</li>\n<li>设备设施故障</li>\n<li>灾害性事件</li>\n<li>其他事件</li>\n</ul>\n<h2 id=\"有害程序事件malware\"><a class=\"anchor\" href=\"#有害程序事件malware\">#</a> 有害程序事件（Malware）</h2>\n<div class=\"note primary no-icon\">\n<p>是指 <strong>蓄意制造</strong>、<strong>传播有害程序</strong>，或因受到有害程序影响而导致的信息安全事件</p>\n</div>\n<ul>\n<li>计算机病毒事件</li>\n<li>蠕虫事件</li>\n<li>特洛伊木马事件</li>\n<li>僵尸网络事件</li>\n<li>混合攻击程序事件</li>\n<li>网页内嵌恶意代码事件</li>\n<li>其他有害程序事件……</li>\n</ul>\n<h2 id=\"网络攻击事件\"><a class=\"anchor\" href=\"#网络攻击事件\">#</a> 网络攻击事件</h2>\n<div class=\"note primary no-icon\">\n<p>通过网络或其他技术手段，利用信息系统的种种缺陷，或使用暴力手段对信息系统 <strong>实施攻击</strong>，造成信息系统异常或对信息系统当前运行造成潜在危害的信息安全事件。</p>\n</div>\n<ul>\n<li>拒绝服务攻击事件</li>\n<li>后门攻击事件</li>\n<li>漏洞攻击事件</li>\n<li>网络扫描窃听事件</li>\n<li>网络钓鱼事件</li>\n<li>干扰事件</li>\n<li>其他网络攻击事件……</li>\n</ul>\n<h2 id=\"信息破坏事件\"><a class=\"anchor\" href=\"#信息破坏事件\">#</a> 信息破坏事件</h2>\n<div class=\"note primary no-icon\">\n<p>通过网络或其他技术手段，造成信息系统中的信息被<strong>篡改、假冒、泄露、窃取</strong>等而导致的信息安全事件</p>\n</div>\n<ul>\n<li>信息篡改事件</li>\n<li>信息假冒事件</li>\n<li>信息泄露事件</li>\n<li>信息窃取事件</li>\n<li>信息丢失事件</li>\n<li>其他信息破坏事件……</li>\n</ul>\n<h2 id=\"信息内容安全事件\"><a class=\"anchor\" href=\"#信息内容安全事件\">#</a> 信息内容安全事件</h2>\n<div class=\"note primary no-icon\">\n<p><strong>利用信息网络发布、传播</strong>，危害国家安全、社会稳定和公共利益的内容的安全事件</p>\n</div>\n<ul>\n<li><strong>违反宪法和法律</strong>、行政法规的信息安全事件</li>\n<li>针对社会事项进行讨论、评论形成网上敏感的<strong>舆论热点</strong>，出现一定规模炒作的信息安全事件</li>\n<li><strong>组织串连、煽动集会游行</strong>的信息安全事件</li>\n<li>其他信息内容安全事件……</li>\n</ul>\n<h3 id=\"网络舆情及其监测\"><a class=\"anchor\" href=\"#网络舆情及其监测\">#</a> 网络舆情及其监测</h3>\n<p><strong>舆情</strong> 是指在一定的社会空间中，围绕 <strong>中介性</strong> 社会事件发生、发展和变化，民众对社会管理着产生和持有的社会政治态度，网络舆情形成迅速，对社会影响巨大。</p>\n<p>特定：<strong>直接</strong>性、<strong>突发</strong>性、<strong>偏差</strong>性</p>\n<h2 id=\"设备设施故障\"><a class=\"anchor\" href=\"#设备设施故障\">#</a> 设备设施故障</h2>\n<div class=\"note primary no-icon\">\n<p>由于<strong>信息系统自身故障或外围保障设施故障</strong>而导致的信息安全事件，以及 <strong>人为</strong> 的使用 <strong>非技术手段</strong><br />\n，<strong>有意或无意的造成信息系统破坏</strong> 而导致的信息安全事件。</p>\n</div>\n<ul>\n<li>软硬件自身故障</li>\n<li>外围保障设施故障</li>\n<li>人为破坏事故</li>\n<li>其它设备设施故障</li>\n</ul>\n<h2 id=\"灾害性事件\"><a class=\"anchor\" href=\"#灾害性事件\">#</a> 灾害性事件</h2>\n<div class=\"note primary no-icon\">\n<p>由于 <strong>不可抗力</strong> 对信息系统造成 <strong>物理破坏</strong> 而导致的信息安全事件。<br />\n灾害性事件包括水灾、台风、地震、雷击、坍塌、火灾、恐怖袭击、战争等导致的信息安全事件。</p>\n</div>\n<ul>\n<li>911 恐袭引发的数据灾难</li>\n<li>其他……</li>\n</ul>\n<h2 id=\"其他网络攻击事件\"><a class=\"anchor\" href=\"#其他网络攻击事件\">#</a> 其他网络攻击事件</h2>\n<p>前述 6 个基本分类之外的信息安全事件。</p>\n<p>除了分类之外，还可以对信息安全事件<strong>分级</strong>。<br />\n分级主要考虑三个方面的影响</p>\n<ul>\n<li>信息系统的<strong>重要程度</strong></li>\n<li><strong>系统损失</strong></li>\n<li><strong>社会影响</strong></li>\n</ul>\n<h1 id=\"信息安全属性\"><a class=\"anchor\" href=\"#信息安全属性\">#</a> 信息安全属性</h1>\n<p>信息安全属性主要有如下几种：</p>\n<ol>\n<li>保密性（机密性）</li>\n<li>完整性</li>\n<li>鉴别性（可认证性）</li>\n<li>不可否认性（不可抵赖性）</li>\n<li>可用性</li>\n<li>可靠性</li>\n<li>可追究性</li>\n<li>可控性</li>\n<li>保障</li>\n</ol>\n<h2 id=\"保密性机密性-confidentiality\"><a class=\"anchor\" href=\"#保密性机密性-confidentiality\">#</a> 保密性（机密性 Confidentiality）</h2>\n<div class=\"note primary no-icon\">\n<p>保证信息与信息系统<strong>不被非授权者所获取或利用</strong></p>\n<p>包括：<strong>数据的保密性</strong> 和 <strong>访问控制</strong> 等方面内容</p>\n</div>\n<h2 id=\"完整性integrity\"><a class=\"anchor\" href=\"#完整性integrity\">#</a> 完整性（Integrity）</h2>\n<div class=\"note primary no-icon\">\n<p>保证信息与信息系统<strong>正确和完备</strong>，不被冒充、伪造或篡改</p>\n<p>包括：<strong>数据的完整性</strong>、<strong>系统的完整性</strong> 等方面。</p>\n</div>\n<h2 id=\"鉴别性可认证性authentication\"><a class=\"anchor\" href=\"#鉴别性可认证性authentication\">#</a> 鉴别性（可认证性，Authentication）</h2>\n<div class=\"note primary no-icon\">\n<p>保证信息与信息系统<strong>真实</strong></p>\n<p>包括：<strong>实体身份的真实性</strong>、<strong>数据和系统的真实性</strong> 等方面。</p>\n</div>\n<h2 id=\"不可否认性不可抵赖性non-repudiation\"><a class=\"anchor\" href=\"#不可否认性不可抵赖性non-repudiation\">#</a> 不可否认性（不可抵赖性，Non-Repudiation）</h2>\n<div class=\"note primary no-icon\">\n<p>建立有效的责任机制，<strong>防止用户否认其行为</strong></p>\n<p>这一点在电子商务中极为重要。</p>\n</div>\n<h2 id=\"可用性availability\"><a class=\"anchor\" href=\"#可用性availability\">#</a> 可用性（Availability）</h2>\n<div class=\"note primary no-icon\">\n<p>保证信息与信息系统可被授权者<strong>在需要的时候能够访问和使用</strong>。</p>\n</div>\n<h2 id=\"可靠性reliability\"><a class=\"anchor\" href=\"#可靠性reliability\">#</a> 可靠性（Reliability）</h2>\n<div class=\"note primary no-icon\">\n<p>保证信息系统为合法用户提供<strong>稳定、正确</strong>的信息服务。</p>\n</div>\n<p>注意区分可靠性与可用性，可靠性强调的是系统无故障地持续运行，而可用性关注服务总体的持续时间，高度可用的系统在任何给定的时刻都能及时地工作。</p>\n<blockquote>\n<p>博客<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zMjkyNTgyMWRiZmI=\">可用性和可靠性的区别</span> 提到了一个例子，如果系统在每小时崩溃 1ms，那么它的可用性就超过 99.9999%，但是它还是高度不可靠，因为它只能无故障运行 1 小时。与之类似，如果一个系统从来不崩溃，但是每年要停机两星期，那么它是高度可靠的，但是可用性只有 96%。</p>\n</blockquote>\n<h2 id=\"可追究性accountability\"><a class=\"anchor\" href=\"#可追究性accountability\">#</a> 可追究性（Accountability）</h2>\n<div class=\"note primary no-icon\">\n<p>保证从一个实体的行为能够 <strong>唯一地追溯到该实体</strong> ，它支持不可否认、故障隔离、事后恢复、攻击阻断等应用，具有威慑作用，支持法律事务</p>\n<p>其结果可以<strong>保证一个实体对其行为负责</strong>。</p>\n</div>\n<p>!! 这个感觉就是不可否认性嘛，不过 ppt 上是这么写的就这么记吧 - -！！</p>\n<h2 id=\"可控性controlability\"><a class=\"anchor\" href=\"#可控性controlability\">#</a> 可控性（Controlability）</h2>\n<div class=\"note primary no-icon\">\n<p>指对信息和信息系统实施有效的 <strong>安全监控管理</strong>，防止非法利用信息和信息系统</p>\n</div>\n<h2 id=\"保障assurance\"><a class=\"anchor\" href=\"#保障assurance\">#</a> 保障（Assurance）</h2>\n<div class=\"note primary no-icon\">\n<p>为在具体实现和实施过程中，保密性、完整性、可用性和可追究性等得到足够满足，提供信心基础。</p>\n<p>这种信心基础主要通过 <strong>认证和认可</strong> 来实现。</p>\n</div>\n<h1 id=\"信息安全保障体系结构及信息安全防御模型\"><a class=\"anchor\" href=\"#信息安全保障体系结构及信息安全防御模型\">#</a> 信息安全保障体系结构及信息安全防御模型</h1>\n<p>信息安全保障体系包括<strong>人</strong>、<strong>政策</strong>（包括法律、法规、制度、管理) 和<strong>技术</strong>三大要素</p>\n<p>主要内涵是 <strong>实现</strong> 保密性、鉴别性、完整性、可用性等 <strong>各种安全属性</strong>。</p>\n<p>目标：<strong>保证信息和信息系统的安全性</strong>。</p>\n<p>信息安全防御模型主要有以下几步</p>\n<ol>\n<li>风险评估 (Evaluation)</li>\n<li>制定策略 (Policy)</li>\n<li>实施保护 (Protection)</li>\n<li>监测 (Detection)</li>\n<li>响应 (Reaction)</li>\n<li>恢复 (Restoration)</li>\n</ol>\n<h2 id=\"风险评估-evaluation\"><a class=\"anchor\" href=\"#风险评估-evaluation\">#</a> 风险评估 (Evaluation)</h2>\n<p>对信息系统进行全面的风险评估</p>\n<ul>\n<li>需要对信息系统应用需求、网络基础设施、外部内部环境、安全威胁、人员、政策法规、安全技术等具有全面的了解</li>\n<li>善于应用各种方法、手段、工具对系统风险进行人工和自动分析，给出全面细致的风险评估。</li>\n</ul>\n<h2 id=\"制定策略-policy\"><a class=\"anchor\" href=\"#制定策略-policy\">#</a> 制定策略 (Policy)</h2>\n<p>安全策略是安全模型的核心</p>\n<ul>\n<li>后续的 防护、检测、响应和恢复 各个阶段都是依据安全策略实施的</li>\n<li>安全策略为安全管理提供管理方向和支持手段</li>\n<li>策略体系的建立包括 安全策略的<strong>制订</strong>、<strong>评估</strong>、<strong>执行</strong>等</li>\n</ul>\n<h2 id=\"实施保护-protection\"><a class=\"anchor\" href=\"#实施保护-protection\">#</a> 实施保护 (Protection)</h2>\n<p>采用一切可能的方法、技术和手段防止信息及信息系统遭受安全威胁，减少和降低遭受入侵和攻击的可能</p>\n<p><strong>实现保密性、完整性、可用性、可控性和不可否认性等安全属性。</strong></p>\n<ul>\n<li>提高边界防御能力</li>\n<li>信息处理环节的保护</li>\n<li>信息传输保护</li>\n</ul>\n<h2 id=\"监测-detection\"><a class=\"anchor\" href=\"#监测-detection\">#</a> 监测 (Detection)</h2>\n<p>在系统实施保护之后根据安全策略对信息系统实施监控和检测</p>\n<ul>\n<li>对 <strong>系统运行状态</strong> 进行监视和控制，发现异常，并可能作出 <strong>动态调整</strong></li>\n<li>对已部署的系统及其安全防护进行检查测量</li>\n<li>是动态响应和加强防护的依据，是强制落实安全策略的手段</li>\n</ul>\n<h2 id=\"响应-reaction\"><a class=\"anchor\" href=\"#响应-reaction\">#</a> 响应 (Reaction)</h2>\n<p>已知一个攻击 (入侵) 事件发生之后所进行的处理</p>\n<ul>\n<li>把系统调整到安全状态</li>\n<li>对于危及安全的事件、行为、过程，及时做出处理</li>\n<li>杜绝危害进一步扩大，力求系统保持提供正常的服务。</li>\n</ul>\n<h2 id=\"恢复-restoration\"><a class=\"anchor\" href=\"#恢复-restoration\">#</a> 恢复 (Restoration)</h2>\n<p>恢复可以分为 <strong>系统恢复</strong> 和 <strong>信息恢复</strong> 。</p>\n<ul>\n<li>系统恢复是指修补安全事件所利用的系统缺陷，如 <strong>系统升级</strong>、<strong>软件升级</strong> 和 <strong>打补丁</strong> 等方法<strong>去除系统漏洞或后门</strong>。</li>\n<li>信息恢复是指<strong>恢复丢失的数据</strong>。</li>\n</ul>\n<p>恢复完重新进行风险评估，如此循环</p>\n<h1 id=\"风险评估与等级保护\"><a class=\"anchor\" href=\"#风险评估与等级保护\">#</a> 风险评估与等级保护</h1>\n<h2 id=\"等级保护\"><a class=\"anchor\" href=\"#等级保护\">#</a> 等级保护</h2>\n<p>GB17859-1999《计算机信息系统安全保护等级划分准则》</p>\n<ol>\n<li>第一级：用户自主保护级（相当于 C1 级）</li>\n<li>第二级：系统审计保护级（相当于 C2 级）</li>\n<li>第三级：安全标记保护级（相当于 B1 级）</li>\n<li>第四级：结构化保护级（相当于 B2 级）</li>\n<li>第五级：访问验证保护级（相当于 B3-A1 级）</li>\n</ol>\n<h2 id=\"信息安全技术原则\"><a class=\"anchor\" href=\"#信息安全技术原则\">#</a> 信息安全技术原则</h2>\n<h3 id=\"最小化原则\"><a class=\"anchor\" href=\"#最小化原则\">#</a> 最小化原则</h3>\n<p><strong>受保护的敏感信息</strong> 只能在<strong>一定范围</strong>内被共享</p>\n<blockquote>\n<p>履行工作职责和职能的安全主体，在法律和相关安全策略允许的前提下，为满足工作需要而被授予其访问信息的适当权限，称为最小化原则。</p>\n</blockquote>\n<h3 id=\"分权制衡原则\"><a class=\"anchor\" href=\"#分权制衡原则\">#</a> 分权制衡原则</h3>\n<p>在信息系统中，对所有权限应该进行适当地划分</p>\n<ul>\n<li>每个授权主体只能拥有其中的<strong>一部分权限</strong></li>\n<li>使他们之间<strong>相互制约</strong>、相互监督，共同保证信息系统的安全。</li>\n<li>如果 — 个授权主体分配的权限过大，无人监督和制约，就隐含了滥用权力的安全隐患。</li>\n</ul>\n<h3 id=\"安全隔离原则\"><a class=\"anchor\" href=\"#安全隔离原则\">#</a> 安全隔离原则</h3>\n<p>将信息的主体与客体分离，按照一定的安全策略，在可控和安全的前提下实施主体对客体的访问。</p>\n<h1 id=\"密码技术基本概念及基本术语\"><a class=\"anchor\" href=\"#密码技术基本概念及基本术语\">#</a> 密码技术基本概念及基本术语</h1>\n<h2 id=\"密码技术基本概念\"><a class=\"anchor\" href=\"#密码技术基本概念\">#</a> 密码技术基本概念</h2>\n<blockquote>\n<p>参考博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MTM5MDQ1L2FydGljbGUvZGV0YWlscy8xMDMxNTMxNzI=\">密码安全之古典密码、对称密码</span><br />\n<strong>古典密码</strong>侧重于<strong>加密算法</strong>的精心设计与保密性，而<strong>现代密码</strong>侧重于<strong>对密钥的保密</strong>，公开加密所用的算法。<br />\n现代密码再以密钥细分就会分为对称加密和非对称加密。<strong>对称加密</strong>，就是<strong>加密时和解密时的密钥是一样的</strong>；而<strong>非对称加密</strong>则是加密密钥和解密<strong>密钥不同</strong>。</p>\n</blockquote>\n<h3 id=\"古典密码\"><a class=\"anchor\" href=\"#古典密码\">#</a> 古典密码</h3>\n<p>置换密码 or 替代密码</p>\n<p>置换密码顾名思义，就是单纯的置换明文为密文</p>\n<p>凯撒密码即为典型的替代法加密，可以被轻易破解</p>\n<p>详见下一章的复习。</p>\n<h3 id=\"现代密码\"><a class=\"anchor\" href=\"#现代密码\">#</a> 现代密码</h3>\n<ul>\n<li>1949 年香农发表论文《保密系统的通信理论》标志着现代密码学的诞生</li>\n</ul>\n<h3 id=\"常用术语\"><a class=\"anchor\" href=\"#常用术语\">#</a> 常用术语</h3>\n<p>数据保密通信系统的有关术语如下：</p>\n<ul>\n<li><strong>明文 (Plain text)</strong>：需要安全保护的原始信息 / 数据，常记为  <code>m</code>  。所有明文构成 <strong>明文空间</strong>，常记为  <code>M</code> 。</li>\n<li><strong>密文 (Cipher text)</strong>：原始数据经加密变换得到的数据，常记为  <code>c</code> 。所有密文构成 <strong>密文空间</strong>，常记为  <code>C</code> 。</li>\n<li><strong>加密 (Encryption)</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><msub><mi>E</mi><mrow><mi>k</mi><mn>1</mn></mrow></msub><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c=E_{k1}(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><strong>解密 (Decryption)</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><msub><mi>D</mi><mrow><mi>k</mi><mn>2</mn></mrow></msub><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m=D_{k2}(c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><strong>密钥 (Key)</strong>：用于加解密的秘密信息。所有密钥构成 <strong>密钥空间</strong>，常记为  <code>K</code> 。</li>\n<li><strong>公众信道</strong>：数据公开传递的信道，也称公共信道。</li>\n<li><strong>秘密信道</strong>：代指安全信道，用于<strong>传递密钥</strong>。</li>\n</ul>\n<p><strong>密码体制 (Cipher System)</strong></p>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>∈</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">m∈M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>、 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>k</mi><mn>2</mn><mo>∈</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">k1,k2∈K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>，有五元组（ <code>M,C,K,E,D</code> ）称为一个密码体制，其中 <code>E</code>  和  <code>D</code>  代表<strong>密码算法</strong>：具体的变换过程或数学方法。</p>\n<ul>\n<li>加密可以看做是 <strong>将密钥与明文混合变换</strong> 的过程</li>\n<li>解密是 <strong>从密文中剥离密钥</strong> 的过程，因此也称脱密过程。</li>\n</ul>\n<blockquote>\n<p>Kerchhoffs 假设 <br />\n一个密码体制，对于所有密钥，加密和解密算法迅速有效。<br />\n密码体制的 <strong>安全性</strong> 不应该依赖于算法的保密，而<strong>仅依赖密钥的保密</strong>。</p>\n</blockquote>\n<h1 id=\"对称密码体制与公钥密码体制\"><a class=\"anchor\" href=\"#对称密码体制与公钥密码体制\">#</a> 对称密码体制与公钥密码体制</h1>\n<p>对称密钥密码体制：加密与解密使用相同密钥 (单钥)<br />\n 公钥密码体制：加密与解密使用不同密钥 (双钥)</p>\n<h2 id=\"对称密码体制\"><a class=\"anchor\" href=\"#对称密码体制\">#</a> 对称密码体制</h2>\n<h3 id=\"基本特点\"><a class=\"anchor\" href=\"#基本特点\">#</a> 基本特点</h3>\n<ul>\n<li>单钥：加密与解密使用相同密钥</li>\n<li>依赖关系：加密密钥与解密密钥 <strong>存在明显的依赖关系</strong>，由其中一个可以很容易推导出另一个。</li>\n<li>共享密钥：对称密码体制多使用同一个密钥加密和解密，称为 <strong>加解密双方共享密钥</strong>。</li>\n<li>通过安全信道传递密钥</li>\n</ul>\n<p>对称密码体制分类如下：</p>\n<ul>\n<li>分组密码 (Block cipher)</li>\n<li>序列密码 (Sequential cipher)</li>\n</ul>\n<h3 id=\"分组密码-block-cipher\"><a class=\"anchor\" href=\"#分组密码-block-cipher\">#</a> 分组密码 (Block cipher)</h3>\n<ol>\n<li>分组</li>\n<li>对每个分组进行加密</li>\n<li>得到登场的密文分组</li>\n</ol>\n<p>先将明文划分成若干等长的块分组，如每个分组长 64 比特、128 比特，然后再分别对每个分组进行加密，得到等长的密文分组。</p>\n<p>解密过程也类似。有些密码体制解密算法与加密算法完全一样，如 <code>DES</code>  等。</p>\n<p><strong>分组密码设计的两个思想如下：</strong></p>\n<p><strong>扩散 (Diffusion)</strong></p>\n<ul>\n<li>将明文及密钥的影响尽可能迅速地<strong>散布到较多的输出密文中</strong></li>\n<li>典型操作就是 <strong>置换 (如重排字符顺序）</strong></li>\n</ul>\n<p><strong>混淆 (Confusion)</strong></p>\n<ul>\n<li>使作用于明文的密钥和密文之间的关系<strong>复杂化</strong></li>\n<li>使明文和密文、密文和密钥之间的<strong>统计相关性极小化</strong>，从而使统计分析攻击不能奏效。</li>\n<li>混淆通常采用 <strong>代换</strong></li>\n</ul>\n<h3 id=\"序列密码-sequential-cipher\"><a class=\"anchor\" href=\"#序列密码-sequential-cipher\">#</a> 序列密码 (Sequential cipher)</h3>\n<ol>\n<li>通过 <strong>密钥种子</strong> 生成任意长度的字节流（随机序列）</li>\n<li>将生成的随机序列 <strong>按位或按字节</strong> 与明文进行混合（异或等）</li>\n<li>得到密文序列</li>\n</ol>\n<p>把明文以位或字节为单位进行加密，一般是与密钥（由密钥种子产生的任意长度的字节流）进行混合（如异或）获得密文序列。也称 <strong>流密码 (Stream cipher)</strong>。</p>\n<h3 id=\"feistel网络结构\"><a class=\"anchor\" href=\"#feistel网络结构\">#</a> Feistel 网络结构</h3>\n<p>分组密码一般采用 <strong>多轮相同的迭代操作</strong>（轮操作），从而实现明文与密钥充分地混淆和扩散。</p>\n<ul>\n<li>许多分组密码体制采用了 Feistel 网络结构。</li>\n<li>Feistel 结构保证无论 <strong>轮函数  <code>F</code> </strong> 是一个如何复杂的变换过程，都 <strong>不影响加密与解密过程的一致性</strong>，实现<strong>加密过程的可逆性</strong></li>\n<li><strong>轮函数 <code>F</code> </strong> 具有良好的非线性性，增加密码分析的难度。</li>\n<li>分组密码通过多轮处理增加了混淆效果，<strong>每一轮使用不同的轮密钥</strong>（由初始密钥扩展得到)。</li>\n</ul>\n<p>依据 Feistel 结构作为基本结构的有 <code>DES</code> 、 <code>RC6</code> 、 <code>MARS</code>  等加密算法。</p>\n<p>推荐阅读：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fwb2xsb25fa3JqL2FydGljbGUvZGV0YWlscy83NTAxNDIxOA==\">Feistel 网络结构与 DES 加密算法的框架简单分析</span></p>\n<h2 id=\"公钥密码体制\"><a class=\"anchor\" href=\"#公钥密码体制\">#</a> 公钥密码体制</h2>\n<h3 id=\"基本特点-2\"><a class=\"anchor\" href=\"#基本特点-2\">#</a> 基本特点</h3>\n<ul>\n<li>双钥：加密与解密使用不同密钥</li>\n<li>算法：陷门单向函数</li>\n<li>依赖某个特殊的数学问题（大数分解、离散对数等）</li>\n</ul>\n<p>公钥密码体制有两个完全不同的密钥，而且其中一个可以公开（公钥，常用于加密），另一个需要保密（私钥，常用于解密）</p>\n<p>公钥密码的算法是一种 <strong>陷门单向函数 <code>f</code> </strong> :</p>\n<ul>\n<li>对 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> 定义域中的 <strong>任意  <code>x</code> </strong> 都 <strong>易于计算</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>对 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> 值域中 <strong>几乎所有  <code>y</code> </strong>，即使  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> 已知，要计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 也是不可行的</li>\n<li>当给定某些辅助信息（陷门〉时才易于计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>此时称 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> 是一个 <strong>陷门单向函数</strong>，辅助信息 (陷门信息) 作为秘密密钥。</p>\n<p>公钥密码体制一般要借助某个特殊的数学问题，如数论中的大数分解、离散对数等数学难解问题，<strong>构造单向函数</strong>，因此，这类密码的<strong>安全强度取决于它所依据的问题的计算复杂度</strong>。</p>\n<p>目前的公钥密码体制主要有两类:</p>\n<ul>\n<li>基于 <strong>大整数因子分解问题</strong> 的公钥密码体制，如  <code>RSA</code>  体制</li>\n<li>基于 <strong>离散对数问题</strong> 的公钥密码体制，如  <code>EIGmal</code>  密码体制、椭圆曲线密码体制。</li>\n</ul>\n<h1 id=\"数字签名技术及其特性\"><a class=\"anchor\" href=\"#数字签名技术及其特性\">#</a> 数字签名技术及其特性</h1>\n<h3 id=\"什么是数字签名\"><a class=\"anchor\" href=\"#什么是数字签名\">#</a> 什么是数字签名</h3>\n<p>一个假想的例子如下</p>\n<p>路人甲要通过网络传输一份文档给路人乙，乙接收到这份文档后:</p>\n<ul>\n<li>乙能确认这份文档的 <strong>真实性</strong> 吗？（<ins class=\"wavy\">确实来自于甲，而不是其他人冒充甲发送的</ins>）</li>\n<li>乙能确定这份文档的 <strong>正确性</strong> 吗？（<ins class=\"wavy\">在传输过程中没有被篡改</ins>）？</li>\n<li>甲如果否认曾经发送过该文档怎么办？ <strong>不可否认性</strong>（<ins class=\"wavy\">实际上确实是甲发送的</ins>）</li>\n</ul>\n<p>这就需要数字签名：</p>\n<ul>\n<li>数字签名必须使用某些 <strong>对于签名者来讲具有唯一性</strong> 的信息，以 <strong>防止其伪造和否认</strong>。</li>\n<li>数字签名的 <strong>生成与验证</strong> 都必须是 <strong>相对容易</strong> 的，且在出现纠纷时可通过 <strong>可信的第三方</strong> TTP 仲裁 。</li>\n<li>公钥密码技术为数字签名提供了理论依据:\n<ul>\n<li>公钥密码体制中的私钥是<strong>私有</strong>的、<strong>保密</strong>的，其他人无法获得，可作为持有者的<strong>唯一性信息</strong></li>\n</ul>\n</li>\n</ul>\n<p>数字签名机制使用公钥密码技术，使 <strong>消息接收者</strong> <strong>相信</strong> 收到的消息来自声称的 <strong>消息发送者</strong>（消息主体的识别与鉴别 ——<strong> 鉴别性保护</strong>），并<strong>信任该消息</strong>（消息被正确地传递，没有被篡改 ——<strong> 完整性保护</strong>)，同时<strong>消息签名者不能否认签发了该消息</strong>（<strong>不可否认性保护</strong>)。</p>\n<p>也就是说，数字签名可以实现 3 个安全属性的保护</p>\n<ul>\n<li>鉴别性：实体和消息的真实性认证</li>\n<li>完整性</li>\n<li>不可否认性</li>\n</ul>\n",
            "tags": [
                "笔记",
                "CS基础",
                "信息安全概论"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/back-end/go_learning_3/",
            "url": "https://ysx.cosine.ren/back-end/go_learning_3/",
            "title": "Go语言初上手（三）编码规范与性能优化 | 青训营",
            "date_published": "2022-05-12T12:44:01.000Z",
            "content_html": "<p>本节课讲了如何写出更简洁清晰的代码，每种语言都有自己的特性，也有自己独特的代码规范，对于 Go 来说，有哪些性能优化的手段、趁手的工具，也都进行了介绍。</p>\n<p>高质量代码需要具备正确可靠、简洁清晰的特性</p>\n<ul>\n<li>正确性：各种边界条件是否考虑完备、错误的调用能否被处理</li>\n<li>可靠性：异常情况或错误处理明确，依赖的服务异常能够及时处理</li>\n<li>简洁：逻辑是否简单、后续新增功能是否能够快速支持</li>\n<li>清晰可读：其他人阅读理解代码时是否能清楚明白、重构时是否不会担心出现无法预料的情况<br />\n而这就需要编码规范。</li>\n</ul>\n<h1 id=\"编码规范\"><a class=\"anchor\" href=\"#编码规范\">#</a> 编码规范</h1>\n<h2 id=\"格式化工具\"><a class=\"anchor\" href=\"#格式化工具\">#</a> 格式化工具</h2>\n<p>提到编码规范就不得不提到代码格式化工具，推荐使用 Go 官方提供的格式化工具  <code>gofmt</code> ，Goland 中内置了其功能，常见的 IDE 也都能方便的配置</p>\n<ul>\n<li>另一个工具是  <code>goimports</code> ，相当于  <code>gofmt</code>  加上依赖包的管理，自动增删依赖的包。</li>\n</ul>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07f5cc789bcc4526a35da211cf843a89~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" /></p>\n<blockquote>\n<p>js 中也有类似的格式化工具  <code>Prettier</code> ，可以配合 ESLint 进行代码格式化。</p>\n</blockquote>\n<h2 id=\"注释规范\"><a class=\"anchor\" href=\"#注释规范\">#</a> 注释规范</h2>\n<p>好的注释需要</p>\n<ul>\n<li>\n<p>解释代码作用</p>\n</li>\n<li>\n<p>解释复杂、不明显的逻辑</p>\n</li>\n<li>\n<p>解释代码实现的原因（这些因素脱离上下文后很难理解）</p>\n</li>\n<li>\n<p>解释代码什么情况会出错（解释一些限制条件）</p>\n</li>\n<li>\n<p>解释公共符号的注释（包中声明的每个公共的符号：变量、常量、函数以及结构等）</p>\n<ul>\n<li>例外：不需要注释实现接口的方法</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Google Style 指南中有两条规则：</p>\n<ul>\n<li>任何既不明显也不简短的 <strong>公共功能</strong> 必须予以注释。</li>\n<li>无论长度或复杂程度如何，对 <strong>库</strong> 中的任何函数都必须进行注释</li>\n</ul>\n</blockquote>\n<p>而需要避免的情况如下:</p>\n<ul>\n<li>对可见名知义的函数进行啰嗦的注释</li>\n<li>对显而易见的流程进行直接翻译</li>\n</ul>\n<p>总而言之，<strong>代码是最好的注释</strong></p>\n<ul>\n<li>注释应该提供 <strong>代码未表达出的上下文信息</strong></li>\n<li>简洁清晰的代码<strong>对流程注释没有要求</strong>，但是对于为什么这么做，代码的相关背景等可以通过注释补充，提供有效信息。</li>\n</ul>\n<h2 id=\"命名规范\"><a class=\"anchor\" href=\"#命名规范\">#</a> 命名规范</h2>\n<h3 id=\"变量名\"><a class=\"anchor\" href=\"#变量名\">#</a> 变量名</h3>\n<ul>\n<li>\n<p>简洁胜于冗长</p>\n<ul>\n<li><code>i</code>  和  <code>index</code>  的作用范围，不需要  <code>index</code>  的额外冗长</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Bad</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> index <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Good</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><strong>缩略词全大写</strong>，但当其 <strong>位于变量开头且不需要导出</strong> 时，<strong>使用全小写</strong></p>\n<ul>\n<li>如使用  <code>ServeHTTP</code>  而不是  <code>ServeHttp</code></li>\n<li>使用  <code>XMLHTTPRequest</code>  或  <code>xmlHTTPRequest</code></li>\n</ul>\n</li>\n<li>\n<p>变量名距离其被使用的地方越远，则越需要携带越多的上下文信息。</p>\n<ul>\n<li>如全局变量，在其名字中需要更多的上下文信息，使得在不同地方可以轻易辨认出其含义</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Bad</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span> c <span class=\"token operator\">*</span>Client <span class=\"token punctuation\">)</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span> req <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> t time<span class=\"token punctuation\">.</span>Time <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Good</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span> c <span class=\"token operator\">*</span>Client <span class=\"token punctuation\">)</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span> req <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> deadline time<span class=\"token punctuation\">.</span>Time <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"函数命名\"><a class=\"anchor\" href=\"#函数命名\">#</a> 函数命名</h3>\n<ul>\n<li>\n<p>函数名 <strong>不携带包名的上下文信息</strong>，因为包名和函数名总是成对出现的</p>\n<ul>\n<li>如 http 包中创建服务的函数，  <code>Serve</code>  &gt;  <code>ServeHTTP</code> ，因为调用时总是 <code>http.Serve</code></li>\n</ul>\n</li>\n<li>\n<p>函数名 <strong>尽量简短</strong></p>\n</li>\n<li>\n<p>当名为  <code>foo</code>  的包某个函数返回类型  <code>T</code>  时 ( <code>T</code>  并不是  <code>Foo</code>  )，可以在函数名中加入返回的类型信息</p>\n<ul>\n<li>返回 <code>Foo</code>  类型时，可以省略而不导致歧义</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"包名\"><a class=\"anchor\" href=\"#包名\">#</a> 包名</h3>\n<ul>\n<li>只由<strong>小写字母</strong>组成。不包含大写字母和下划线等字符</li>\n<li>简短并包含一定的上下文信息。例如 <code>schema</code> 、  <code>task</code>  等</li>\n<li>不要与标准库同名。例如不要使用  <code>sync</code>  或者  <code>strings</code>  以下规则尽量满足，以标准库包名为例：</li>\n<li>不使用<strong>常用变量名</strong>作为包名。例如使用  <code>bufio</code>  而不是  <code>buf</code></li>\n<li>使用单数而不是复数。例如使用  <code>encoding</code>  而不是 `encodings``</li>\n<li>谨慎地使用缩写。例如使用  <code>fmt</code>  在不破坏上下文的情况下比  <code>format</code>  更加简短</li>\n</ul>\n<p>总的来说，好的命名降低阅读理解代码的成本，可以能让人把关注点留在主流程上，清晰地理解程序的功能，而不是频繁切换到分支细节，并且必须解释它。</p>\n<h2 id=\"控制流程\"><a class=\"anchor\" href=\"#控制流程\">#</a> 控制流程</h2>\n<ul>\n<li>\n<p>避免嵌套，保持正常流程清晰可读</p>\n<ul>\n<li>优先处理错误情况 / 特殊情况，尽早返回或继续循环来减少嵌套</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Bad</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">if</span> foo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// Good</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">if</span> foo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr></table></figure><ul>\n<li>尽量保持正常代码路径为最小缩进，减少嵌套</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Bad</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">func</span> <span class=\"token function\">OneFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       err <span class=\"token operator\">:=</span> <span class=\"token function\">doAnotherThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// normal case</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ​</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// Good</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">func</span> <span class=\"token function\">OneFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// normal case</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总而言之，程序中流程这一块处理逻辑尽量走直线，避免复杂的嵌套分支，使正常流程代码沿着屏幕向下移动。提升代码可维护性和可读性，因为故障问题大多出现在复杂的条件语句和循环语句中</p>\n<h2 id=\"错误处理\"><a class=\"anchor\" href=\"#错误处理\">#</a> 错误处理</h2>\n<ul>\n<li>\n<p>简单错误</p>\n<ul>\n<li>简单的错误指 <strong>仅出现一次</strong> 的错误，且在其他地方 <strong>不需要捕获</strong> 该错误</li>\n<li>优先使用  <code>errors.New</code>  来创建匿名变量来<strong>直接表示</strong>简单错误</li>\n<li>如果有格式化的需求，使用  <code>fmt.Errorf</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">defaultCheckRedirect</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> via <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>via<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stopped after 10 redirects\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>复杂错误：使用错误的  <code>Wrap</code>  和  <code>Unwrap</code></p>\n<ul>\n<li>错误的  <code>Wrap</code>  实际上是提供了一个  <code>error</code>  嵌套另一个  <code>error</code>  的能力，从而生成一个  <code>error</code>  的跟踪链</li>\n<li>在  <code>fmt.Errorf</code>  中使用  <code>%w</code>  关键字来将一个错误关联至错误链中</li>\n<li>使用  <code>errors.Is</code>  判定错误是否为某特定错误，可判定错误链上的所有错误（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby9ibG9iL21hc3Rlci9zcmMvZXJyb3JzL3dyYXBfdGVzdC5nbyNMMjU1\">go/wrap_test.go · golang/go</span>）</li>\n<li>使用  <code>errors.As</code>  在错误链上获取特定种类的错误，并将错误赋值给定义好的变量。（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby9ibG9iL21hc3Rlci9zcmMvZXJyb3JzL3dyYXBfdGVzdC5nbyNMMjU1\">go/wrap_test.go · golang/go</span>）</li>\n</ul>\n</li>\n</ul>\n<p>在 Go 中，比错误更严重的就是  <code>panic</code> ，它的出现表示<strong>程序无法正常工作</strong>了</p>\n<ul>\n<li>\n<p>不建议在业务代码中使用 panic</p>\n<ul>\n<li><code>panic</code>  发生后，会向上传播至调用栈顶</li>\n<li>调用函数全都不包含  <code>recover</code>  会造成<strong>整个程序崩溃</strong>。</li>\n<li>若问题可以被屏蔽或解决，建议使用  <code>error</code>  代替  <code>panic</code></li>\n</ul>\n</li>\n<li>\n<p>当程序<strong>启动阶段</strong>发生<strong>不可逆转</strong>的错误时，可以在  <code>init</code>  或  <code>main</code>  函数中使用  <code>panic</code> （<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1Nob3BpZnkvc2FyYW1hL2Jsb2IvbWFpbi9leGFtcGxlcy9jb25zdW1lcmdyb3VwL21haW4uZ28jTDk0\">sarama/main.go · Shopify/sarama</span>）</p>\n</li>\n</ul>\n<p>有 <code>painc</code> ，自然就会提到  <code>recover</code> ，如果是引入其它库的 <code>bug</code>  导致 <code>panic</code> ，影响到自身的逻辑时，就需要 recover</p>\n<ul>\n<li><code>recover</code>  只能在被  <code>defer</code>  的函数中使用，嵌套无法生效，只在当前 goroutine 生效（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby9ibG9iL21hc3Rlci9zcmMvZm10L3NjYW4uZ28jTDI0Nw==\">github.com/golang/go/b…</span>）</li>\n<li>defer 的语句是<strong>后进先出</strong>的。</li>\n<li>如果需要更多的上下文信息，可以 recover 后在 log 中记录当前的调用栈（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy93ZWJzaXRlL2Jsb2IvbWFzdGVyL2ludGVybmFsL2dpdGZzL2ZzLmdvI0wyMjg=\">github.com/golang/webs…</span>）</li>\n</ul>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<ul>\n<li><code>error</code>  要尽可能提供简明的上下文信息链，方便定位问题</li>\n<li><code>panic</code>  用于真正异常的情况</li>\n<li><code>recover</code>  生效范围，在当前 goroutine 的被  <code>defer</code>  的函数中生效</li>\n</ul>\n<h1 id=\"性能优化建议\"><a class=\"anchor\" href=\"#性能优化建议\">#</a> 性能优化建议</h1>\n<ul>\n<li><strong>前提</strong>：满足正确可靠、简洁清晰等质量因素的前提下，尽可能提高程序的效率</li>\n<li><strong>折衷</strong>：有时候时间效率和空间效率可能对立，需要分析重要程度进行适当折衷。</li>\n</ul>\n<p>针对 Go 语言特性，课上介绍了很多 Go 相关的性能优化建议：</p>\n<h2 id=\"预分配内存\"><a class=\"anchor\" href=\"#预分配内存\">#</a> 预分配内存</h2>\n<p>使用 make () 初始化切片时尽可能提供容量信息</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">PreAlloc</span><span class=\"token punctuation\">(</span>size <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    data <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> k <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       data <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是由于切片本质是一个数组片段的描述，包括数组指针、片段的长度、片段的容量 (不改变内存分配情况下的最大长度)，</p>\n<ul>\n<li>切片操作并不复制切片指向的元素</li>\n<li>创建一个新的切片会复用原来切片的底层数组 所以预先设置容量的值能够避免额外的内存分配，获得更好的性能</li>\n</ul>\n<h2 id=\"字符串处理优化\"><a class=\"anchor\" href=\"#字符串处理优化\">#</a> 字符串处理优化</h2>\n<p>使用  <code>strings.Builder</code>  常见的字符串拼接方式</p>\n<ul>\n<li>\n<p><code>+</code>  进行连接 （最慢）</p>\n</li>\n<li>\n<p><code>strings.Builder</code>  （最快）</p>\n</li>\n<li>\n<p><code>bytes.Buffer</code>  原理：字符串在 Go 语言中是<strong>不可变类型</strong>，占用内存大小是固定的</p>\n</li>\n<li>\n<p>使用 + 拼接时，生成一个新的字符串，开辟一段新空间，新空间的大小是原来两个字符串的大小之和</p>\n</li>\n<li>\n<p><code>strings.Builder</code> ， <code>bytes.Buffer</code>  的内存是以<strong>倍数</strong>申请的</p>\n</li>\n<li>\n<p><code>strings.Builder</code>  和  <code>bytes.Buffer</code>  底层都是  <code>[]byte</code>  数组</p>\n<ul>\n<li><code>bytes.Buffer</code>  转化为字符串时重新申请了一块空间存放生成的字符串变量</li>\n<li><code>strings.Builder</code>  直接将底层的  <code>[]byte</code>  转换成了字符串类型返回</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">PreStrBuilder</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> str <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> builder strings<span class=\"token punctuation\">.</span>Builder</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    builder<span class=\"token punctuation\">.</span><span class=\"token function\">Grow</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       builder<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"空结构体\"><a class=\"anchor\" href=\"#空结构体\">#</a> 空结构体</h2>\n<ul>\n<li>\n<p>空结构体  <code>struct</code>  实例<strong>不占据任何的内存空间</strong></p>\n</li>\n<li>\n<p>可作为各种场景下的占位符使用</p>\n<ul>\n<li>节省内存空间</li>\n<li>空结构体本身具备很强的语义，即这里不需要任何值，仅作为占位符</li>\n</ul>\n</li>\n<li>\n<p>如实现 Set 时，利用 map 的键，而将值设为空结构体。(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RlY2thcmVwL2dvbGFuZy1zZXQvYmxvYi9tYWluL3RocmVhZHVuc2FmZS5nbw==\">golang-set/threadunsafe...</span>)</p>\n</li>\n</ul>\n<h1 id=\"相关链接\"><a class=\"anchor\" href=\"#相关链接\">#</a> 相关链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLndvbGZvZ3JlLmNvbS9wb3N0cy9nby1wcG9mLXByYWN0aWNlLw==\">《golang pprof 实战》</span>代码实验用例： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dvbGZvZ3JlL2dvLXBwcm9mLXByYWN0aWNl\">github.com/wolfogre/go…</span></li>\n<li>尝试使用 test 命令，编写并运行简单测试 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5kZXYvZG9jL3R1dG9yaWFsL2FkZC1hLXRlc3Q=\">go.dev/doc/tutoria…</span></li>\n<li>尝试使用 -bench 参数，对编写的函数进行性能测试，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wa2cuZ28uZGV2L3Rlc3RpbmcjaGRyLUJlbmNobWFya3M=\">pkg.go.dev/testing#hdr…</span></li>\n<li>Go 代码 Review 建议 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby93aWtpL0NvZGVSZXZpZXdDb21tZW50cw==\">github.com/golang/go/w…</span></li>\n<li>Uber 的 Go 编码规范，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ViZXItZ28vZ3VpZGU=\">github.com/uber-go/gui…</span></li>\n</ul>\n<h1 id=\"总结及心得\"><a class=\"anchor\" href=\"#总结及心得\">#</a> 总结及心得</h1>\n<p>本节课介绍了 Go 乃至其他语言中常见的代码规范，提出了 Go 语言中相关的性能优化建议。后续还进行了性能优化的实战练习，使用 pprof 工具进行。</p>\n<blockquote>\n<p>笔记内容来源于第三届青训营张雷老师的课程《高质量编程与性能调优实战》<br />\n课程资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDkzNzIxODc5NDYyMDE5MTAyLyNoZWFkaW5nLTE2\">【Go 语言原理与实践学习资料（上）】第三届字节跳动青训营 - 后端专场</span></p>\n</blockquote>\n",
            "tags": [
                "笔记",
                "青训营笔记",
                "后端",
                "Go"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/back-end/go_learning_2/",
            "url": "https://ysx.cosine.ren/back-end/go_learning_2/",
            "title": "Go语言初上手（二） 工程实践 | 青训营",
            "date_published": "2022-05-08T15:44:01.000Z",
            "content_html": "<h1 id=\"并发编程\"><a class=\"anchor\" href=\"#并发编程\">#</a> 并发编程</h1>\n<ul>\n<li>\n<p><strong>并发</strong> 是多线程程序在一个核的 cpu 上运行<br />\n<img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a70946937e54495499958900ad320e99~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p><strong>并行</strong> 是多线程程序在多个核的上运行<br />\n<img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4a9265f431c442a84b7012ac324c697~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>Go 可以充分发挥多核优势，高效运行<br />\n一个重要概念</p>\n</li>\n</ul>\n<h2 id=\"协程\"><a class=\"anchor\" href=\"#协程\">#</a> 协程</h2>\n<ul>\n<li>协程的开销比线程小，可以理解为轻量级的线程，一个 Go 程序中可以创建上万个协程。</li>\n</ul>\n<p>Go 中 <strong>开启协程</strong> 非常简单，在函数前面增加一个  <code>go</code>  关键字就可以为一个函数开启一个协程。</p>\n<h2 id=\"csp-与-channel\"><a class=\"anchor\" href=\"#csp-与-channel\">#</a> CSP 与 Channel</h2>\n<p>CSP(Communicating Sequential Process)</p>\n<p>Go 中提倡通过 <strong>通信共享内存</strong> 而不是通过共享内存而实现通信</p>\n<p>那么如何通信呢，通过  <code>channel</code></p>\n<h3 id=\"channel\"><a class=\"anchor\" href=\"#channel\">#</a> Channel</h3>\n<p>语法：  <code>make(chan 元素类型, [缓冲大小])</code></p>\n<ul>\n<li>无缓冲通道  <code>make(chan int)</code></li>\n<li>有缓冲通道  <code>make(chan int, 2)</code> <br />\n 这个图就非常的生动形象～<br />\n<img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f103155c3ea8443a98bc54595e52cbfd~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></li>\n</ul>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7f6b92f7e344344a25b8fee23707079~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>以下是一个例子：</p>\n<ul>\n<li>第一个协程 作为生产者发送 <code>0~9</code>  到  <code>src</code>  中</li>\n<li>第二个协程 作为消费者计算  <code>src</code>  中每个数的平方发送到  <code>dest</code>  中</li>\n<li>主线程输出  <code>dest</code>  中每个数</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CalSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   src <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   dest <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 消费者 带缓冲解决生产者太快的问题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>               <span class=\"token comment\">// 该线程发送 0~9 至 src 中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token comment\">//defer 表示延迟到函数结束时执行 用于释放已分配的资源。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token comment\">// &lt;- 运算符 左侧为收集数据的一方 右侧为要传的数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         src <span class=\"token operator\">&lt;-</span> i</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 立即执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> src <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         dest <span class=\"token operator\">&lt;-</span> i <span class=\"token operator\">*</span> i</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> dest <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 其他复杂操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token function\">CalSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到每次都会是顺序输出，代表着 Go 是 <strong>并发安全的</strong></p>\n<p>Go 语言也保留了共享内存的做法，使用 sync 进行同步，如下</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">\"sync\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   x    <span class=\"token builtin\">int64</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   lock sync<span class=\"token punctuation\">.</span>Mutex</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">addWithLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//x 加到 2000 使用锁则很安全</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      x <span class=\"token operator\">+=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      x <span class=\"token operator\">-=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">addWithoutLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不使用锁</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      x <span class=\"token operator\">+=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      x <span class=\"token operator\">-=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">go</span> <span class=\"token function\">addWithoutLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 休眠 1s</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WithoutLock x =\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">go</span> <span class=\"token function\">addWithLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 休眠 1s</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WithLock x =\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ps：试了好多次都没冲突，乐。把运算稍微改复杂一点就有冲突了</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e6a09747944a53be508927a76745ef~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<h1 id=\"依赖管理\"><a class=\"anchor\" href=\"#依赖管理\">#</a> 依赖管理</h1>\n<p>任何大型项目开发都绕不开依赖管理，Go 中的依赖主要经历了 GOPATH -&gt; Go Vendor -&gt; Go Module 的演变 而现在主要采用 Go Module 的方式</p>\n<ul>\n<li>不同环境依赖的版本不同，所以如何控制依赖库的版本？</li>\n</ul>\n<h2 id=\"gopath\"><a class=\"anchor\" href=\"#gopath\">#</a> GOPATH</h2>\n<ul>\n<li>项目代码直接依赖 src 下的代码</li>\n<li>通过  <code>go get</code>  下载最新版本的包到 src 目录下</li>\n</ul>\n<p>这样的话，就会出现一个问题：无法实现多版本的控制（A、B 依赖于同一个包的不同版本，寄）</p>\n<h2 id=\"go-vender\"><a class=\"anchor\" href=\"#go-vender\">#</a> Go Vender</h2>\n<ul>\n<li>项目目录下新增  <code>vendor</code>  文件，所有依赖包副本形式放在其中</li>\n<li>通过 vendor =&gt; GOPATH 的方式曲线救国</li>\n</ul>\n<p>ps：感觉挺像前端的 package.json…… 依赖问题真是绕不过去</p>\n<p>这又产生了新的问题：</p>\n<ul>\n<li>无法控制依赖的版本</li>\n<li>更新项目时可能出现依赖冲突，从而导致编译出错</li>\n</ul>\n<h2 id=\"go-module\"><a class=\"anchor\" href=\"#go-module\">#</a> Go Module</h2>\n<ul>\n<li>通过  <code>go.mod</code>  文件管理依赖包版本</li>\n<li>通过  <code>go get/go mod</code>  指令工具管理依赖包</li>\n</ul>\n<p>达成了终极目标：既能定义版本规则，又能管理项目依赖关系</p>\n<p>可以类比一下 Java 中的 Maven</p>\n<h2 id=\"依赖配置-gomod\"><a class=\"anchor\" href=\"#依赖配置-gomod\">#</a> 依赖配置  <code>go.mod</code></h2>\n<p>依赖标识语法：模块路径 + 版本来进行唯一标识</p>\n<p><code>[Module Path][Version/Pseudo-version]</code></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module example<span class=\"token operator\">/</span>project<span class=\"token operator\">/</span>app     依赖管理基本单元</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">go</span> <span class=\"token number\">1.16</span>     原生库</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>require <span class=\"token punctuation\">(</span>    单元依赖</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    example<span class=\"token operator\">/</span>lib1 v1<span class=\"token punctuation\">.</span><span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    example<span class=\"token operator\">/</span>lib2 v1<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span> <span class=\"token comment\">// indirect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    example<span class=\"token operator\">/</span>lib3 v0<span class=\"token punctuation\">.</span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span><span class=\"token number\">20190725025543</span><span class=\"token operator\">-</span>5a5fe074e612</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    example<span class=\"token operator\">/</span>lib4 v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span><span class=\"token operator\">-</span><span class=\"token number\">20180306012644</span><span class=\"token operator\">-</span>bacd9c7ef1dd <span class=\"token comment\">// indirect</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    example<span class=\"token operator\">/</span>lib5<span class=\"token operator\">/</span>v3 v3<span class=\"token punctuation\">.</span><span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    example<span class=\"token operator\">/</span>lib6 v3<span class=\"token punctuation\">.</span><span class=\"token number\">2.0</span><span class=\"token operator\">+</span>incompatible</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如上，需要注意的是：</p>\n<ul>\n<li>主版本 2 + 的模块会在路径后增加 /vN 后缀</li>\n<li>对于没有 go.mod 文件且主版本 2 + 的依赖，会  <code>+incompatible</code> <br />\n 依赖的版本规则分为语义化版本和基于 commit 的伪版本</li>\n</ul>\n<h3 id=\"语义化版本\"><a class=\"anchor\" href=\"#语义化版本\">#</a> 语义化版本</h3>\n<p>格式为： <code>$&#123;MAJOR&#125;.$&#123;MINOR&#125;.$&#123;PATCH&#125;</code>  V1.3.0、V2.3.0、 ……</p>\n<ul>\n<li>不同的  <code>MAJOR</code>  版本表示是<strong>不兼容的 API</strong>\n<ul>\n<li>即使是同一个库，MAJOR 版本不同也会被认为是不同的模块</li>\n</ul>\n</li>\n<li><code>MINOR</code>  版本通常是<strong>新增函数或功能</strong>，<strong>向后兼容</strong></li>\n<li>而  <code>PATCH</code>  版本一般是 <strong>修复  <code>bug</code> </strong></li>\n</ul>\n<h3 id=\"基于commit的版本\"><a class=\"anchor\" href=\"#基于commit的版本\">#</a> 基于 commit 的版本</h3>\n<p>格式为： <code>$&#123;vx.0.0-yyyymmddhhmmss-abcdefgh1234&#125;</code></p>\n<ul>\n<li>版本前缀是和语义化版本一样的</li>\n<li>时间戳 ( <code>yyyymmddhhmmss</code> )，也就是<strong>提交  <code>Commit</code>  的时间</strong></li>\n<li>校验码 ( <code>abcdefgh1234</code> ), 12 位的哈希前缀\n<ul>\n<li>每次提交  <code>commit</code>  后 Go 都会默认生成一个伪版本号</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"小测试\"><a class=\"anchor\" href=\"#小测试\">#</a> 小测试</h2>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/837629fe64b0400d87d21752eb2f2cef~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<ol>\n<li class=\"quiz\">如果 X 项目依赖了 A、B 两个项目，且 A、B 分别依赖了 C 项目的 v1.3、v1.4 两个版本，依赖图如上，<strong>最终编译</strong>时所使用的 C 项目的版本为 <span class=\"gap\"></span> ？\n<ul class=\"options\">\n<li>v1.3</li>\n<li class=\"correct\">v1.4  </li>\n<li>A 用到 c 时用 v1.3 编译，B 用到 c 时用 v1.4 编译</li>\n</ul>\n<blockquote>\n<p>答案为：<strong>B 选择最低的兼容版本</strong> <br />\n这个是 Go 进行版本选择的算法，选择最低的兼容版本，而 1.4 版本是向下兼容 1.3 的（语义化版本）。为什么不选 1.3 呢？因为他又不会向上兼容 ovo，倘若还有 1.5 的话则不会选用 1.5，因为 1.4 就是满足要求的最低兼容版本。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"依赖分发\"><a class=\"anchor\" href=\"#依赖分发\">#</a> 依赖分发</h2>\n<p>这些依赖去哪里下载呢？就是依赖分发</p>\n<p>在 github 等代码托管系统中对应仓库上下载？</p>\n<p>github 是比较常见给的代码托管系统平台，而 <code>Go Modules</code>  系统中定义的依赖，最终可以<strong>对应</strong>到多版本代码管理系统中某一项目的<strong>特定提交或版本</strong></p>\n<p>对于  <code>go.mod</code>  中定义的依赖，可以从对应仓库中下载指定软件依赖，从而完成依赖分发。</p>\n<p>问题也有：</p>\n<ul>\n<li><strong>无法保证构建确定性</strong>\n<ul>\n<li>软件作者直接修改软件版本，导致下次构建使用其他版本的依赖，或者找不到依赖版本</li>\n</ul>\n</li>\n<li><strong>无法保证依赖可用性</strong>\n<ul>\n<li>软件作者直接代码平台删除软件，导致依赖不可用</li>\n</ul>\n</li>\n<li><strong>增加第三方代码托管平台压力</strong>。</li>\n</ul>\n<p>通过 Proxy 方式来解决以上问题</p>\n<p><code>Go Proxy</code>  是一个服务站点，它会<strong>缓存源站中的软件内容</strong>，缓存的软件版本不会改变，并且<strong>在源站软件删除之后依然可用</strong></p>\n<p>使用 Go Proxy 之后，构建时会直接从 Go Proxy 站点拉取依赖。</p>\n<p>Go Modules 通过 <strong> <code>GOPROXY</code>  环境变量</strong>控制如何使用  <code>Go Proxy</code></p>\n<p>服务站点 URL 列表，direct 表示源站： <code>GOPROXY=&quot;https://proxy1.cn, https://proxy2.cn,direct&quot;</code></p>\n<ul>\n<li>GOPROXY 是一个 <strong>Go Proxy 站点 URL 列表</strong>，可以使用  <code>direct</code>  表示源站。整体的依赖寻址路径，会优先从  <code>proxy1</code>  下载依赖，如果  <code>proxy1</code>  不存在，就下到  <code>proxy2</code>  寻找，如果 <code>proxy2</code>  也不存在则会<strong>回源</strong>到源站直接下载依赖，缓存到  <code>proxy</code>  站点中。</li>\n</ul>\n<h2 id=\"工具\"><a class=\"anchor\" href=\"#工具\">#</a> 工具</h2>\n<p><code>go get example.org/pkg</code></p>\n<table>\n<thead>\n<tr>\n<th>后缀</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@update</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>@none</td>\n<td>删除依赖</td>\n</tr>\n<tr>\n<td>@v1.1.2</td>\n<td>tag 版本，语义版本</td>\n</tr>\n<tr>\n<td>@23dfdd5</td>\n<td>特定的 commit</td>\n</tr>\n<tr>\n<td>master</td>\n<td>分支的最新 commit</td>\n</tr>\n</tbody>\n</table>\n<p><code>go mod</code></p>\n<table>\n<thead>\n<tr>\n<th>后缀</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>init</td>\n<td>初始化，创建 go.mod 文件</td>\n</tr>\n<tr>\n<td>download</td>\n<td>下载模炔到本地缓存</td>\n</tr>\n<tr>\n<td>tidy</td>\n<td>增加需要的依赖，删除不需要的依赖</td>\n</tr>\n</tbody>\n</table>\n<p>go mod tidy 可以在每次提交代码前执行一下，就可以减少构建整个项目的时间</p>\n<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<p>测试一般分为<strong>回归测试</strong>、<strong>集成测试</strong>、<strong>单元测试</strong>，从前到后<strong>覆盖率逐层变大</strong>，<strong>成本却逐层降低</strong>，所以<strong>单元测试的覆盖率</strong>一定程度上决定这代码的质量。</p>\n<ul>\n<li>回归测试一般是 QA 同学手动通过终端回归一些固定的主流程场景</li>\n<li>集成测试是对系统功能维度做测试验证</li>\n<li>单元测试测试开发阶段，开发者对单独的函数、模块做功能验证</li>\n</ul>\n<p>单元测试主要包括：<strong>输入</strong>、<strong>测试单元</strong>、<strong>输出</strong>以及<strong>校对</strong></p>\n<p>单元的概念较广，包括接口，函数，模块等，用最后的校对来保证代码的功能与我们的预期相符</p>\n<p>单元测试有以下几点好处</p>\n<ul>\n<li>保证质量\n<ul>\n<li>整体覆盖率足够时下，既保证了新功能正确性，又未破坏原有代码的正确性</li>\n</ul>\n</li>\n<li>提升效率\n<ul>\n<li>代码有 bug 的情况下，通过单测，可以在一个较短周期内定位和修复问题</li>\n</ul>\n</li>\n</ul>\n<p>Go 中的单元测试有以下规则：</p>\n<ul>\n<li>所有测试文件以  <code>_test.go</code>  结尾</li>\n<li><code>func TestXxx(testing.T)</code></li>\n<li>初始化逻辑放到  <code>TestMain</code>  函数中（测试前的数据装载配置、测试后的释放资源等）</li>\n</ul>\n<p>例子：<br />\nmain.go</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">HelloTom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"Jerry\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>main_test.go</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"testing\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">TestHelloTom</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   output <span class=\"token operator\">:=</span> <span class=\"token function\">HelloTom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   expectOutput <span class=\"token operator\">:=</span> <span class=\"token string\">\"Tom\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> expectOutput <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expect %s do not match actual %s\"</span><span class=\"token punctuation\">,</span> expectOutput<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c37e39ccecd494e8fac79eaa42c5a87~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>在实际项目中，单测覆盖率</p>\n<ul>\n<li>一般项目的要求是 50%~60% 覆盖率</li>\n<li>对于重要的资金型服务，覆盖率可能要求达到 80%</li>\n</ul>\n<p>单测需要保证<strong>稳定性</strong>和<strong>幂等性</strong></p>\n<ul>\n<li>稳定是指<strong>相互隔离</strong>，能在任何时间，任何环境，运行测试</li>\n<li>幂等是指每一次测试运行都应该产生与之前<strong>一样的结果</strong></li>\n</ul>\n<p>而要实现这一目的就要用到 <code>mock</code>  机制。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JvdWsvbW9ua2V5\">bouk/monkey: Monkey patching in Go</span></p>\n<p>monkey 是一个开源的 mock 测试库，可以对 method，或者实例的方法进行 mock，反射，指针赋值 Mockey Patch 的作用域在 Runtime，在运行时通过 Go 的 unsafe 包，能够将内存中函数 A 的地址替换为运行时函数 B 的地址，将待打桩函数的实现跳转。</p>\n<p>Go 语言还提供了基准测试框架</p>\n<ul>\n<li><strong>基准测试</strong>是指测试一段程序的运行性能及耗费 CPU 的程度。</li>\n</ul>\n<p>而我们在实际项目开发中，经常会遇到代码性能瓶颈问题，为了定位问题经常要对代码做<strong>性能分析</strong>，这就用到了基准测试。使用方法类似于单元测试</p>\n<blockquote>\n<p>提到了 <code>fastrand</code> ，地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVkYW5jZS9nb3BrZw==\">bytedance/gopkg: Universal Utilities for Go</span></p>\n</blockquote>\n<h1 id=\"总结及心得\"><a class=\"anchor\" href=\"#总结及心得\">#</a> 总结及心得</h1>\n<p>本节课主要讲了 Go 中的并发管理、依赖配置和测试，内容较多，需要好好消化。后面还有个项目实践环节，等明天在进行一个实践。</p>\n<blockquote>\n<p>本节课内容来源于第三届青训营赵征老师的课程</p>\n</blockquote>\n",
            "tags": [
                "笔记",
                "青训营笔记",
                "后端",
                "Go"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/back-end/go_learning_1/",
            "url": "https://ysx.cosine.ren/back-end/go_learning_1/",
            "title": "Go语言初上手(一) 环境配置与基础语法 | 青训营",
            "date_published": "2022-05-07T05:35:01.000Z",
            "content_html": "<p>字节第三届青训营是后端专场，开课了，高高兴兴写笔记啦<br />\n课上很详细的讲了 Go 的基本语法，以及再加上自己阅读 Go 语言圣经的一些总结，得出了这一篇文章，感觉跟 JS 和 c/c++ 还是有很多共通之处的。</p>\n<p><span id=\"more\"></span></p>\n<p>内容来源于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDIvY2gyLmh0bWw=\">Go 语言圣经</span> 以及 第三届青训营课程<br />\n课程源码 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dhbmdrZWNodW4vZ28tYnktZXhhbXBsZQ==\">wangkechun/go-by-example</span></p>\n<h1 id=\"go-语言简介及安装\"><a class=\"anchor\" href=\"#go-语言简介及安装\">#</a> Go 语言简介及安装</h1>\n<h2 id=\"什么是go语言\"><a class=\"anchor\" href=\"#什么是go语言\">#</a> 什么是 Go 语言</h2>\n<ul>\n<li>高性能、高并发</li>\n<li>丰富的标准库</li>\n<li>完善的工具链</li>\n<li>静态链接</li>\n<li>快速编译</li>\n<li><strong>跨平台</strong></li>\n<li><strong>垃圾回收</strong></li>\n</ul>\n<p>总而言之，兼顾 c/c++ 的性能，并具有 python 等语言的简洁、完善的标准库</p>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<blockquote>\n<ol>\n<li>访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5kZXYv\">https://go.dev/</span> ，点击 Download ，下载对应平台安装包，安装即可</li>\n<li>如果无法访问上述网址，可以改为访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vZGw=\">https://studygolang.com/dl</span> 下载安装</li>\n<li>如果访问 github 速度比较慢，建议配置 go mod proxy，参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb3Byb3h5LmNuLw==\">https://goproxy.cn/</span> 里面的描述配置，下载第三方依赖包的速度可以大大加快</li>\n</ol>\n</blockquote>\n<h2 id=\"ide推荐\"><a class=\"anchor\" href=\"#ide推荐\">#</a> IDE 推荐</h2>\n<ul>\n<li>vscode 安装 Go 插件</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9nby8=\">GoLand</span> JetBrains 系列的新 IDE，dddd<br />\n<img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85a838397c9e4ba6a6f4338cd27138f7~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></li>\n</ul>\n<p>可以通过 Github 很方便的登录体验该课程的示例项目 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRwb2QuaW8vI2dpdGh1Yi5jb20vd2FuZ2tlY2h1bi9nby1ieS1leGFtcGxl\">Dashboard — Gitpod</span> （真好，我哭死）</p>\n<h1 id=\"基础数据类型\"><a class=\"anchor\" href=\"#基础数据类型\">#</a> 基础数据类型</h1>\n<h2 id=\"整型\"><a class=\"anchor\" href=\"#整型\">#</a> 整型</h2>\n<p>与 c++ 中类似，整型分有符号和无符号类型，有符号整数</p>\n<ul>\n<li>int8、int16、int32 和 int64</li>\n<li>对应 8 位、16 位、32 位、64 位大小的<strong>有符号整数</strong></li>\n<li>uint8、uint16、uint32 和 uint64 则对应<strong>无符号整数</strong></li>\n<li>另外的还有两种对应特定 CPU 平台<strong>机器字大小</strong>的有符号和无符号整数 <code>int</code>  和 <code>uint</code> ，其中 <code>int</code>  也是应用最广泛的数值类型，这两种类型都有同样的大小: 32 或 64bit\n<ul>\n<li>不同的编译器即使在相同的硬件平台上可能产生不同的大小。</li>\n</ul>\n</li>\n<li>Unicode 字符  <code>rune</code>  类型是和  <code>int32</code> <strong> 等价</strong>的类型，通常用于<strong>表示一个 Unicode 码点</strong>。这两个名称可以互换使用。</li>\n<li><code>byte</code>  是  <code>uint8</code>  类型的等价类型， <code>byte</code>  类型一般用于强调数值是一个原始的数据而不是一个小的整数。</li>\n<li><code>uintptr</code>  类型，<strong>没有指定具体的 bit 大小但是足以容纳指针</strong>。只有在底层编程时才需要，特别是 Go 语言和 C 语言函数库或操作系统接口相交互的地方。我们将在第十三章的 unsafe 包相关部分看到类似的例子</li>\n</ul>\n<p>可通过  <code>Printf</code>  函数的  <code>%b</code>  参数打印<strong>二进制格式</strong>的数字，用 <code>%d</code> 、 <code>%o</code>  或  <code>%x</code>  参数控制输出的进制格式，这部分与 c 中的格式化输出类似，</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"00100010\", the set &#123;1, 5&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o <span class=\"token operator\">:=</span> <span class=\"token number\">0666</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]o %#[1]o\\n\"</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"438 666 0666\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>x <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xdeadbeef</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]x %#[1]x %#[1]X\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// Output:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ascii <span class=\"token operator\">:=</span> <span class=\"token char\">'a'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>unicode <span class=\"token operator\">:=</span> <span class=\"token char\">'国'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>newline <span class=\"token operator\">:=</span> <span class=\"token char\">'\\n'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]c %[1]q\\n\"</span><span class=\"token punctuation\">,</span> ascii<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"97 a 'a'\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]c %[1]q\\n\"</span><span class=\"token punctuation\">,</span> unicode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"22269 国 ' 国 '\"</span></pre></td></tr></table></figure><p>上面的例子中，一般情况下 Printf 格式化字符串包含多个 <code>%</code>  参数时将会包含对应相同数量的额外操作数，但是  <code>%</code>  之后的 <code>[1]</code>  副词告诉 <code>Printf</code>  函数<strong>再次使用第一个操作数</strong>。</p>\n<ul>\n<li><code>%</code>  后的 <code>#</code> 副词告诉 <code>Printf</code>  在用 <code>%o</code> 、 <code>%x</code>  或  <code>%X</code>  输出时生成 <code>0</code> 、 <code>0x</code>  或 <code>0X</code>  前缀。</li>\n<li>字符使用 <code>%c</code>  参数打印，或者使用  <code>%q</code>  参数打印<strong>带单引号的字符</strong></li>\n</ul>\n<p>内置的  <code>len</code>  函数返回一个有符号的 <code>int</code> ，可以像下面例子那样处理逆序循环。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>medals <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"gold\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"silver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bronze\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>medals<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>medals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"bronze\", \"silver\", \"gold\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"浮点数\"><a class=\"anchor\" href=\"#浮点数\">#</a> 浮点数</h2>\n<p>Go 中的浮点型有  <code>float32</code>  和  <code>float64</code></p>\n<p>其范围极限值可以在 math 包找到。</p>\n<ul>\n<li>常量  <code>math.MaxFloat32</code>  表示  <code>float32</code>  能表示的最大数值，大约是  <code>3.4e38</code> ；对应的  <code>math.MaxFloat64</code>  常量大约是  <code>1.8e308</code> 。它们分别能表示的最小值近似为  <code>1.4e-45</code>  和  <code>4.9e-324</code> 。</li>\n<li>使用 <code>Printf</code>  函数的  <code>%g</code>  参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是对应表格的数据，使用  <code>%e</code> （带指数）或  <code>%f</code>  的形式打印可能更合适。所有的这三个打印形式都可以指定<strong>打印的宽度</strong>和控制<strong>打印精度</strong>。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x = %d e^x = %8.3f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// x = 0       e^x =    1.000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// x = 1       e^x =    2.718</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// x = 2       e^x =    7.389</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// x = 3       e^x =   20.086</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// x = 4       e^x =   54.598</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// x = 5       e^x =  148.413</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// x = 6       e^x =  403.429</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// x = 7       e^x = 1096.633</span></pre></td></tr></table></figure><p>math 包中除了提供大量常用的数学函数外，还提供了 IEEE754 浮点数标准中定义的特殊值的创建和测试：正无穷大和负无穷大 <code>Inf -Inf</code> ，分别用于表示太大溢出的数字和除零的结果；还有  <code>NaN</code>  非数，一般用于表示<strong>无效的除法操作结果</strong>，如 0/0 或 Sqrt (-1)</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> z <span class=\"token builtin\">float64</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>z<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span>z<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>z<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0 -0 +Inf -Inf NaN\"</span></pre></td></tr></table></figure><ul>\n<li>Go 中的  <code>NaN</code>  与 JS 中类似，跟任何数都是不相等的，包括其自身，可以用 <code>math.IsNaN</code>  用于测试一个数是否是非数  <code>NaN</code></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nan <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">NaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>nan <span class=\"token operator\">==</span> nan<span class=\"token punctuation\">,</span> nan <span class=\"token operator\">&lt;</span> nan<span class=\"token punctuation\">,</span> nan <span class=\"token operator\">></span> nan<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"false false false\"</span></pre></td></tr></table></figure><h2 id=\"复数\"><a class=\"anchor\" href=\"#复数\">#</a> 复数</h2>\n<p>Go 语言提供了两种精度的复数类型： <code>complex64</code>  和 <code>complex128</code> ，分别对应 <code>float32</code>  和 <code>float64</code>  两种浮点数精度。内置的  <code>complex</code>  函数用于构建复数，内建的  <code>real</code>  和  <code>imag</code>  函数分别返回复数的<strong>实部</strong>和<strong>虚部</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1+2i</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> y <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3+4i</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// \"(-5+10i)\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// \"-5\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// \"10\"</span></pre></td></tr></table></figure><p>如果一个浮点数面值或一个十进制整数面值后面跟着一个 i，例如 <code>3.141592i</code>  或 <code>2i</code> ，它将构成一个复数的<strong>虚部</strong>，复数的<strong>实部是 0</strong>：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1i</span> <span class=\"token operator\">*</span> <span class=\"token number\">1i</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(-1+0i)\", i^2 = -1</span></pre></td></tr></table></figure><p>一个复数常量可以正常加到另一个普通数值常量</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1i</span> <span class=\"token operator\">*</span> <span class=\"token number\">1i</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(-1+0i)\", i^2 = -1</span></pre></td></tr></table></figure><p>math/cmplx 包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(0+1i)\"</span></pre></td></tr></table></figure><h2 id=\"布尔型\"><a class=\"anchor\" href=\"#布尔型\">#</a> 布尔型</h2>\n<p><code>true</code>  or  <code>false</code> ，这一点没什么好说的。</p>\n<h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<p>Go 中的字符串类型 <code>string</code>  是 <strong>不可变字符串</strong>，与 JS 一样，与 c++ 不同。</p>\n<blockquote>\n<p>不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。同样，一个字符串 s 和对应的子字符串切片 s [7:] 的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。在这两种情况下都没有必要分配新的内存。</p>\n</blockquote>\n<p>字符串中的第  <code>i</code>  个字节并不一定是字符串的第  <code>i</code>  个字符，因为对于非 ASCII 字符的 UTF8 编码会要两个或多个字节。</p>\n<p><code>s[i:j]</code>  基于原始的  <code>s</code>  字符串的第  <code>i</code>  个字节开始到第  <code>j</code>  个字节（<strong>不包含  <code>j</code>  本身</strong>）生成一个新字符串。生成的新字符串将包含  <code>j-i</code>  个字节。</p>\n<ul>\n<li><code>i</code>  和  <code>j</code>  都可以被忽略，当它们被忽略时将采用 <code>0</code>  作为开始位置，采用 <code>len(s)</code>  作为结束的位置。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"hello, world\"</span></pre></td></tr></table></figure><p><code>+</code>  操作符将两个字符串连接构造一个新字符串：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goodbye\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"goodbye, world\"</span></pre></td></tr></table></figure><p>字符串的比较是通过逐个字节比较完成的，比较结果是字符串自然编码的顺序。</p>\n<p>Go 语言源文件总是用 UTF8 编码，并且 Go 语言的文本字符串也以 UTF8 编码的方式处理，因此我们可以将 Unicode 码点也写到字符串面值中。</p>\n<p>一个<strong>原生的字符串面值</strong>形式如下，使用反引号代替双引号。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> GoUsage <span class=\"token operator\">=</span> <span class=\"token string\">`Go is a tool for managing Go source code.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Usage:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    go command [arguments]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>...`</span></pre></td></tr></table></figure><p>在原生的字符串面值中，<strong>没有转义操作</strong>；全部的内容都是字面的意思，包含退格和换行，因此一个程序中的原生字符串面值可能跨越多行</p>\n<ul>\n<li>在原生字符串面值内部是无法直接写・反引号的，可以用八进制或十六进制转义或 +&quot;`&quot; 连接字符串常量完成）。</li>\n<li>唯一的特殊处理是会<strong>删除回车</strong>以保证在所有平台上的值都是一样的，包括那些把回车也放入文本文件的系统</li>\n</ul>\n<blockquote>\n<p>Windows 系统会把回车和换行一起放入文本文件中</p>\n</blockquote>\n<p>以下是一些字符串方法</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"strings\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ta <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"he\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"llo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"he\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"llo\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he-llo</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\">// hellohello</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// hEllo</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a-b-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// [a b c]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// hello</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// HELLO</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                   <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tb <span class=\"token operator\">:=</span> <span class=\"token string\">\"你好\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 go 语言里面的话，可以很轻松地用  <code>%v</code>  来打印<strong>任意类型的变量</strong>，而不需要区分数字字符串，也可以用  <code>%+v</code>  打印详细结果， <code>%#v</code>  则更详细。</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> point <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tx<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tn <span class=\"token operator\">:=</span> <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tp <span class=\"token operator\">:=</span> point<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello 123</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// &#123;1 2&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s=%v\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// s=hello</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=%v\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// n=123</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p=%v\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// p=&#123;1 2&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p=%+v\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// p=&#123;x:1 y:2&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p=%#v\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// p=main.point&#123;x:1, y:2&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tf <span class=\"token operator\">:=</span> <span class=\"token number\">3.141592653</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 3.141592653</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3.14</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字符串和数字转换\"><a class=\"anchor\" href=\"#字符串和数字转换\">#</a> 字符串和数字转换</h3>\n<p>go 语言当中，关于字符串和数字类型之间的转换都在  <code>strconv</code>  这个包下，这个包是 string convert 这两个单词的缩写。可以用  <code>ParseInt</code>  或者  <code>ParseFloat</code>  来解析一个字符串。也可以用 Atoi 把一个十进制字符串转成数字。可以用  <code>Itoa</code>  把数字转成字符串。</p>\n<ul>\n<li>如果输入不合法，那么这些函数都会返回 error <strong>除了 Itoa</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"strconv\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.234\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1.234</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 111</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x1000\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4096</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tn2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tn2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 strconv.Atoi: parsing \"AAA\": invalid syntax</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tn3 <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这个不返回 error</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h2>\n<p>同其他语言的常量一样，常量的值不可修改，且必须被初始化，若批量声明常量时其除第一个其他的初始化表达式可被省略，若省略则使用前面的常量表初始化表达式，如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span> <span class=\"token comment\">// approximately; math.Pi is a better approximation</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    e  <span class=\"token operator\">=</span> <span class=\"token number\">2.71828182845904523536028747135266249775724709369995957496696763</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159265358979323846264338327950288419716939937510582097494459</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    b</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    d</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"iota-常量生成器\"><a class=\"anchor\" href=\"#iota-常量生成器\">#</a>  <code>iota</code>  常量生成器</h3>\n<blockquote>\n<p>类似 c/c++ 中的枚举类型  <code>Enum</code> !!</p>\n</blockquote>\n<p>常量声明可以使用 <code>iota</code>  常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。在一个  <code>const</code>  声明语句中，在第一个声明的常量所在的行， <code>iota</code>  将会被置为  <code>0</code> ，然后在每一个有常量声明的行加一。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Weekday <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Sunday Weekday <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Monday</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Tuesday</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Wednesday</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Thursday</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Friday</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Saturday</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// Sunday 对应 0 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Monday 对应 1 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Saturday 对应 6</span></pre></td></tr></table></figure><p>也可以结合复杂的表达式使用  <code>itoa</code> ，如下例：每个常量对应表达式 <code>1 &lt;&lt; iota</code> ，是<strong>连续的 2 的幂</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Flags <span class=\"token builtin\">uint</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    FlagUp Flags <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// is up</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FlagBroadcast            <span class=\"token comment\">// supports broadcast access capability</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FlagLoopback             <span class=\"token comment\">// is a loopback interface</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    FlagPointToPoint         <span class=\"token comment\">// belongs to a point-to-point link</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    FlagMulticast            <span class=\"token comment\">// supports multicast access capability</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>FlagUp<span class=\"token punctuation\">,</span> FlagBroadcast<span class=\"token punctuation\">,</span> FlagLoopback<span class=\"token punctuation\">,</span> FlagPointToPoint<span class=\"token punctuation\">,</span> FlagMulticast<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 1 2 4 8 16</span></pre></td></tr></table></figure><h3 id=\"无类型常量\"><a class=\"anchor\" href=\"#无类型常量\">#</a> 无类型常量</h3>\n<p>许多常量并没有一个明确的基础类型。Go 的编译器为这些没有明确基础类型的数字常量提供比基础类型更高精度的算术运算；你可以认为 <strong>至少有 256bit 的运算精度</strong> 。这里有六种未明确类型的常量类型，分别是无类型的布尔型、无类型的整数、无类型的字符、无类型的浮点数、无类型的复数、无类型的字符串。</p>\n<p>只有常量可以是无类型的。当一个无类型的常量被赋值给一个变量的时候，无类型的常量将会被<strong>隐式转换</strong>为对应的类型，如果转换合法的话。</p>\n<ul>\n<li>对于<strong>没有显式类型的变量声明</strong>（包括简短变量声明），常量的形式将<strong>隐式决定</strong>变量的默认类型，\n<ul>\n<li>无类型整数常量转换为  <code>int</code> ，它的<strong>内存大小是不确定</strong>的，无类型浮点数和复数常量则转换为<strong>内存大小明确</strong>的  <code>float64</code>  和  <code>complex128</code> 。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"程序结构\"><a class=\"anchor\" href=\"#程序结构\">#</a> 程序结构</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDIvY2gyLmh0bWw=\">https://books.studygolang.com/gopl-zh/ch2/ch2.html</span></p>\n<h2 id=\"声明与变量\"><a class=\"anchor\" href=\"#声明与变量\">#</a> 声明与变量</h2>\n<h3 id=\"var\"><a class=\"anchor\" href=\"#var\">#</a> var</h3>\n<p>一般语法如下</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> 变量名 类型 <span class=\"token operator\">=</span> 表达式</pre></td></tr></table></figure><p>类型省略则根据表达式自动推导，如果表达式为空，则用 <strong>零值</strong> 初始化该变量（因此在 Go 语言中<strong>不存在未初始化的变量</strong>）</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>零值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数值</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td>布尔</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>&quot;&quot;</td>\n</tr>\n<tr>\n<td>数组或结构体等聚合类型</td>\n<td><code>nil</code></td>\n</tr>\n</tbody>\n</table>\n<p>可以在一个声明语句中同时声明一组变量，或用一组初始化表达式声明并初始化一组变量。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span>     <span class=\"token comment\">// int int int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span> <span class=\"token comment\">// bool float64 string</span></pre></td></tr></table></figure><p>一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// os.Open returns a file and an error</span></pre></td></tr></table></figure><h3 id=\"简短变量声明\"><a class=\"anchor\" href=\"#简短变量声明\">#</a> 简短变量声明  <code>:=</code></h3>\n<p>以 <code>名字 := 表达式</code> 的形式声明变量，变量的类型根据表达式来自动推导</p>\n<ul>\n<li>因为其简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。</li>\n<li>而 var 形式的声明语句往往是用于需要显式指定变量类型的地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">:=</span> <span class=\"token number\">100</span>                  <span class=\"token comment\">// int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>              <span class=\"token comment\">// int int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> boiling <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// a float64</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> names <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span></pre></td></tr></table></figure><ul>\n<li>简短变量声明语句对在同级词法域已经声明过的变量只会进行赋值行为</li>\n<li>如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量</li>\n</ul>\n<h3 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h3>\n<p>与 c 语言中类似，通过  <code>&amp;</code>  操作符取址，通过  <code>*</code>  取值</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">:=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>x         <span class=\"token comment\">// p, of type *int, points to x</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>          <span class=\"token comment\">// equivalent to x = 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"2\"</span></pre></td></tr></table></figure><p>任何类型的指针的零值都是  <code>nil</code> 。</p>\n<ul>\n<li>若 <code>p</code>  指向某个有效变量，那么  <code>p != nil</code>  测试为真。</li>\n<li>当两指针指向同一个变量或全部是  <code>nil</code>  时才相等。</li>\n</ul>\n<h3 id=\"new-函数\"><a class=\"anchor\" href=\"#new-函数\">#</a>  <code>new</code>  函数</h3>\n<p><code>new(T)</code>  将创建一个  <code>T</code>  类型的匿名变量，初始化为  <code>T类型的零值</code> ，然后返回变量地址，返回的指针类型为  <code>*T</code> 。</p>\n<ul>\n<li>Go 语言中的 <code>new</code>  是个预定义的<strong>函数</strong>，不是关键字！所以可以重新定义。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//p, *int 类型，指向匿名的 int 变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>          <span class=\"token comment\">// 设置 int 匿名变量的值为 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2\"</span></pre></td></tr></table></figure><h2 id=\"自增自减运算\"><a class=\"anchor\" href=\"#自增自减运算\">#</a> 自增 / 自减运算</h2>\n<p>自增语句 <code>i++</code>  给 <code>i</code>  加 1；这和 <code>i += 1</code>  以及 <code>i = i + 1</code>  都是等价的。对应的还有 <code>i--</code>  给 <code>i</code>  减 1。它们是<strong>语句</strong>，而不像 C 系的其它语言那样是表达式。</p>\n<ul>\n<li>所以 <code>j = i++</code>  <strong>非法</strong>，而且 ++ 和 -- 都只能放在变量名后面，因此 <code>--i</code>  也非法。</li>\n</ul>\n<h2 id=\"类型-type\"><a class=\"anchor\" href=\"#类型-type\">#</a> 类型  <code>type</code></h2>\n<p>类似于 c++ 中的 typeof 的加强版，形式如下</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> 类型名 底层类型</pre></td></tr></table></figure><p>如下，声明了两种类型： <code>Celsius</code>  和  <code>Fahrenheit</code>  分别对应不同的温度单位。</p>\n<ul>\n<li>底层数据类型决定其内部结构和表达方式</li>\n<li>它们虽然有着相同的底层类型  <code>float64</code> ，但是它们是不同的数据类型，因此它们<strong>不可以被相互比较或混在一个表达式运算。</strong></li>\n<li>类型转换不会改变值本身，但是会使它们的语义发生变化。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> Celsius <span class=\"token builtin\">float64</span>    <span class=\"token comment\">// 摄氏温度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> Fahrenheit <span class=\"token builtin\">float64</span> <span class=\"token comment\">// 华氏温度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    AbsoluteZeroC Celsius <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">273.15</span> <span class=\"token comment\">// 绝对零度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    FreezingC     Celsius <span class=\"token operator\">=</span> <span class=\"token number\">0</span>       <span class=\"token comment\">// 结冰点温度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    BoilingC      Celsius <span class=\"token operator\">=</span> <span class=\"token number\">100</span>     <span class=\"token comment\">// 沸水温度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CToF</span><span class=\"token punctuation\">(</span>c Celsius<span class=\"token punctuation\">)</span> Fahrenheit <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Fahrenheit</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">FToC</span><span class=\"token punctuation\">(</span>f Fahrenheit<span class=\"token punctuation\">)</span> Celsius <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Celsius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>比较运算符 == 和 &lt; 也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有着相同底层类型的未命名类型的值之间做比较。但是如果两个值有着不同的类型，则不能直接进行比较：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> c Celsius</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> f Fahrenheit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// \"true\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// \"true\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// compile error: type mismatch</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token function\">Celsius</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"true\"! 类型转换操作不会改变值</span></pre></td></tr></table></figure><p>命名类型还可以为该类型的值定义新的行为。这些行为表示为一组关联到该类型的函数集合，我们称为<strong>类型的方法集</strong> (在第六章会详细讲)</p>\n<p>下面的声明语句，Celsius 类型的参数 c 出现在了函数名的前面，表示声明的是 Celsius 类型的一个名叫 String 的方法，该方法返回该类型对象 c 带着 °C 温度单位的字符串：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Celsius<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g°C\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>许多类型都会定义一个 String 方法，因为当使用 fmt 包的打印方法时，将会优先使用该类型对应的 String 方法返回的结果打印</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c <span class=\"token operator\">:=</span> <span class=\"token function\">FToC</span><span class=\"token punctuation\">(</span><span class=\"token number\">212.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"100°C\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"100°C\"; no need to call String explicitly</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"100°C\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// \"100°C\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"100\"; does not call String</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"100\"; does not call String</span></pre></td></tr></table></figure><h2 id=\"循环-for\"><a class=\"anchor\" href=\"#循环-for\">#</a> 循环  <code>for</code></h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDEvY2gxLTAyLmh0bWw=\">命令行参数・Go 语言圣经</span></p>\n<p>Go 中的循环没有 while、do while 等，只有一种  <code>for</code>  循环<br />\n写法如下：</p>\n<pre><code>for initialization; condition; post &#123;\n    // zero or more statements\n&#125;\n</code></pre>\n<p>for 循环三个部分不需括号包围。<strong>大括号强制要求</strong>，左大括号必须和<em> post</em> 语句在同一行。</p>\n<ul>\n<li><code>initialization</code>  语句是可选的，在<strong>循环开始前执行</strong>。 <code>initalization</code>  如果存在，必须是一条<em>简单语句</em>（simple statement），即短变量声明、自增语句、赋值语句或函数调用。</li>\n<li><code>condition</code>  是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为 <code>true</code>  则执行循环体语句。</li>\n<li><code>post</code>  语句在每次循环体执行结束后执行，之后再次对 <code>condition</code>  求值。 <code>condition</code>  值为 <code>false</code>  时，循环结束。</li>\n</ul>\n<p>for 循环的这三个部分每个都可以省略，如果省略 <code>initialization</code>  和 <code>post</code> ，就是 while 循环，分号也可以省略，如果省略三个部分，则为永真循环，可通过  <code>break</code>  跳出：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h2>\n<h3 id=\"if-else\"><a class=\"anchor\" href=\"#if-else\">#</a> if else</h3>\n<p>Go 中的  <code>if</code>  类似 python，没有括号，<strong>但后面必须跟大括号</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">7</span><span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7 is even\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7 is odd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">8</span><span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8 is divisible by 4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> num <span class=\"token operator\">:=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">\"is negative\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">\"has 1 digit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">\"has multiple digits\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"switch\"><a class=\"anchor\" href=\"#switch\">#</a> switch</h3>\n<p>go 语言里面的  <code>switch</code>  分支结构类似 c++。但也有很多不同：</p>\n<ul>\n<li>switch 后面的那个变量名，也不要括号</li>\n<li>c++ 中的 switch case 如果不加  <code>break</code>  的话会然后会继续往下跑完所有的 case， 在 go 语言里面的话是<strong>不需要加  <code>break</code> </strong> 的</li>\n<li>go 语言里面的 switch 功能更强大，可以使用<strong>任意的变量类型</strong>，甚至可以用来取代任意的 if else 语句。</li>\n</ul>\n<blockquote>\n<p>你可以在 switch 后面不加任何的变量，然后在 case 里面写条件分支。这样代码相比你用多个 if else 代码逻辑会更为清晰。</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ta <span class=\"token operator\">:=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">switch</span> a <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four or five\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">case</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's before noon\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's after noon\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"进程信息\"><a class=\"anchor\" href=\"#进程信息\">#</a> 进程信息</h1>\n<p>在 go 里面，我们能够用  <code>os.argv</code>   来得到程序执行的时候的指定的命令行参数。比如我们编译的一个 二进制文件， <code>command</code> 。 后面接  <code>abcd</code>  来启动，输出就是  <code>os.argv</code>  会是一个长度为  <code>5</code>  的  <code>slice</code>  , 第一个成员代表二进制自身的名字。我们可以用  <code>so.getenv</code>  来读取环境变量。 <code>exec</code></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"os/exec\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// go run example/20-env/main.go a b c d</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [/var/folders/8p/n34xxfnx38dg8bv_x8l62t_m0000gn/T/go-build3406981276/b001/exe/main a b c d]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// /usr/local/go/bin...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">Setenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grep\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/etc/hosts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CombinedOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 127.0.0.1       localhost</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"复合数据类型\"><a class=\"anchor\" href=\"#复合数据类型\">#</a> 复合数据类型</h1>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>数组是一个由<strong>固定长度</strong>的<strong>特定类型元素</strong>组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度是固定的，因此在 Go 语言中很少直接使用数组。和数组对应的类型是 <code>Slice</code> （切片），它是可以增长和收缩的动态序列，slice 功能也更灵活，但是要理解 slice 工作原理的话需要先理解数组。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ta<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">var</span> twoD <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\ttwoD<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d: \"</span><span class=\"token punctuation\">,</span> twoD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"切片-slice\"><a class=\"anchor\" href=\"#切片-slice\">#</a> 切片  <code>Slice</code></h2>\n<p>切片不同于数组，可以任意更改长度，也有更多丰富的操作。</p>\n<ul>\n<li>用  <code>make</code>  来<strong>创建一个切片</strong>，可以像数组一样去取值</li>\n<li>使用  <code>append</code>  来追加元素。注意 append 的用法与 js 中的 <code>concat</code>  相似，返回一个新数组，把 append 的结果赋值为原数组。</li>\n<li>slice 初始化的时候也可以动态的指定长度。  <code>len(s)</code></li>\n<li>slice 拥有像 python 一样的<strong>切片操作</strong>，比如 <code>s[2:5]</code>  代表取出第二个到第五个位置的元素，不包括第五个元素。<strong>不过不同于 python，这里不支持负数索引</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// c</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [a b c d e f]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [a b c d e f]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [c d e]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [a b c d e]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [c d e f]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tgood <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>good<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [g o o d]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<p><code>map</code>  是实际使用过程中最频繁用到的数据结构。</p>\n<ul>\n<li>可以用  <code>make</code>  来创建一个空  <code>map</code>  ，这里会需要两个类型， <code>key</code>  和  <code>value</code>  的类型\n<ul>\n<li><code>map[string]int</code>  表示  <code>key</code>  类型为 <code>string</code>  、 <code>value</code>  类型为  <code>int</code></li>\n</ul>\n</li>\n<li><code>map</code>  的取值与插入类似 c++ 中 STL 的 map，可直接进行。  <code>m[key]</code>   <code>m[key] = value</code></li>\n<li>可以用  <code>delete</code>  从里面<strong>删除键值对</strong></li>\n<li>Go 中的 <code>map</code>  是<strong>完全无序</strong>的，遍历的时候不会按照字母顺序，也不会按照插入顺序输出，而是<strong>随机顺序</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tm <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// map[one:1 two:2]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"unknow\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tr<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"unknow\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> ok<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tm2 <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">var</span> m3 <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">,</span> m3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"range\"><a class=\"anchor\" href=\"#range\">#</a> range</h2>\n<p>对于一个  <code>slice</code>  或者一个  <code>map</code>  的话，我们可以用  <code>range</code>  来快速遍历，这样代码能够更加简洁。 range 遍历的时候，对于<strong>数组</strong>会返回两个值，第一个是索引，第二个是对应位置的值。如果我们不需要索引的话，我们可以用下划线  <code>_</code>  来忽略。</p>\n<blockquote>\n<p>Go 语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。用 <code>空标识符</code> （blank identifier），即 <code>_</code> （也就是下划线）。空标识符可用于在任何<strong>语法需要变量名但程序逻辑不需要</strong>的时候（如：在循环里）丢弃不需要的循环索引，并保留元素值。</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tnums <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsum <span class=\"token operator\">:=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> num <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> nums <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tsum <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"num:\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// index: 0 num: 2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tm <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// b 8; a A</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> k <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: \"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token comment\">// key:  a; key:  b</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value:\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// value: A; value: B</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h2>\n<p>结构体的话是带类型的字段的集合。比如这里  <code>user</code>  结构包含了两个字段， <code>name</code>  和  <code>password</code></p>\n<ul>\n<li>可以用结构体的名称去初始化一个结构体变量，构造的时候需要<strong>传入每个字段的初始值</strong></li>\n<li>也可以用键值对的方式指定初始值，这样可以只对一部分字段进行初始化</li>\n<li>同样的结构体也支持指针，这样能够实现直接对于结构体的修改，可以在某些情况下<strong>避免</strong>一些大结构体的<strong>拷贝开销</strong></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> user <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tname     <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tpassword <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ta <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1024\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tb <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1024\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tc <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tc<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">\"1024\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">var</span> d user</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\td<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"wang\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\td<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">\"1024\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPassword2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span>u user<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>password <span class=\"token operator\">==</span> password</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">checkPassword2</span><span class=\"token punctuation\">(</span>u <span class=\"token operator\">*</span>user<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>password <span class=\"token operator\">==</span> password</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h2>\n<p>go 语言中的 JSON 操作非常简单</p>\n<ul>\n<li>对于一个已有的结构体，只要保证<strong>每个字段的第一个字母是大写</strong>，也就是是<strong>公开字段</strong>。那么这个结构体就能用  <code>JSON.marshaler</code>  去序列化，变成一个 JSON 的字符串。</li>\n</ul>\n<blockquote>\n<p><code>JSON.marshaler</code>  返回序列化值和 error，如下例 <br />\n这样默认序列化出来的字符串，是大写字母开头。可以在后面用 json tag 等语法来去修改输出 JSON 结果里面的字段名。</p>\n</blockquote>\n<ul>\n<li>序列化之后的字符串可以用  <code>JSON.unmarshaler</code>  去<strong>反序列化</strong>到一个空的变量里面。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"encoding/json\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> userInfo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tName  <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tAge   <span class=\"token builtin\">int</span> <span class=\"token string\">`json:\"age\"`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tHobby <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ta <span class=\"token operator\">:=</span> userInfo<span class=\"token punctuation\">&#123;</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> Hobby<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Golang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TypeScript\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// [123 34 78 97...]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;\"Name\":\"wang\",\"age\":18,\"Hobby\":[\"Golang\",\"TypeScript\"]&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">MarshalIndent</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">var</span> b userInfo</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\terr <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// main.userInfo&#123;Name:\"wang\", Age:18, Hobby:[]string&#123;\"Golang\", \"TypeScript\"&#125;&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"时间处理\"><a class=\"anchor\" href=\"#时间处理\">#</a> 时间处理</h2>\n<p>go 语言最常用的就是  <code>time.now()</code>  来获取当前时间，然后你也可以用  <code>time.date</code>  去构造一个<strong>带时区的时间</strong>，有很多方法来获取这个时间点的年月日小时分钟秒，</p>\n<ul>\n<li>可以用  <code>Sub</code>  方法对两个时间进行减法，得到一个时间段。</li>\n<li>时间段又可以得到它有多少小时，多少分钟、多少秒。</li>\n<li>在和某些系统交互的时候，我们经常会用到时间戳。那可以用  <code>.UNIX</code>  来获取时间戳。 <code>time.format</code>    <code>time.parse</code></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tnow <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2022-05-07 13:12:03.7190528 +0800 CST m=+0.004990401</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tt2 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>                                                  <span class=\"token comment\">// 2022-05-07 13:25:36 +0000 UTC</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Minute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2022 March 27 1 25</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02 15:04:05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 2022-05-07 13:25:36</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tdiff <span class=\"token operator\">:=</span> t2<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span>                           <span class=\"token comment\">// 2327h5m0s</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">.</span><span class=\"token function\">Minutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 139625 8.3775e+06</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tt3<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02 15:04:05\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2022-05-07 13:25:36\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t3 <span class=\"token operator\">==</span> t<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1651900531</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>Go 和其他很多语言不一样的是，函数参数变量类型是<strong>后置的</strong>。Go 中的函数<strong>原生支持返回多个值</strong>。</p>\n<ul>\n<li>在实际的业务逻辑代码里面几乎所有的函数都返回两个值，第一个是返回值，第二个值是一个<strong>错误信息</strong>。 如下例中的  <code>exists</code></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>m <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> k <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>v <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">,</span> ok</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tres <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ok<span class=\"token punctuation\">)</span> <span class=\"token comment\">// A True</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"错误处理\"><a class=\"anchor\" href=\"#错误处理\">#</a> 错误处理</h2>\n<p>go 中的错误处理就是<strong>使用一个单独的返回值</strong>来传递错误信息</p>\n<ul>\n<li>在函数返回值类型后面加一个  <code>error</code> ， 代表这个函数可能会返回错误。那么在函数实现的时候，  <code>return</code>  需要同时  <code>return</code>  两个值</li>\n<li>出现错误时，可以  <code>return nil</code>  和一个  <code>error</code> 。如果没有的话，那么返回原本的结果和  <code>nil</code> 。</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"errors\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> user <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tname     <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpassword <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>user<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>user<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> u <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> users <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> u<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> name <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not found\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tu<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>user<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wang\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// wang</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> u<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>user<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// not found</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"工具推荐\"><a class=\"anchor\" href=\"#工具推荐\">#</a> 工具推荐</h1>\n<p>在课堂中提到的几个代码生成工具</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdXJsY29udmVydGVyLmNvbS8jZ28=\">Convert curl commands to code (curlconverter.com)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9va3Rvb2xzLm5ldC9qc29uMmdv\">JSON 转 Golang Struct - 在线工具 - OKTools</span></li>\n</ul>\n<h1 id=\"课后练习\"><a class=\"anchor\" href=\"#课后练习\">#</a> 课后练习</h1>\n<ol>\n<li>修改第一个例子猜谜游戏里面的最终代码，使用 fmt.Scanf 来简化代码实现</li>\n</ol>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"math/rand\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmaxNum <span class=\"token operator\">:=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tsecretNumber <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span>maxNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// fmt.Println(\"The secret number is \", secretNumber)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your guess\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//reader := bufio.NewReader(os.Stdin)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">//input, err := reader.ReadString('\\n')</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> guess <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>guess<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%*c\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 吃回车</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occured while reading input. Please try again\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">//input = strings.TrimSuffix(input, \"\\n\")</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid input. Please enter an integer value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guess is\"</span><span class=\"token punctuation\">,</span> guess<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> guess <span class=\"token operator\">></span> secretNumber <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your guess is bigger than the secret number. Please try again\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> guess <span class=\"token operator\">&lt;</span> secretNumber <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your guess is smaller than the secret number. Please try again\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Correct, you Legend!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改第二个例子命令行词典里面的最终代码，增加另一种翻译引擎的支持</li>\n</ol>\n<pre><code class=\"language-go\">\n</code></pre>\n<ol start=\"3\">\n<li>在上一步骤的基础上，修改代码实现并行请求两个翻译引擎来提高响应速度</li>\n</ol>\n<h1 id=\"总结及心得\"><a class=\"anchor\" href=\"#总结及心得\">#</a> 总结及心得</h1>\n<p>课上很详细的讲了 Go 的基本语法，以及再加上自己阅读 Go 语言圣经的一些总结，得出了这一篇文章，感觉跟 JS 和 c/c++ 还是有很多共通之处的。</p>\n<blockquote>\n<p>内容来源于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rcy5zdHVkeWdvbGFuZy5jb20vZ29wbC16aC9jaDIvY2gyLmh0bWw=\">Go 语言圣经</span> 以及 第三届青训营课程</p>\n</blockquote>\n",
            "tags": [
                "笔记",
                "青训营笔记",
                "后端",
                "Go"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/hexo-shoka-config/",
            "url": "https://ysx.cosine.ren/hexo-shoka-config/",
            "title": "Hexo博客Shoka主题配置记录",
            "date_published": "2022-05-06T15:38:56.000Z",
            "content_html": "<h1 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h1>\n<p>今天闲逛的时候看到一个博客用的主题惊为天人:</p>\n<blockquote>\n<p>官方配置教程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">Hexo 主题 Shoka &amp; multi-markdown-it 渲染器使用说明</span> <br />\n<a href=\"https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/\"><strong>🚀快速开始</strong></a> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==\">💌依赖插件</span> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">📌基本配置</span> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">🌈界面显示</span> -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9zcGVjaWFsLw==\">🦄特殊功能</span></p>\n</blockquote>\n<blockquote>\n<p>过程中遇到的一些问题，有看到这个博客里提到：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLm1vZWh6LmNvbS9hcmNoaXZlcy9oZXhvLXNob2thLWJ1aWxkLmh0bWw=\">Hexo 博客搭建：基础配置 [主题:shoka]</span></p>\n</blockquote>\n<p>这个博客主题简直就是为笔记而生～<br />\n 优点：</p>\n<ul>\n<li>很二次元！很戳！</li>\n<li>随机图片还都挺好看！不用自己找图了（也可以自定义图片～）</li>\n<li>可配置项多，评论好用！</li>\n<li>其他一些笔记特有的功能</li>\n</ul>\n<p>跟着官方的教程配置完后，还有很多拓展功能，故在此处记录一些</p>\n<h1 id=\"基础配置\"><a class=\"anchor\" href=\"#基础配置\">#</a> 基础配置</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">📌基本配置</span></p>\n<h2 id=\"图片上传及随即图库\"><a class=\"anchor\" href=\"#图片上传及随即图库\">#</a> 图片上传及随即图库</h2>\n<p>使用渣浪图库，使用一些上传工具，比如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWMuZ2ltaG95LmNvbS8=\">这里</span></p>\n<p>上传后图片的链接是  <code>http://wx4.sinaimg.cn/large/6833939bly1gicmnywqgpj20zk0m8dwx.jpg</code>  。</p>\n<p>只需要新一行写上  <code>- 6833939bly1gicmnywqgpj20zk0m8dwx.jpg 。</code></p>\n<p>如果想要自定义，则在  <code>&lt;root&gt;/source/_data/</code>  目录新建一个  <code>images.yml</code>  文件，这个文件中的图片至少 6 枚，将完全覆盖默认的图片列表。</p>\n<h2 id=\"添加评论功能\"><a class=\"anchor\" href=\"#添加评论功能\">#</a> 添加评论功能</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">如何获取 LeanCloud 的 appId 和 appKey</span></p>\n<p>获取后在  <code>_config.yml</code>  修改如下内容：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your_appId</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your_appkey</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> mp <span class=\"token comment\"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 文章访问量统计</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">NoRecordIP</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 不记录 IP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">serverURLs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">powerMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 默认打开评论框输入特效</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">tagMeta</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> 新朋友</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> 主人</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> 小伙伴</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> 金主粑粑</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">tagColor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-orange)\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-aqua)\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-pink)\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\"># - hash of master@email.com</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\"># - hash of master2@email.com</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\"># - hash of friend@email.com</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\"># - hash of friend2@email.com</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\"># - hash of investor1@email.com</span></pre></td></tr></table></figure><p>评论通知与管理工具建议使用这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Rlc2VydHNQL1ZhbGluZS1BZG1pbg==\">Valine-Admin</span>。<br />\n注意 SITE_URL 需要以 / 结尾。</p>\n<p>哇咔咔，评论管理终于有了！</p>\n<h2 id=\"搜索配置\"><a class=\"anchor\" href=\"#搜索配置\">#</a> 搜索配置</h2>\n<p>搜索采用 algolia，我是跟着这个来的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTU3NTY4\">Algolia 搜索引擎</span><br />\n配置完后，每次发布文章还需要手动一行命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g -d <span class=\"token operator\">&amp;&amp;</span> hexo algolia</pre></td></tr></table></figure><h1 id=\"界面显示\"><a class=\"anchor\" href=\"#界面显示\">#</a> 界面显示</h1>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">🌈界面显示</span> 中提到</p>\n<h2 id=\"首页置顶及精选分类\"><a class=\"anchor\" href=\"#首页置顶及精选分类\">#</a> 首页置顶及精选分类</h2>\n<p>在文章的 Front Matter 设置  <code>sticky: true</code>  ，则该文章将显示在首页最上方的  <code>置顶文章</code>  列。<br />\n多篇文章按照发布时间倒序排列，不分页。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 置顶文章</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">sticky</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>在  <code>_config.yml</code>  中的 category_map 设置分类对应的目录。然后在分类对应目录下放一张  <code>cover.jpg</code>  图片，就可以将该分类放至首页下展示。</p>\n<h1 id=\"特殊功能\"><a class=\"anchor\" href=\"#特殊功能\">#</a> 特殊功能</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9zcGVjaWFsLw==\">🦄特殊功能</span></p>\n<p>最最最吸引我的一点，下面列举一些我认为会常用到的</p>\n<h2 id=\"links-链接块\"><a class=\"anchor\" href=\"#links-链接块\">#</a> links 链接块</h2>\n<pre><code>&#123;% links %&#125;\n- site: #站点名称\n  owner: #管理员名字\n  url: #站点网址\n  desc: #简短描述\n  image: #一张图片\n  color: #颜色代码\n&#123;% endlinks %&#125;\n</code></pre>\n<h2 id=\"code-代码块\"><a class=\"anchor\" href=\"#code-代码块\">#</a> code 代码块</h2>\n<p>主要有：顶部可配置标题，右上角可配置参考链接，命令行可配置提示内容等等</p>\n<p>原始 md 文件内容：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#96;&#96;&#96;java 行高亮 https:&#x2F;&#x2F;shoka.lostyu.me 参考链接 mark:1,6-7</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import java.util.Scanner;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Scanner in &#x3D; new Scanner (System.in);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#x2F;&#x2F; 输入 Scan 之后，按下键盘 Alt + “&#x2F;” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println (in.nextLine ());</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println (&quot;Hello&quot; + &quot;world.&quot;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#96;&#96;&#96;bash 命令行提示符 command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pwd</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#x2F;usr&#x2F;home&#x2F;chris&#x2F;bin</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ls -la</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>total 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>git add -A</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>git commit -m &quot;update&quot;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>git push</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><p>展示如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>行高亮</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span>nextLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h2 id=\"quiz-练习题及答案\"><a class=\"anchor\" href=\"#quiz-练习题及答案\">#</a> quiz 练习题及答案</h2>\n<p>ps: 什么神仙功能</p>\n<p>需要在 Front Matter 中添加  <code>quiz: true</code>  ，以正确显示题型标签。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>几个例子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 练习题与答案</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>quiz: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 &#123;.quiz .true&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2. 有基类 &#96;SHAPE&#96;，派生类 &#96;CIRCLE&#96;，声明如下变量：  &#123;.quiz .multi&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#96;&#96;&#96;cpp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SHAPE shape1,*p1;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CIRCLE circle1,*q1;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    下列哪些项是 “派生类对象替换基类对象”。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - &#96;p1&#x3D;&amp;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    - &#96;q1&#x3D;&amp;shape1;&#96;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    - &#96;shape1&#x3D;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    - &#96;circle1&#x3D;shape1;&#96;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    &gt; - :heavy_check_mark: 令基类对象的指针指向派生类对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &gt; - :x: 派生类指针指向基类的引用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    &gt; - :heavy_check_mark: 派生类对象给基类对象赋值</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    &gt; - :x: 基类对象给派生类对象赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &gt; &#123;.options&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>3. 下列叙述正确的是 []&#123;.gap&#125; 。 &#123;.quiz&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    - 虚函数只能定义成无参函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    - 虚函数不能有返回值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    - 能定义虚构造函数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    - A、B、C 都不对 &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>10. 如果定义 &#96;int e&#x3D;8; double f&#x3D;6.4, g&#x3D;8.9;&#96;，则表达式 &#96;f+int (e&#x2F;3*int (f+g)&#x2F;2)%4&#96; 的值为 [9.4]&#123;.gap&#125;。 &#123;.quiz .fill&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &gt; 注意运算顺序和数据类型</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &gt; [8.4]&#123;.mistake&#125;</pre></td></tr></table></figure><p>效果如下：</p>\n<ol>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz multi\">\n<p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#123;.quiz&#125;</code></td>\n<td>选择题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .multi&#125;</code></td>\n<td>多选题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .true&#125;</code></td>\n<td>正确的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .false&#125;</code></td>\n<td>错误的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .fill&#125;</code></td>\n<td>填空题</td>\n</tr>\n<tr>\n<td><code>[]&#123;.gap&#125;</code></td>\n<td>空白下划线</td>\n</tr>\n<tr>\n<td><code>[答案内容]&#123;.gap&#125;</code></td>\n<td>答案内容带下划线</td>\n</tr>\n<tr>\n<td><code>&#123;.options&#125;</code></td>\n<td>ABCDE 选项</td>\n</tr>\n<tr>\n<td><code>&#123;.correct&#125;</code></td>\n<td>选择题的正确选项</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>答案解析</td>\n</tr>\n<tr>\n<td><code>[8.4]&#123;.mistake&#125;\t</code></td>\n<td>错题备注</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"emoji-绘文字\"><a class=\"anchor\" href=\"#emoji-绘文字\">#</a> emoji 绘文字</h2>\n<p>基于 markdown-it-emoji ，所有标签参考戳此</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>示例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:kissing_heart:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:ring:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:notes:</pre></td></tr></table></figure><p>😘 💍 🎶</p>\n<h2 id=\"spoiler-隐藏文字\"><a class=\"anchor\" href=\"#spoiler-隐藏文字\">#</a> spoiler 隐藏文字</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!! 真的有这么神奇吗！！</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>!! 我不信！！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>!! 模糊模糊模糊模糊模糊模糊！！&#123;.bulr&#125; ： 选中文字显示内容</pre></td></tr></table></figure><p><span class=\"spoiler\" title=\"你知道得太多了\">真的有这么神奇吗</span><br />\n<span class=\"spoiler\" title=\"你知道得太多了\">我不信</span><br />\n<span class=\"spoiler\" title=\"你知道得太多了\">黑幕黑幕黑幕黑幕黑幕黑幕</span>： 鼠标滑过显示内容<br />\n<span class=\"spoiler bulr\" title=\"你知道得太多了\">模糊模糊模糊模糊模糊模糊</span> ： 选中文字显示内容</p>\n<h2 id=\"label-标签块\"><a class=\"anchor\" href=\"#label-标签块\">#</a> label 标签块</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[default]&#123;.label&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[primary]&#123;.label .primary&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[info]&#123;.label .info&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[:heavy_check_mark:success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[warning]&#123;.label .warning&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[:broken_heart:danger]&#123;.label .danger&#125;</pre></td></tr></table></figure><p><span class=\"label\">default</span><br />\n<span class=\"label primary\">primary</span><br />\n<span class=\"label info\">info</span><br />\n<span class=\"label success\">✔️success</span><br />\n<span class=\"label warning\">warning</span><br />\n<span class=\"label danger\">💔danger</span></p>\n<h2 id=\"note-提醒块\"><a class=\"anchor\" href=\"#note-提醒块\">#</a> note 提醒块</h2>\n<p>| 开始行\t |  <code>:::[风格颜色]</code>  |<br />\n| 结束行 | \t <code>:::</code>  |</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:::default</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>默认默认</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:::primary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>基本基本</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>提示提示</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::success</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>成功成功</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>:::warning</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>警告警告</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>:::danger no-icon</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>:::</pre></td></tr></table></figure><p>效果如下</p>\n<div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>危险危险</p>\n</div>\n<h2 id=\"tab-标签卡\"><a class=\"anchor\" href=\"#tab-标签卡\">#</a> tab 标签卡</h2>\n<p>标签为：</p>\n<p>| 开始行 |\t <code>;;;[同一ID] [标签名称]</code>  |<br />\n| 结束行 |  <code>;;;</code>  |</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>;;;id1 卡片 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>** 加粗 **</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://fastly.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>;;;id1 卡片 2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>;;;id2 ②号标签卡片 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>;;;id2 ②号标签卡片 2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>;;;</pre></td></tr></table></figure><div class=\"tab\" data-id=\"id1\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容<br />\n ** 加粗 **<br />\n<span class=\"label success\">success</span></p>\n<p><div class=\"links\"><div class=\"item\" title=\"cos\" style=\"--block-color:#1e80ff;\"><a href=\"https://ysx.cosine.ren/\" class=\"image\" data-background-image=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed@latest/img/tx.jpg\"></a>\n          <div class=\"info\">\n          <a href=\"https://ysx.cosine.ren/\" class=\"title\">cos的博客</a>\n          <p class=\"desc\">余弦的编程笔记 & 生活记录</p>\n          </div></div></div></p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n<h2 id=\"media-多媒体\"><a class=\"anchor\" href=\"#media-多媒体\">#</a> media 多媒体</h2>\n<p>使用 media 标签，目前可选择两种类型，即 audio 和 video 。</p>\n<p>效果如下</p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"cos的2021年度歌单\",\"list\":[\"https://music.163.com/playlist?id=7189274318\"]},{\"title\":\"cos的2020年度歌单\",\"list\":[\"https://music.163.com/playlist?id=5400313492\"]},{\"title\":\"cos的2019年度歌单\",\"list\":[\"https://music.163.com/playlist?id=3144460328\"]},{\"title\":\"❤️安利向\",\"list\":[\"https://music.163.com/playlist?id=3036586237\"]}]'></div></div></p>\n<h2 id=\"math-数学公式\"><a class=\"anchor\" href=\"#math-数学公式\">#</a> math 数学公式</h2>\n<p>在 Front Matter 中添加 math: true 以支持 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcv\">KaTex</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 数学公式显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>math: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>行内公式：$\\sqrt &#123;3x-1&#125;+(1+x)^2$</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>独立块显示：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$$\\begin &#123;array&#125;&#123;c&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;B&#125;&#125; -\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;E&#125;&#125;&#125;&#123;\\partial t&#125; &amp;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#x3D; \\frac &#123;4\\pi&#125;&#123;c&#125;\\vec &#123;\\mathbf &#123;j&#125;&#125;    \\nabla \\cdot \\vec &#123;\\mathbf &#123;E&#125;&#125; &amp; &#x3D; 4 \\pi \\rho \\\\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;E&#125;&#125;\\, +\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;B&#125;&#125;&#125;&#123;\\partial t&#125; &amp; &#x3D; \\vec &#123;\\mathbf &#123;0&#125;&#125; \\\\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\\nabla \\cdot \\vec &#123;\\mathbf &#123;B&#125;&#125; &amp; &#x3D; 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\\end &#123;array&#125;$$</pre></td></tr></table></figure><p>行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msqrt><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sqrt {3x-1}+(1+x)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>独立块显示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover><mo>−</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mfrac><mrow><mn>4</mn><mi>π</mi></mrow><mi>c</mi></mfrac><mover accent=\"true\"><mi mathvariant=\"bold\">j</mi><mo>⃗</mo></mover><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>4</mn><mi>π</mi><mi>ρ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover><mtext> </mtext><mo>+</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mover accent=\"true\"><mn mathvariant=\"bold\">0</mn><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin {array}{c}\n\n\\nabla \\times \\vec {\\mathbf {B}} -\\, \\frac1c\\, \\frac {\\partial\\vec {\\mathbf {E}}}{\\partial t} &amp;\n= \\frac {4\\pi}{c}\\vec {\\mathbf {j}}    \\nabla \\cdot \\vec {\\mathbf {E}} &amp; = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec {\\mathbf {E}}\\, +\\, \\frac1c\\, \\frac {\\partial\\vec {\\mathbf {B}}}{\\partial t} &amp; = \\vec {\\mathbf {0}} \\\\\n\n\\nabla \\cdot \\vec {\\mathbf {B}} &amp; = 0\n\n\\end {array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.1938640000000005em;vertical-align:-1.846932em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">E</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">B</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9774399999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">j</span></span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92744em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">0</span></span></span></span><span style=\"top:-3.21344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathnormal\">ρ</span></span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>总而言之，这个主题非常强大～</p>\n",
            "tags": [
                "工具",
                "前端",
                "hexo"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/compile-learning-experiment_4/",
            "url": "https://ysx.cosine.ren/compile-learning-experiment_4/",
            "title": "编译原理 实验四 LR(1)分析法程序",
            "date_published": "2022-04-30T18:43:49.000Z",
            "content_html": "<p>第三次实验因为逆波兰式比较简单所以略过 x</p>\n<p>源代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l1c2l4aWFuL0NvbXBpbGVQcmluY2lwbGVMZWFybmluZy90cmVlL21hc3Rlci9leHBlcmltZW50XzQ=\">CompilePrincipleLearning/experiment_4 · yusixian/CompilePrincipleLearning (github.com)</span></p>\n<p>在 demo 文件夹中～</p>\n<h1 id=\"一实验目的\"><a class=\"anchor\" href=\"#一实验目的\">#</a> 一.\t实验目的</h1>\n<ol>\n<li>掌握 LR (1) 分析法的基本原理</li>\n<li>掌握 LR (1) 分析表的构造方法</li>\n<li>掌握 LR (1) 驱动程序的构造方法</li>\n</ol>\n<h1 id=\"二实验内容及要求\"><a class=\"anchor\" href=\"#二实验内容及要求\">#</a> 二.\t实验内容及要求</h1>\n<p>构造 LR (1) 分析程序，利用它进行语法分析，判断给出的符号串是否为该文法识别的句子，了解 LR（K）分析方法是严格的从左向右扫描，和自底向上的语法分析方法。</p>\n<p>根据某一文法编制调试 LR（1）分析程序，以便对任意输入的符号串进行分析。本次实验的目的主要是加深对 LR（1）分析法的理解。</p>\n<p><strong>对下列文法，用 LR（1）分析法对任意输入的符号串进行分析</strong>：</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（0）S’->E</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（1）E->E+T</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（2）E->T</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>（3）T->T*F</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>（4）T->F</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>（5）F->(E)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>（6）F->i</pre></td></tr></table></figure><p>输出的格式如下：</p>\n<p>(1) LR（1）分析程序，编制人：姓名，学号，班级</p>\n<p>(2) 输入一以 #结束的符号串 (包括 +-*/（）i#)：在此位置输入符号串</p>\n<p>(3) 输出过程如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>步骤</strong></th>\n<th><strong>状态栈</strong></th>\n<th><strong>符号栈</strong> ****</th>\n<th><strong>剩余输入串</strong></th>\n<th><strong>动作</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>#</td>\n<td>i+i*i#</td>\n<td>移进</td>\n</tr>\n</tbody>\n</table>\n<p>(4) 输入符号串为非法符号串或合法符号串</p>\n<p>注意：</p>\n<p>1. 表达式中允许使用运算符（+|*）、分割符（括号）、字符 i，结束符 #；</p>\n<p>2. 如果遇到错误的表达式，应输出错误提示信息（该信息越详细越好）；</p>\n<p>3. 对学有余力的同学，测试用的表达式事先放在文本文件中，一行存放一个表达式，同时以分号分割。同时将预期的输出结果写在另一个文本文件中，以便和输出进行对照；</p>\n<p>4．可采用的其它的文法，但是必须是 LR1 分析方法。</p>\n<h1 id=\"三实验过程\"><a class=\"anchor\" href=\"#三实验过程\">#</a> 三.\t实验过程</h1>\n<h2 id=\"1-构造识别lr1文法活前缀的dfa\"><a class=\"anchor\" href=\"#1-构造识别lr1文法活前缀的dfa\">#</a> 1、构造识别 LR（1）文法活前缀的 DFA</h2>\n<p>如图：新标签页打开，不糊的。</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b812acc3e4e4ea9929eef56cebea020~tplv-k3u1fbpfcp-watermark.image?\" alt=\"LR1_DFA.drawio.png\" /></p>\n<p>action 表和 goto 表如下：</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dbe68ae771f4a89a6dca82976915452~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<h2 id=\"2-采用的数据结构\"><a class=\"anchor\" href=\"#2-采用的数据结构\">#</a> 2、采用的数据结构</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ACTION 表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// + * ( ) i #</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string action<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//goto 表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// a b #</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> _goto<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string vt <span class=\"token operator\">=</span> <span class=\"token string\">\"+*()i#\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 终结符表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string vn <span class=\"token operator\">=</span> <span class=\"token string\">\"ETF\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 非终结符表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>string LR<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"E->E+T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E->T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->T*F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->(E)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->i\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 存放产生式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> chars<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 符号栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> state<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 状态栈</span></pre></td></tr></table></figure><h2 id=\"3-头文件声明和全局变量定义\"><a class=\"anchor\" href=\"#3-头文件声明和全局变量定义\">#</a> 3、头文件声明和全局变量定义</h2>\n<p>如下。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> string ExpFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./exp.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> string GotoFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./goto.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> string ActionFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./action.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> Null <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// ACTION 表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// + * ( ) i #</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>string action<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//goto 表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// a b #</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> _goto<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>string vt <span class=\"token operator\">=</span> <span class=\"token string\">\"+*()i#\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 终结符表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>string vn <span class=\"token operator\">=</span> <span class=\"token string\">\"ETF\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 非终结符表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>string LR<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"E->E+T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E->T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->T*F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->(E)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->i\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 存放产生式</span></pre></td></tr></table></figure><h2 id=\"4-函数汇总\"><a class=\"anchor\" href=\"#4-函数汇总\">#</a> 4、函数汇总</h2>\n<h3 id=\"1函数汇总表\"><a class=\"anchor\" href=\"#1函数汇总表\">#</a> （1）函数汇总表</h3>\n<table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>功能简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>readFile</code></td>\n<td>读取文件函数，返回一个 string 动态数组，以行数分割</td>\n</tr>\n<tr>\n<td><code>init</code></td>\n<td>初始化函数，在该函数中进行 goto 表和 action 表的初始化</td>\n</tr>\n<tr>\n<td><code>printActions / printGotos</code></td>\n<td>输出 goto 表与 action 表</td>\n</tr>\n<tr>\n<td><code>isTerminator</code></td>\n<td>判断当前字符 c 是否是终结符</td>\n</tr>\n<tr>\n<td><code>findTerminator</code></td>\n<td>返回终结符所处下标</td>\n</tr>\n<tr>\n<td><code>findNonTerminator</code></td>\n<td>返回非终结符所处下标</td>\n</tr>\n<tr>\n<td><code>s2string</code></td>\n<td>将栈转换为字符串返回，方便输出步骤</td>\n</tr>\n<tr>\n<td><code>analyzeLR1</code></td>\n<td>利用 LR1 分析法分析字符串 exp，输出其分析步骤</td>\n</tr>\n<tr>\n<td><code>main </code></td>\n<td>主程序入口，调用读取文件函数开始分析</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2函数的调用关系\"><a class=\"anchor\" href=\"#2函数的调用关系\">#</a> （2）函数的调用关系</h3>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b99924fde594015aac1b75d324243c7~tplv-k3u1fbpfcp-watermark.image?\" alt=\"function4.drawio.png\" /></p>\n<h3 id=\"3流程图\"><a class=\"anchor\" href=\"#3流程图\">#</a> （3）流程图</h3>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbd377b4720c450894253ad587ca8c3f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"main.drawio.png\" /></p>\n<h2 id=\"5-实验结果\"><a class=\"anchor\" href=\"#5-实验结果\">#</a> 5、实验结果</h2>\n<h3 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h3>\n<p>action.txt 文件</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s6\tN\tN\tN\tN\tacc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r2\ts7\tN\tr2\tN\tr2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r4\tr4\tN\tr4\tN\tr4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>r6\tr6\tN\tr6\tN\tr6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>N\tN\ts4\tN\ts5\tN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s6\tN\tN\ts11\tN\tN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>r1\ts7\tN\tr1\tN\tr1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>r3\tr3\tN\tr3\tN\tr3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>r5\tr5\tN\tr5\tN\tr5</pre></td></tr></table></figure><p>goto.txt 文件</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1\t2\t3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8\t2\t3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>N\t9\t3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>N\tN\t10</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>N\tN\tN</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>N\tN\tN</pre></td></tr></table></figure><p>exp.txt 文件</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i+(i*i)*(i+i)#</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i*i+i*i#</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>i+i*i+i*(i+i*i)#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>i+*(i)+i(i+i*i)#</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i+i(i)#</pre></td></tr></table></figure><h3 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h3>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00706fefb691427592dcf885bd5729a7~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image1.png\" /></p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca94078bbded4bf5802757568e8221b4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image2.png\" /></p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26196777c3a241799dcd13ea1a30debc~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image3.png\" /></p>\n<h1 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author: cos</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Date: 2022-04-30 14:20:51</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @LastEditTime: 2022-05-01 02:34:12</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @LastEditors: cos</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Description: 实验 4 LR (1) 分析法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @FilePath: \\CompileTheory\\experiment_4\\demo\\main.cpp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> string ExpFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./exp.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> string GotoFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./goto.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> string ActionFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"./action.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> Null <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// ACTION 表</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// + * ( ) i #</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>string action<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//goto 表</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// a b #</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> _goto<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>string vt <span class=\"token operator\">=</span> <span class=\"token string\">\"+*()i#\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 终结符表</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>string vn <span class=\"token operator\">=</span> <span class=\"token string\">\"ETF\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 非终结符表</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>string LR<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"E->E+T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E->T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->T*F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T->F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->(E)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F->i\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 存放产生式</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 读文件</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>string fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ifstream fin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        fin<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        string temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------------ACTION表------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+\\t*\\t(\\t)\\ti\\t$\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> action<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printGotos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----------------GOTO表------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"E\\tT\\tF\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> _goto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> actions <span class=\"token operator\">=</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>ActionFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        string row <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            string temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                temp <span class=\"token operator\">+=</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            action<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">printActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> gotos <span class=\"token operator\">=</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>GotoFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        string row <span class=\"token operator\">=</span> gotos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            string temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&amp;&amp;</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                temp <span class=\"token operator\">+=</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            _goto<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> Null <span class=\"token operator\">:</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">printGotos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isTerminator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">return</span> vt<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">findTerminator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回终结符所处下标</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">return</span> vt<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">findNonTerminator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回非终结符的下标</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">return</span> vn<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">// 将栈转换为字符串返回</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>string <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    string str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\">// 输出剩余输入串</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printRestInput</span><span class=\"token punctuation\">(</span>string exp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">analyzeLR1</span><span class=\"token punctuation\">(</span>string exp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 分析一个表达式</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> chars<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 符号栈</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> state<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 状态栈</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始状态为 0</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    chars<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始符号为#</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    string charsStr <span class=\"token operator\">=</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> copyState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    copyState<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 序号</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前输入指针</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"序号\\t\\t状态栈\\t\\t符号栈\\t\\t输入串\\t\\t描述\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 初始状态 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">int</span> nowState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">char</span> nowChar <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 当前输入字符</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">int</span> isT <span class=\"token operator\">=</span> <span class=\"token function\">findTerminator</span><span class=\"token punctuation\">(</span>nowChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isT <span class=\"token operator\">==</span> Null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 非终结符</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error!\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"出现非法字符，程序错误退出\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        string actionStr <span class=\"token operator\">=</span> action<span class=\"token punctuation\">[</span>nowState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>isT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr <span class=\"token operator\">==</span> <span class=\"token string\">\"acc\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" accept 接受！ \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error! 程序异常退出\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 归约</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 选用第几个产生式归约</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                chars<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 出栈，归约</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                state<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                charsStr <span class=\"token operator\">=</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                copyState<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 便于输出</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            chars<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 产生式左部入符号栈</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            charsStr <span class=\"token operator\">+=</span> LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token keyword\">int</span> nowState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token keyword\">int</span> gidx <span class=\"token operator\">=</span> <span class=\"token function\">findNonTerminator</span><span class=\"token punctuation\">(</span>LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            <span class=\"token keyword\">int</span> newState <span class=\"token operator\">=</span> _goto<span class=\"token punctuation\">[</span>nowState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>gidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            copyState<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token function\">printRestInput</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 归约 \"</span> <span class=\"token operator\">&lt;&lt;</span> LR<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 移进</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">int</span> newState <span class=\"token operator\">=</span>  <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>actionStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            copyState<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            chars<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nowChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            charsStr <span class=\"token operator\">+=</span> nowChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token operator\">++</span>idx<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输入指针后移</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cnt<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">s2string</span><span class=\"token punctuation\">(</span>copyState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> charsStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            <span class=\"token function\">printRestInput</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> actionStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 移进 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error!\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"程序异常退出\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"LR（1）分析程序，编制人：xxx xxxxxxxx xxxx班\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"提示:本程序只能对由'i','+','*','/','(',')'构成的以'#'结束的表达式进行分析，每行读入一个表达式\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"读取的文件名为：\"</span> <span class=\"token operator\">&lt;&lt;</span> ExpFileName <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> exps <span class=\"token operator\">=</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>ExpFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> exps<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        string exp <span class=\"token operator\">=</span> exps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n------------------待分析表达式\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"：\"</span><span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isTerminator</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第 \"</span><span class=\"token operator\">&lt;&lt;</span>   i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"行输入的字符串不合法，请重新输入\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"表达式\"</span>  <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">&lt;&lt;</span> exp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"分析开始\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>            <span class=\"token function\">analyzeLR1</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "CS基础",
                "编译原理"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day31/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day31/",
            "title": "剑指offer day31 数学（困难）",
            "date_published": "2022-04-29T14:08:00.000Z",
            "content_html": "<p>day31 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1paS1sY29mLw==\">剑指 Offer 14- II. 剪绳子 II</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mLw==\">剑指 Offer 43. 1～n 整数中 1 出现的次数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 44. 数字序列中某一位的数字</span></p>\n<p>知识点：数学，难度为中等、困难、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1paS1sY29mLw==\">剑指 Offer 14- II. 剪绳子 II</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mLw==\">剑指 Offer 43. 1～n 整数中 1 出现的次数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 44. 数字序列中某一位的数字</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS1zZWFyY2g=\">二分查找</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<p>最后一天了…… 被今天的数学题…… 按在地上摩擦，嘿嘿嘿</p>\n<h1 id=\"剑指-offer-14-ii-剪绳子-ii\"><a class=\"anchor\" href=\"#剑指-offer-14-ii-剪绳子-ii\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1paS1sY29mLw==\">剑指 Offer 14- II. 剪绳子 II</span></h1>\n<p>给你一根长度为  <code>n</code>  的绳子，请把绳子剪成整数长度的  <code>m</code>  段（m、n 都是整数，n&gt;1 并且 m&gt;1），每段绳子的长度记为  <code>k[0],k[1]...k[m - 1]</code>  。请问  <code>k[0]*k[1]*...*k[m - 1]</code>  可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。</p>\n<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= n &lt;= 1000</code></li>\n</ul>\n<p>注意：本题与主站 343 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW50ZWdlci1icmVhay8=\">https://leetcode-cn.com/problems/integer-break/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>这道题是之前剪绳子一模一样，不过这里多了取模运算，可以利用贪心思想</p>\n<ul>\n<li>若  <code>n &lt; 4</code> ，返回  <code>n - 1</code></li>\n<li>若  <code>n == 4</code> ，返回  <code>4</code></li>\n<li>若  <code>n &gt; 4</code> ，分成尽可能多的长度为  <code>3</code>  的小段，循环中每次长度  <code>n</code>  减去 <code>3</code> ，乘积 <code>res</code>  乘以 <code>3</code> ，最后返回时乘上小于等于 4 的最后一小段后的结果，每次乘法操作后记得 <strong>取余</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cuttingRope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        n <span class=\"token operator\">-=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-43-1~n-整数中-1-出现的次数\"><a class=\"anchor\" href=\"#剑指-offer-43-1~n-整数中-1-出现的次数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mLw==\">剑指 Offer 43. 1～n 整数中 1 出现的次数</span></h1>\n<p>输入一个整数  <code>n</code>  ，求 1～n 这 n 个整数的十进制表示中 1 出现的次数。</p>\n<p>例如，输入 12，1～12 这些整数中包含 1 的数字有 1、10、11 和 12，1 一共出现了 5 次。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： n = 12\n输出： 5\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： n = 13\n输出： 6\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt; 2^31</code></li>\n</ul>\n<p>注意：本题与主站 233 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLWRpZ2l0LW9uZS8=\">https://leetcode-cn.com/problems/number-of-digit-one/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>题目越短，事越大，看官方题解如下，难得官方题解讲的这么清楚明白一次：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMW56aGVuZy1zaHUtemhvbmctMWNodS14aWFuLWRlLWNpLXNodS1sY29mL3NvbHV0aW9uLzFuLXpoZW5nLXNodS16aG9uZy0xLWNodS14aWFuLWRlLWNpLXNodS11bWFqOC8=\">1～n 整数中 1 出现的次数 - 1～n 整数中 1 出现的次数 - 力扣（LeetCode） (leetcode-cn.com)</span></p>\n<p>总结如下：</p>\n<blockquote>\n<p>当数位为  <code>10^k</code>  时，最后的  <code>k</code>  个数位每  <code>10^(k+1)</code>  个数会循环一次，并且其中包含  <code>10^k</code>  个 1，由于  <code>n</code>  包含  <code>n/10^(k+1)</code>  个完整的循环，那么这一部分的  <code>1</code>  的个数为  <code>(n/10^(k+1))*10^k</code> 。不在循环中的部分还有  <code>n mod 10^(k+1)</code>  个数，这一部分的  <code>1</code>  的个数为  <code>n mod 10^(k+1) - 10^k + 1</code> ，如果这个值小于  <code>0</code> ，那么调整为出现  <code>0</code>  次；如果这个值大于  <code>10^k</code>  ，那么调整为出现  <code>10^k</code>  次。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">countDigitOne</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> mulk <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> mulk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> rest <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>mulk<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>mulk<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mulk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        res <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>mulk<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>mulk <span class=\"token operator\">+</span> rest</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        mulk <span class=\"token operator\">*=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-44-数字序列中某一位的数字\"><a class=\"anchor\" href=\"#剑指-offer-44-数字序列中某一位的数字\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 44. 数字序列中某一位的数字</span></h1>\n<p>数字以 0123456789101112131415… 的格式序列化到一个字符序列中。在这个序列中，第 5 位（从下标 0 开始计数）是 5，第 13 位是 1，第 19 位是 4，等等。</p>\n<p>请写一个函数，求任意第 n 位对应的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： n = 3\n输出： 3\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： n = 11\n输出： 0\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt; 2^31</code></li>\n</ul>\n<p>注意：本题与主站 400 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnRoLWRpZ2l0Lw==\">https://leetcode-cn.com/problems/nth-digit/</span></p>\n<h2 id=\"思路及代码-3\"><a class=\"anchor\" href=\"#思路及代码-3\">#</a> 思路及代码</h2>\n<p>建议看题解，自己根本没法讲这么明白：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXppLXh1LWxpZS16aG9uZy1tb3UteWktd2VpLWRlLXNodS16aS1sY29mL3NvbHV0aW9uL2pzLTV4aW5nLWRhaS1tYS1qaS1zaGkteGluZy16aHUtc2hpLWJ5LW8tMnNrZC8=\">[JS] 5 行代码，几十行注释 - 数字序列中某一位的数字)</span></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findNthDigit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        n <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">++</span>i</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>n <span class=\"token operator\">%</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>完结撒花～明天开剑指 offer 专项计划</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c32319d3217473485def70035c4b785~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day30/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day30/",
            "title": "剑指offer day30 分治算法（困难）",
            "date_published": "2022-04-28T15:08:00.000Z",
            "content_html": "<p>day30 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGEteWluLWNvbmctMWRhby16dWktZGEtZGUtbndlaS1zaHUtbGNvZi8=\">剑指 Offer 17. 打印从 1 到最大的 n 位数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWRlLW5pLXh1LWR1aS1sY29mLw==\">剑指 Offer 51. 数组中的逆序对</span></p>\n<p>知识点：数组、数学、分治，难度为简单、困难</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGEteWluLWNvbmctMWRhby16dWktZGEtZGUtbndlaS1zaHUtbGNvZi8=\">剑指 Offer 17. 打印从 1 到最大的 n 位数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWRlLW5pLXh1LWR1aS1sY29mLw==\">剑指 Offer 51. 数组中的逆序对</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpbmFyeS1pbmRleGVkLXRyZWU=\">树状数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NlZ21lbnQtdHJlZQ==\">线段树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span></td>\n<td>困难</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-17-打印从1到最大的n位数\"><a class=\"anchor\" href=\"#剑指-offer-17-打印从1到最大的n位数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGEteWluLWNvbmctMWRhby16dWktZGEtZGUtbndlaS1zaHUtbGNvZi8=\">剑指 Offer 17. 打印从 1 到最大的 n 位数</span></h1>\n<p>输入数字  <code>n</code> ，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: n = 1\n输出: [1,2,3,4,5,6,7,8,9]\n</code></pre>\n<p>说明：</p>\n<ul>\n<li>用返回一个整数列表来代替打印</li>\n<li>n 为正整数</li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>不考虑大数，那么这道题秒杀。考虑的话…… 不听不听我不听 QAQ（以后有机会补上）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">printNumbers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> maxv <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxv<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-51-数组中的逆序对\"><a class=\"anchor\" href=\"#剑指-offer-51-数组中的逆序对\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWRlLW5pLXh1LWR1aS1sY29mLw==\">剑指 Offer 51. 数组中的逆序对</span></h1>\n<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: [7,5,6,4]\n输出: 5\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>0 &lt;= 数组长度 &lt;= 50000</code></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>文字少少，难度大大</p>\n<p>直接暴力肯定是不行的，需要用到归并排序，在合并时，左右两数组（ <code>s~mid</code>  、 <code>mid+1~e</code> ）各自都是从小到大排好序的，那么当左指针  <code>i</code>  指向的数大于右指针  <code>j</code>  指向的数即  <code>nums[i] &gt; nums[j]</code>  时，则  <code>i~mid</code>  的元素均大于  <code>j</code>  位置上的元素，此时产生的逆序对个数即为  <code>mid-i+1</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reversePairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 合并 s~mid mid+1~e</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 新数组的下标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 大于 说明产生了逆序对～</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                res <span class=\"token operator\">+=</span> mid<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;=</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>s<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">>=</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "数组",
                "分治",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day29/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day29/",
            "title": "剑指offer day29 动态规划（困难）",
            "date_published": "2022-04-27T13:12:00.000Z",
            "content_html": "<p>day29 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhlbmctemUtYmlhby1kYS1zaGktcGktcGVpLWxjb2Yv\">剑指 Offer 19. 正则表达式匹配</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hvdS1zaHUtbGNvZi8=\">剑指 Offer 49. 丑数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbmdlLXRvdS16aS1kZS1kaWFuLXNodS1sY29mLw==\">剑指 Offer 60. n 个骰子的点数</span></p>\n<p>知识点：字符串、数学、动态规划，难度为困难、中等、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhlbmctemUtYmlhby1kYS1zaGktcGktcGVpLWxjb2Yv\">剑指 Offer 19. 正则表达式匹配</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hvdS1zaHUtbGNvZi8=\">剑指 Offer 49. 丑数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2hhc2gtdGFibGU=\">哈希表</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbmdlLXRvdS16aS1kZS1kaWFuLXNodS1sY29mLw==\">剑指 Offer 60. n 个骰子的点数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3Byb2JhYmlsaXR5LWFuZC1zdGF0aXN0aWNz\">概率与统计</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-19-正则表达式匹配\"><a class=\"anchor\" href=\"#剑指-offer-19-正则表达式匹配\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhlbmctemUtYmlhby1kYS1zaGktcGktcGVpLWxjb2Yv\">剑指 Offer 19. 正则表达式匹配</span></h1>\n<p>请实现一个函数用来匹配包含 <code>'. '</code>  和 <code>'*'</code>  的正则表达式。模式中的字符 <code>'.'</code>  表示任意一个字符，而 <code>'*'</code>  表示它前面的字符可以出现任意次（含 0 次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串 <code>&quot;aaa&quot;</code>  与模式 <code>&quot;a.a&quot;</code>  和 <code>&quot;ab*ac*a&quot;</code>  匹配，但与 <code>&quot;aa.a&quot;</code>  和 <code>&quot;ab*a&quot;</code>  均不匹配。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入:\ns = &quot;aa&quot;\np = &quot;a&quot;\n输出: false\n解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入:\ns = &quot;aa&quot;\np = &quot;a*&quot;\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 &quot;aa&quot; 可被视为 'a' 重复了一次。\n</code></pre>\n<p><strong>示例 3:</strong></p>\n<pre><code>输入:\ns = &quot;ab&quot;\np = &quot;.*&quot;\n输出: true\n解释: &quot;.*&quot; 表示可匹配零个或多个（'*'）任意字符（'.'）。\n</code></pre>\n<p><strong>示例 4:</strong></p>\n<pre><code>输入:\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 &quot;aab&quot;。\n</code></pre>\n<p><strong>示例 5:</strong></p>\n<pre><code>输入:\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n输出: false\n</code></pre>\n<ul>\n<li><code>s</code>  可能为空，且只包含从  <code>a-z</code>  的小写字母。</li>\n<li><code>p</code>  可能为空，且只包含从  <code>a-z</code>  的小写字母以及字符  <code>.</code>  和  <code>*</code> ，无连续的  <code>'*'</code> 。</li>\n</ul>\n<p>注意：本题与主站 10 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVndWxhci1leHByZXNzaW9uLW1hdGNoaW5nLw==\">https://leetcode-cn.com/problems/regular-expression-matching/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>不愧是困难题，想不出来<sup>_</sup></p>\n<p>看完题解，wow 还有这种思路</p>\n<ul>\n<li><code>dp[i][j]</code>  表示  <code>s</code>  中前  <code>i</code>  个字符是否匹配  <code>p</code>  中前  <code>j</code>  个字符</li>\n<li><code>dp[0][0]</code>  是可行的，置为  <code>true</code> ，其他初始置为  <code>false</code></li>\n</ul>\n<p>遍历时</p>\n<ul>\n<li>若  <code>p</code>  中 第  <code>j</code>  个字符不是 <code>*</code>  或  <code>.</code> ，则必须在 s 中匹配一个相同的字母，有  <code>dp[i][j] = s[i] == p[j] ? dp[i-1][j-1]: false</code></li>\n<li>若  <code>p</code>  中 第  <code>j</code>  个字符为 <code>.</code>  一定成功匹配  <code>dp[i][j] = dp[i-1][j-1]</code></li>\n<li>若为  <code>*</code>  则可以\n<ul>\n<li>不匹配字符，将该组合扔掉，不再进行匹配   <code>dp[i][j] |= dp[i][j-2]</code></li>\n<li>匹配  <code>s</code>  末尾的一个字符，将该字符扔掉，而该组合还可以继续进行匹配   <code>dp[i][j] = dp[i-1][j] | dp[i][j-2]</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;string&#125; p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isMatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">let</span> c2 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 不使用 *</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                c2 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-49-丑数\"><a class=\"anchor\" href=\"#剑指-offer-49-丑数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hvdS1zaHUtbGNvZi8=\">剑指 Offer 49. 丑数</span></h1>\n<p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n</code></pre>\n<p><strong>说明:</strong></p>\n<ol>\n<li><code>1</code>  是丑数。</li>\n<li><code>n</code>  <strong>不超过</strong> 1690。</li>\n</ol>\n<p>注意：本题与主站 264 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdWdseS1udW1iZXItaWkv\">https://leetcode-cn.com/problems/ugly-number-ii/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>设 m1、m2、m3 表示 ×2、×3、×5 的结果，比较其指向的值，将最小的放入最终的合并数组中，并将相应指针向后移动一个元素。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">nthUglyNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> m2 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> m3 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i3<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> m5 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i5<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">,</span> m3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">===</span> m2<span class=\"token punctuation\">)</span> i2<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">===</span> m3<span class=\"token punctuation\">)</span> i3<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">===</span> m5<span class=\"token punctuation\">)</span> i5<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-60-n个骰子的点数\"><a class=\"anchor\" href=\"#剑指-offer-60-n个骰子的点数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbmdlLXRvdS16aS1kZS1kaWFuLXNodS1sY29mLw==\">剑指 Offer 60. n 个骰子的点数</span></h1>\n<p>把 n 个骰子扔在地上，所有骰子朝上一面的点数之和为 s。输入 n，打印出 s 的所有可能的值出现的概率。</p>\n<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>1 &lt;= n &lt;= 11</code></p>\n<h2 id=\"思路及代码-3\"><a class=\"anchor\" href=\"#思路及代码-3\">#</a> 思路及代码</h2>\n<p>dp [i][j] 表示 i 个骰子时，点数总和取值的概率</p>\n<ul>\n<li>如 1 个骰子的时候总和可能为 [1, 2, 3, 4, 5, 6]</li>\n<li>2 个骰子时，为 [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</li>\n<li>i 个骰子时，总和个数为  <code>6*i-(i-1)</code>  化简为  <code>5*i+1</code></li>\n<li>由于新增骰子的点数只可能为 1 至 6 ，因此概率  <code>dp[i-1][x]</code>  仅与  <code>dp[i][x+1]</code> ,  <code>dp[i][x+2]</code> , ... ,  <code>dp[i][x+6]</code>  相关。因此，遍历  <code>dp[i-1]</code>  中各点数和的概率贡献值，并将贡献值相加至  <code>dp[i]</code>  中所有相关项，即可完成的递推。。</li>\n<li>也就是说，增加骰子的个数到  <code>i</code>  个时， <code>i-1</code>  个骰子的点数  <code>j</code>  会对拥有  <code>i</code>  个骰子时的点数  <code>j+k</code>  产生影响</li>\n<li>由于每次都只跟  <code>i-1</code>  有关，故可优化空间</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">dicesProbability</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//i 个骰子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// i*6-(i-1)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  j <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                next<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        dp <span class=\"token operator\">=</span> next</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> dp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "动态规划",
                "字符串",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day28/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day28/",
            "title": "剑指offer day28 搜索与回溯算法（困难）",
            "date_published": "2022-04-26T14:32:00.000Z",
            "content_html": "<p>day28 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveHUtbGllLWh1YS1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 37. 序列化二叉树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemktZnUtY2h1YW4tZGUtcGFpLWxpZS1sY29mLw==\">剑指 Offer 38. 字符串的排列</span></p>\n<p>知识点：树、字符串、回溯，难度为困难、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveHUtbGllLWh1YS1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 37. 序列化二叉树</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3RyZWU=\">树</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RlcHRoLWZpcnN0LXNlYXJjaA==\">深度优先搜索</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemktZnUtY2h1YW4tZGUtcGFpLWxpZS1sY29mLw==\">剑指 Offer 38. 字符串的排列</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JhY2t0cmFja2luZw==\">回溯</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-37-序列化二叉树\"><a class=\"anchor\" href=\"#剑指-offer-37-序列化二叉树\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveHUtbGllLWh1YS1lci1jaGEtc2h1LWxjb2Yv\">剑指 Offer 37. 序列化二叉树</span></h1>\n<p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>\n<p>你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n<p><strong>提示：</strong> 输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmxlZXRjb2RlLWNuLmNvbS9oYy9rYi9hcnRpY2xlLzExOTQzNTMv\">LeetCode 序列化二叉树的格式</span>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>\n<p><strong>示例：</strong></p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70a2e7018db1416dab0c4907d0e73893~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n<pre><code>输入： root = [1,2,3,null,null,4,5]\n输出： [1,2,3,null,null,4,5]\n</code></pre>\n<p>注意：本题与主站 297 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2VyaWFsaXplLWFuZC1kZXNlcmlhbGl6ZS1iaW5hcnktdHJlZS8=\">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<ul>\n<li>序列化：先序遍历二叉树，遇到空子树的时序列化成  <code>N,</code> ，值序列化为值 + <code>,</code>  并继续递归序列化。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> str<span class=\"token operator\">+</span><span class=\"token string\">'N,'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    str <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> str</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>反序列化：将原先的序列分割开来，得到元素列表，然后从左向右遍历这个序列\n<ul>\n<li>当前的元素为  <code>N</code>  则当前为空树</li>\n<li>先解析这棵树的左子树，再解析它的右子树</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> root </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>完整代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * function TreeNode(val) &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     this.val = val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     this.left = this.right = null;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * Encodes a tree to a single string.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @param &#123;TreeNode&#125; root</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @return &#123;string&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">serialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> str<span class=\"token operator\">+</span><span class=\"token string\">'N,'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        str <span class=\"token operator\">=</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> str</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">seria</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * Decodes your encoded data to tree.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param &#123;string&#125; data</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @return &#123;TreeNode&#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deserialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> root </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">deseria</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * Your functions will be called as such:</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * deserialize(serialize(root));</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> */</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-38-字符串的排列\"><a class=\"anchor\" href=\"#剑指-offer-38-字符串的排列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemktZnUtY2h1YW4tZGUtcGFpLWxpZS1sY29mLw==\">剑指 Offer 38. 字符串的排列</span></h1>\n<p>输入一个字符串，打印出该字符串中字符的所有排列。</p>\n<p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入： s = &quot;abc&quot;\n输出：[ &quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot; ]\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>1 &lt;= s 的长度 &lt;= 8</code></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>经典の字符串全排列</p>\n<p>不过注意，这里是有重复元素的全排列～所以需要用到 map，之前出现过的就不必再排列</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;string[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">permutation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">permu</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rest<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rest<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            m<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">permu</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> str<span class=\"token operator\">+</span>rest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">permu</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "树",
                "字符串",
                "回溯"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day27/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day27/",
            "title": "剑指offer day27 栈与队列（困难）",
            "date_published": "2022-04-25T15:32:00.000Z",
            "content_html": "<p>day27 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaHVhLWRvbmctY2h1YW5nLWtvdS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - I. 滑动窗口的最大值</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZHVpLWxpZS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - II. 队列的最大值</span></p>\n<p>知识点：队列、设计、滑动窗口，难度为困难、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaHVhLWRvbmctY2h1YW5nLWtvdS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - I. 滑动窗口的最大值</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3F1ZXVl\">队列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NsaWRpbmctd2luZG93\">滑动窗口</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21vbm90b25pYy1xdWV1ZQ==\">单调队列</span></td>\n<td>困难</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZHVpLWxpZS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - II. 队列的最大值</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2Rlc2lnbg==\">设计</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3F1ZXVl\">队列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21vbm90b25pYy1xdWV1ZQ==\">单调队列</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-59-i-滑动窗口的最大值\"><a class=\"anchor\" href=\"#剑指-offer-59-i-滑动窗口的最大值\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaHVhLWRvbmctY2h1YW5nLWtvdS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - I. 滑动窗口的最大值</span></h1>\n<p>给定一个数组  <code>nums</code>  和滑动窗口的大小  <code>k</code> ，请找出所有滑动窗口里的最大值。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre>\n<p><strong>提示：</strong></p>\n<p>你可以假设 <em>k</em> 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p>\n<p>注意：本题与主站 239 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2xpZGluZy13aW5kb3ctbWF4aW11bS8=\">https://leetcode-cn.com/problems/sliding-window-maximum/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p><a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day16/#239\">冲刺春招 - 精选笔面试 66 题大通关 16</a> 同款题</p>\n<p>用一个队列 q 存储下标，其对应元素单调递减</p>\n<ul>\n<li>若滑动窗口中两个元素  <code>j &lt; i</code>  并且  <code>nums[j] &lt;= nums[i]</code>  ，只要  <code>j</code>  还在窗口中，那么  <code>i</code>  一定也还在窗口中，所以最值一定不是  <code>nums[j]</code> ，故可以将其移除</li>\n<li>滑动过程中记录，若队尾元素小于等于当前新元素，则弹出，直到为空或者队尾元素大于新元素</li>\n<li>同时若队头所存下标  <code>q[0]</code>  小于窗口左侧  <code>l</code> ，则不断将队首弹出</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; k</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxSlidingWindow</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> l<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-59-ii-队列的最大值\"><a class=\"anchor\" href=\"#剑指-offer-59-ii-队列的最大值\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZHVpLWxpZS1kZS16dWktZGEtemhpLWxjb2Yv\">剑指 Offer 59 - II. 队列的最大值</span></h1>\n<p>请定义一个队列并实现函数  <code>max_value</code>  得到队列里的最大值，要求函数 <code>max_value</code> 、 <code>push_back</code>  和  <code>pop_front</code>  的<strong>均摊</strong>时间复杂度都是 O (1)。</p>\n<p>若队列为空， <code>pop_front</code>  和  <code>max_value</code>  需要返回 -1</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: \n[&quot;MaxQueue&quot;,&quot;push_back&quot;,&quot;push_back&quot;,&quot;max_value&quot;,&quot;pop_front&quot;,&quot;max_value&quot;]\n[[],[1],[2],[],[],[]]\n输出: [null,null,null,2,1,2]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入: \n[&quot;MaxQueue&quot;,&quot;pop_front&quot;,&quot;max_value&quot;]\n[[],[],[]]\n输出: [null,-1,-1]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= push_back,pop_front,max_value的总操作数 &lt;= 10000</code></li>\n<li><code>1 &lt;= value &lt;= 10^5</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>比较类似之前的 min 栈：<a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/offer/day1/#offer-30-min\">剑指 offer day1 栈与队列（简单）</a></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @algorithm @lc id=100337 lang=javascript </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @title dui-lie-de-zui-da-zhi-lcof</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">MaxQueue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">MaxQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">max_value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @param &#123;number&#125; value</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">MaxQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">push_back</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token class-name\">MaxQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">pop_front</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxq<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> value</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * Your MaxQueue object will be instantiated and called as such:</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * var obj = new MaxQueue()</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> * var param_1 = obj.max_value()</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> * obj.push_back(value)</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> * var param_3 = obj.pop_front()</pre></td></tr><tr><td data-num=\"44\"></td><td><pre> */</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "滑动窗口",
                "队列",
                "设计"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day26/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day26/",
            "title": "剑指offer day26 字符串（中等）",
            "date_published": "2022-04-24T15:00:00.000Z",
            "content_html": "<p>day26 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlhby1zaGktc2h1LXpoaS1kZS16aS1mdS1jaHVhbi1sY29mLw==\">剑指 Offer 20. 表示数值的字符串</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmEtemktZnUtY2h1YW4temh1YW4taHVhbi1jaGVuZy16aGVuZy1zaHUtbGNvZi8=\">剑指 Offer 67. 把字符串转换成整数</span></p>\n<p>知识点：字符串、模拟，难度为中等、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlhby1zaGktc2h1LXpoaS1kZS16aS1mdS1jaHVhbi1sY29mLw==\">剑指 Offer 20. 表示数值的字符串</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmEtemktZnUtY2h1YW4temh1YW4taHVhbi1jaGVuZy16aGVuZy1zaHUtbGNvZi8=\">剑指 Offer 67. 把字符串转换成整数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0cmluZw==\">字符串</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-20-表示数值的字符串\"><a class=\"anchor\" href=\"#剑指-offer-20-表示数值的字符串\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlhby1zaGktc2h1LXpoaS1kZS16aS1mdS1jaHVhbi1sY29mLw==\">剑指 Offer 20. 表示数值的字符串</span></h1>\n<p>请实现一个函数用来判断字符串是否表示<strong>数值</strong>（包括整数和小数）。</p>\n<p><strong>数值</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>若干空格</li>\n<li>一个 <strong>小数</strong> 或者 <strong>整数</strong></li>\n<li>（可选）一个  <code>'e'</code>  或  <code>'E'</code>  ，后面跟着一个 <strong>整数</strong></li>\n<li>若干空格</li>\n</ol>\n<p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>\n<p>（可选）一个符号字符（ <code>'+'</code>  或  <code>'-'</code> ）</p>\n</li>\n<li>\n<p>下述格式之一：</p>\n<ol>\n<li>至少一位数字，后面跟着一个点  <code>'.'</code></li>\n<li>至少一位数字，后面跟着一个点  <code>'.'</code>  ，后面再跟着至少一位数字</li>\n<li>一个点  <code>'.'</code>  ，后面跟着至少一位数字</li>\n</ol>\n</li>\n</ol>\n<p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>（可选）一个符号字符（ <code>'+'</code>  或  <code>'-'</code> ）</li>\n<li>至少一位数字</li>\n</ol>\n<p>部分<strong>数值</strong>列举如下：</p>\n<ul>\n<li><code>[&quot;+100&quot;, &quot;5e2&quot;, &quot;-123&quot;, &quot;3.1416&quot;, &quot;-1E-16&quot;, &quot;0123&quot;]</code></li>\n</ul>\n<p>部分<strong>非数值</strong>列举如下：</p>\n<ul>\n<li><code>[&quot;12e&quot;, &quot;1a3.14&quot;, &quot;1.2.3&quot;, &quot;+-5&quot;, &quot;12e+5.4&quot;]</code></li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： s = &quot;0&quot;\n输出： true\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： s = &quot;e&quot;\n输出： false\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入： s = &quot;.&quot;\n输出： false\n</code></pre>\n<p><strong>示例 4：</strong></p>\n<pre><code>输入： s = &quot;    .1  &quot;\n输出： true\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 20</code></li>\n<li><code>s</code>  仅含英文字母（大写和小写），数字（ <code>0-9</code> ），加号  <code>'+'</code>  ，减号  <code>'-'</code>  ，空格  <code>' '</code>  或者点  <code>'.'</code>  。</li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>简简单单一个模拟</p>\n<ul>\n<li>去除前后空格</li>\n<li>判断是否存在 e/E\n<ul>\n<li>存在则判断前缀是否为整数 / 小数，再判断后缀是否为整数</li>\n<li>不存在则直接判断整个是否为整数 / 小数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 去除前后空格</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>cnt </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">judgeDouble</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">let</span> isDot <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDot<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span> cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                isDot <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDot<span class=\"token punctuation\">)</span> pre <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> idx <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">let</span> post <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judgeDouble</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">judgeInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">judgeDouble</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-67-把字符串转换成整数\"><a class=\"anchor\" href=\"#剑指-offer-67-把字符串转换成整数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmEtemktZnUtY2h1YW4temh1YW4taHVhbi1jaGVuZy16aGVuZy1zaHUtbGNvZi8=\">剑指 Offer 67. 把字符串转换成整数</span></h1>\n<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n<p><strong>说明：</strong></p>\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: &quot;42&quot;\n输出: 42\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: &quot;   -42&quot;\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n</code></pre>\n<p><strong>示例 3:</strong></p>\n<pre><code>输入: &quot;4193 with words&quot;\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n</code></pre>\n<p><strong>示例 4:</strong></p>\n<pre><code>输入: &quot;words and 987&quot;\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n</code></pre>\n<p><strong>示例 5:</strong></p>\n<pre><code>输入: &quot;-91283472332&quot;\n输出: -2147483648\n解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n</code></pre>\n<p>注意：本题与主站 8 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3RyaW5nLXRvLWludGVnZXItYXRvaS8=\">https://leetcode-cn.com/problems/string-to-integer-atoi/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>官解是写了个自动机……</p>\n<p>纯纯的模拟就行了</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">strToInt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">?</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">++</span>idx</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">let</span> Int_max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> Int_min <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDigit</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span>flag <span class=\"token operator\">>=</span> Int_max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Int_max</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span>flag <span class=\"token operator\">&lt;=</span> Int_min<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Int_min</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token operator\">++</span>idx</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token operator\">*</span>flag</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "模拟",
                "字符串"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day25/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day25/",
            "title": "剑指offer day25 模拟（中等）",
            "date_published": "2022-04-23T15:00:00.000Z",
            "content_html": "<p>day25 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1bi1zaGktemhlbi1kYS15aW4tanUtemhlbi1sY29mLw==\">剑指 Offer 29. 顺时针打印矩阵</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhhbi1kZS15YS1ydS1kYW4tY2h1LXh1LWxpZS1sY29mLw==\">剑指 Offer 31. 栈的压入、弹出序列</span></p>\n<p>知识点：数组、栈、模拟，难度为简单、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1bi1zaGktemhlbi1kYS15aW4tanUtemhlbi1sY29mLw==\">剑指 Offer 29. 顺时针打印矩阵</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdHJpeA==\">矩阵</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NpbXVsYXRpb24=\">模拟</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhhbi1kZS15YS1ydS1kYW4tY2h1LXh1LWxpZS1sY29mLw==\">剑指 Offer 31. 栈的压入、弹出序列</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3N0YWNr\">栈</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3NpbXVsYXRpb24=\">模拟</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-29-顺时针打印矩阵\"><a class=\"anchor\" href=\"#剑指-offer-29-顺时针打印矩阵\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1bi1zaGktemhlbi1kYS15aW4tanUtemhlbi1sY29mLw==\">剑指 Offer 29. 顺时针打印矩阵</span></h1>\n<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出： [1,2,3,6,9,8,7,4,5]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出： [1,2,3,4,8,12,11,10,9,5,6,7]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= matrix.length &lt;= 100</code></li>\n<li><code>0 &lt;= matrix[i].length &lt;= 100</code></li>\n</ul>\n<p>注意：本题与主站 54 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3BpcmFsLW1hdHJpeC8=\">https://leetcode-cn.com/problems/spiral-matrix/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>这不还是螺旋矩阵嘛！</p>\n<p>移步<a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day6/#54\">冲刺春招 - 精选笔面试 66 题大通关 day6</a></p>\n<ul>\n<li>每次就一直往右下左上的顺序走就行了</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[][]&#125; matrix</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">spiralOrder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">matrix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span>m</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>r<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-31-栈的压入-弹出序列\"><a class=\"anchor\" href=\"#剑指-offer-31-栈的压入-弹出序列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemhhbi1kZS15YS1ydS1kYW4tY2h1LXh1LWxpZS1sY29mLw==\">剑指 Offer 31. 栈的压入、弹出序列</span></h1>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出： true\n解释： 我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出： false\n解释： 1 不能在 2 之前弹出。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n<li><code>pushed</code>  是  <code>popped</code>  的排列。</li>\n</ol>\n<p>注意：本题与主站 946 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWRhdGUtc3RhY2stc2VxdWVuY2VzLw==\">https://leetcode-cn.com/problems/validate-stack-sequences/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>每次入栈后判断是否可以弹出序列。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @title zhan-de-ya-ru-dan-chu-xu-lie-lcof</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number[]&#125; pushed</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;number[]&#125; popped</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @return &#123;boolean&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">validateStackSequences</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pushed<span class=\"token punctuation\">,</span> popped</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pushed<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pushed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> popped<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token operator\">++</span>cnt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "模拟",
                "栈",
                "数组"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day24/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day24/",
            "title": "剑指offer day24 数学（中等）",
            "date_published": "2022-04-22T15:49:00.000Z",
            "content_html": "<p>day24 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mLw==\">剑指 Offer 14- I. 剪绳子</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGUtd2VpLXNkZS1saWFuLXh1LXpoZW5nLXNodS14dS1saWUtbGNvZi8=\">剑指 Offer 57 - II. 和为 s 的连续正数序列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveXVhbi1xdWFuLXpob25nLXp1aS1ob3Utc2hlbmcteGlhLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 62. 圆圈中最后剩下的数字</span></p>\n<p>知识点：数学、双指针，难度为中等、简单、简单</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mLw==\">剑指 Offer 14- I. 剪绳子</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2R5bmFtaWMtcHJvZ3JhbW1pbmc=\">动态规划</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGUtd2VpLXNkZS1saWFuLXh1LXpoZW5nLXNodS14dS1saWUtbGNvZi8=\">剑指 Offer 57 - II. 和为 s 的连续正数序列</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3R3by1wb2ludGVycw==\">双指针</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2VudW1lcmF0aW9u\">枚举</span></td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveXVhbi1xdWFuLXpob25nLXp1aS1ob3Utc2hlbmcteGlhLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 62. 圆圈中最后剩下的数字</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3JlY3Vyc2lvbg==\">递归</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>简单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-14-i-剪绳子\"><a class=\"anchor\" href=\"#剑指-offer-14-i-剪绳子\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mLw==\">剑指 Offer 14- I. 剪绳子</span></h1>\n<p>给你一根长度为  <code>n</code>  的绳子，请把绳子剪成整数长度的  <code>m</code>  段（m、n 都是整数，n&gt;1 并且 m&gt;1），每段绳子的长度记为  <code>k[0],k[1]...k[m-1]</code>  。请问  <code>k[0]*k[1]*...*k[m-1]</code>  可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= n &lt;= 58</code></li>\n</ul>\n<p>注意：本题与主站 343 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW50ZWdlci1icmVhay8=\">https://leetcode-cn.com/problems/integer-break/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>数学题，没做出来，看了题解的推导 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvamlhbi1zaGVuZy16aS1sY29mL3NvbHV0aW9uL21pYW4tc2hpLXRpLTE0LWktamlhbi1zaGVuZy16aS10YW4teGluLXNpLXhpYW5nLWJ5Lw==\">面试题 14- I. 剪绳子</span>，主要有以下几点</p>\n<ul>\n<li>将绳子以相等长度切分为多段时，所得乘积最大。</li>\n<li>尽可能将绳子以 <code>长度3等分</code>  为多段时，乘积最大\n<ul>\n<li>若最后一段为  <code>2</code>  保留，不在拆分为  <code>1+1</code></li>\n<li>若最后一段为  <code>1</code>  应将一份  <code>3+1</code>  换为  <code>2+2</code> <br />\n 则有以下算法流程：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cuttingRope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-57-ii-和为s的连续正数序列\"><a class=\"anchor\" href=\"#剑指-offer-57-ii-和为s的连续正数序列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGUtd2VpLXNkZS1saWFuLXh1LXpoZW5nLXNodS14dS1saWUtbGNvZi8=\">剑指 Offer 57 - II. 和为 s 的连续正数序列</span></h1>\n<p>输入一个正整数  <code>target</code>  ，输出所有和为  <code>target</code>  的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： target = 9\n输出： [[2,3,4],[4,5]]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： target = 15\n输出： [[1,2,3,4,5],[4,5,6],[7,8]]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= target &lt;= 10^5</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>双指针。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; target</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[][]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findContinuousSequence</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">++</span>l</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>r</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token operator\">++</span>l</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-62-圆圈中最后剩下的数字\"><a class=\"anchor\" href=\"#剑指-offer-62-圆圈中最后剩下的数字\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveXVhbi1xdWFuLXpob25nLXp1aS1ob3Utc2hlbmcteGlhLWRlLXNodS16aS1sY29mLw==\">剑指 Offer 62. 圆圈中最后剩下的数字</span></h1>\n<p>0,1,・・・,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3。</p>\n<p></p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入: n = 5, m = 3\n输出: 3\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入: n = 10, m = 17\n输出: 2\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 10^5</code></li>\n<li><code>1 &lt;= m &lt;= 10^6</code></li>\n</ul>\n<h2 id=\"思路及代码-3\"><a class=\"anchor\" href=\"#思路及代码-3\">#</a> 思路及代码</h2>\n<p>约瑟夫环。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; m</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lastRemaining</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> i</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "双指针",
                "数学"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/2022-life-review/",
            "url": "https://ysx.cosine.ren/2022-life-review/",
            "title": "2022，写给自己的一篇文章",
            "date_published": "2022-04-21T18:02:14.000Z",
            "content_html": "<p>2022，写给自己的一篇文章</p>\n<p>就在这几天，我的春招找实习结束了。投了很多家，挂了很多家，总结了不少经验教训。有很多不甘，意识到了自己的不足还有很多，也开始每天刷刷题，为秋招提前批做准备了。</p>\n<p>有感而发，写一篇记录自己过去的博客，后面可能随意更新。</p>\n<p><span id=\"more\"></span></p>\n<p>翻看相册，翻到了高中的毕业留念，顿时就怀念起来了。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/qq_pic_merged_1650557249898.jpg\" alt=\"qq_pic_merged_1650557249898.jpg\" /></p>\n<p>刚报这个专业的时候，老爸虽然不建议我走他的老路，但还是没有反对，所有志愿填的都是计算机或者软件工程，事实上，上了大学之后才发现，我好像真的找到了我热爱的东西，那就是编程。同学、老师、很多人对我的第一反应都是，妹子也喜欢写代码？多无趣啊，以后头发肯定少（虽然发量确实少）。也有觉得很酷的。甚至连我自己都一度有点怀疑自己，去知乎搜过不少相关回答（女生学计算机怎么怎么样 xxxx……），但是，到了大一下学期之后，我明白了压根就没什么性别之分，还是热爱重要。我也不喜欢别人拿我跟别女生比较，我就是我，敲代码是兴趣，若这份兴趣能赚到钱就更棒了，仅此而已。</p>\n<p>我不是个喜欢写命题作文的人，也不是个擅长于考试与应试教育的人。从高中开始，我就意识到了这一点。“没有什么文化细胞，写的东西都是流水账”...... 所以这篇文章也是我无聊到一定境界才会发生的一个奇迹。高中的我喜欢数学，讨厌理综和语文、英语，到了大学我也依然不喜欢大物，但是慢慢的，喜欢用博客记录一些流水账，不论是技术还是生活。</p>\n<p>上大学以来，发生了很多以前没有想过的事，也收获了很多东西。这个大学过的还是蛮充实的，社团留任部长、学生会留任部长、奖学金也拿了一年的、也成为了预备党员、勤工俭学也干过、各种校奖也都拿了一遍、绩点也拿了一次班级第一、竞赛也打过不少小比赛、也折腾过云服务器、挂过自动打卡、写过爬虫、参加各种训练营……</p>\n<p>但是，充实并不代表着就能学到很多，现在想想，也做过不少当时看来牛逼极了，现在觉得是无用功的事情。很多时候反而是在白忙活……</p>\n<p>技术上，不能自满，不能停滞不前…… 大学以来的课设，全部都是自己独立完成，虽然分数高低很玄学（自觉还行的数据库课设，只得了一个中，自觉不太行的 c++ 课设和 Java 课设都拿了优）。犹记得当初 Java 课设，见到学长用 JavaFX 写而不是 swing 写的界面后惊为天人，决定了不用丑丑的 swing 写而是用 JavaFX 自己定制，当时肝了有一周吧，每天都在敲课设，临近截止的那几天时，甚至睡在了办公室里防止回去敲代码打扰室友。现在：居然要肝那么久，我好菜啊。</p>\n<p>生产力工具上，我从大一的不知所措，甚至用干过手机刷 oj 这件事，到现在熟练使用 idea、datagrip、vscode 等，天知道我都经历了些什么变迁...</p>\n<p>感情上…… 嗯这个不太好意思说，略过</p>\n<p>温馨提示：下面的回忆大多为流水账哦，可以关闭窗口了。</p>\n<h2 id=\"大一上\"><a class=\"anchor\" href=\"#大一上\">#</a> 大一上</h2>\n<p>入学前，怀念那个能跟家长一起逛校园的日子……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/qq_pic_merged_1650557330958.jpg\" alt=\"qq_pic_merged_1650557330958.jpg\" /></p>\n<p>刚来到这个专业的时候，对电脑的认知只停留在打游戏，做做 ppt，写写文档等。自从开学前就在群里了解到编程之后，我就开始看看慕课。</p>\n<p>开学的时候参加了计算机服务社和院学生会，加入计服社这个可能是我大学最重要的决定之一，认识了很多大佬、学长学姐，极大幅度的拓宽了我的圈子和认知，还点亮了修电脑的技能（虽然也就会重装系统和拆不同型号的笔记本康康小问题）。计服社的义修真的很有意思</p>\n<p>最忙的时候，甚至还会发朋友圈抱怨哈哈哈哈哈，现在想想觉得当时的自己可太幼稚了呢，虽然事实上后面还有的是更难的时候。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_044240_1.jpg\" alt=\"IMG_20220418_044240_1.jpg\" /></p>\n<p>那个时候的我还很喜欢拿手机到处拍拍校园风景，对一切都很好奇。加入学生会新媒体后更是拿个相机到处跑，喜欢的不得了。</p>\n<ul>\n<li>拍一拍钟楼</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228694745.jpeg\" alt=\"1650228694745.jpeg\" /></p>\n<ul>\n<li>拍一拍晚霞</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228730266.jpeg\" alt=\"1650228730266.jpeg\" /></p>\n<p>拍一拍澡堂外的小树林</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228815779.jpeg\" alt=\"1650228815779.jpeg\" /></p>\n<p>那个时候还存在着的小蓝，现在都已经不在了</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228872042.jpeg\" alt=\"1650228730266.jpeg\" /></p>\n<p>这是学校哦，莲湖旁的芦苇丛</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228942880.jpeg\" alt=\"1650228942880.jpeg\" /></p>\n<p>拍一拍初雪</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/1650228972597.jpeg\" alt=\"1650228972597.jpeg\" /></p>\n<p>拍一拍军训大阅兵</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229105658.jpg\" alt=\"mmexport1650229105658.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229112534.jpg\" alt=\"mmexport1650229112534.jpg\" /></p>\n<p>新媒体的第一次聚餐</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229146146.jpg\" alt=\"mmexport1650229146146.jpg\" /></p>\n<p>那是大学有幸参加过得第一次院运动会，那时候谁想得到会是最后一次参加。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229193757.jpg\" alt=\"mmexport1650229193757.jpg\" /></p>\n<p>计服社知识竞赛上震撼全场的题目 (人才出题人！是谁捏)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229446870.jpg\" alt=\"mmexport1650229446870.jpg\" /></p>\n<p>雨天躲宿舍安心敲代码，那个时候用的工具还是 cb……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229534361.jpg\" alt=\"mmexport1650229534361.jpg\" /></p>\n<p>关于双十一计服社的群头像：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_050230_1.jpg\" alt=\"IMG_20220418_050230_1.jpg\" /></p>\n<p>计服社的元旦晚会 以及 2019 幼稚的自我总结</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650229658285.jpg\" alt=\"mmexport1650229658285.jpg\" /></p>\n<p>这么幼稚的人谁啊 - -</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_050652_1.jpg\" alt=\"IMG_20220418_050652_1\" /></p>\n<h2 id=\"大一下\"><a class=\"anchor\" href=\"#大一下\">#</a> 大一下</h2>\n<p>在大一上之后的寒假里，我开始提前自学下学期的 c++，对代码依然抱有很大的热情，写过很蠢的自我总结，也干过这种事捏。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_051426_1.jpg\" alt=\"IMG_20220418_051426_1.jpg\" /></p>\n<p>第三次尝试拆机，在家，暴力出奇迹了……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_051553_1.jpg\" alt=\"IMG_20220418_051553_1.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230141443.jpg\" alt=\"mmexport1650230141443.jpg\" /></p>\n<p>开学后继续学习 c++，慕课是跟着 mooc 的某知名慕课学习的，做其中作业 (魔兽世界 123) 时，头一次体验到代码量的增加，一开始写了 100 多行觉得哇我好棒，到后来结课作业写了 700 多行，再到后来课设用 c++ 写了 1000 行，我逐渐理解了一切.jpg，学习了 STL 以及能打一点点比赛了</p>\n<p>开始尝试写博客，将自己的学习理解记录下来。</p>\n<p>c++ 综合案例，第一次尝试写点小游戏</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230237802.jpg\" alt=\"mmexport1650230237802.jpg\" /></p>\n<p>对了，大一下学期其实因为疫情，一直没去学校，线上开的学，也因此大一上结束刚在一起，就异地了近一年......(残念)</p>\n<p>家附近的湖</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230286645.jpg\" alt=\"mmexport1650230286645.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230300651.jpg\" alt=\"mmexport1650230300651.jpg\" /></p>\n<p>寒假开练，练了一暑假的专题之后，作出决定决定走开发路线而不是 acm 路线，原因有很多，如对自己不自信、当时找不到队友、对开发更感兴趣等等。现在想想，也不后悔。</p>\n<h2 id=\"大二上\"><a class=\"anchor\" href=\"#大二上\">#</a> 大二上</h2>\n<p>快逃，这学期全是课。还要打工，5 号楼值班，虽说每个月能挣个三四百的但是还是蛮累的。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230722988.jpg\" alt=\"mmexport1650230722988.jpg\" /></p>\n<p>选修选了桥牌的倒霉孩子 (愿天堂没有桥牌考试)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230527096.jpg\" alt=\"mmexport1650230527096.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230529628.jpg\" alt=\"mmexport1650230529628.jpg\" /></p>\n<p>礼物 × 砖头✓ 但是真的沉</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230581780.jpg\" alt=\"mmexport1650230581780.jpg\" /></p>\n<p>第一次自己做可乐鸡翅！还有第一次炸薯条给自己吃 x 很好吃 (虽然糊了点)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230620273.jpg\" alt=\"mmexport1650230620273.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230963587.jpg\" alt=\"mmexport1650230963587.jpg\" /></p>\n<p>寒假回了老家，看望大黄 (姨奶家超级乖的狗子【怎么感觉眉清目秀的】都不叫的还让随便摸<br />\n就是不知道为啥跟我身上衣服颜色特别搭</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231052859.jpg\" alt=\"mmexport1650231052859.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650230985241.jpg\" alt=\"mmexport1650230985241.jpg\" /></p>\n<h2 id=\"大二下\"><a class=\"anchor\" href=\"#大二下\">#</a> 大二下</h2>\n<p>春天到了，花开的很漂亮</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231082395.jpg\" alt=\"mmexport1650231082395.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231086402.jpg\" alt=\"mmexport1650231086402.jpg\" /></p>\n<p>智能科技联盟，奇怪的技能点增加了！(并没有)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231161300.jpg\" alt=\"mmexport1650231161300.jpg\" /></p>\n<p>为了美术鉴赏论文而去美术馆，对，就这么真实。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231280985.jpg\" alt=\"mmexport1650231280985.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231278039.jpg\" alt=\"mmexport1650231278039.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231223573.jpg\" alt=\"mmexport1650231223573.jpg\" /></p>\n<p>期间，有个超厉害的 20 级学妹一起组队，由于我也没怎么训练，一起去河农大省赛打了铁 QAQ (不过农大的欧式建筑真的是好风光)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231308524.jpg\" alt=\"mmexport1650231308524.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231503148.jpg\" alt=\"mmexport1650231503148.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231316123.jpg\" alt=\"mmexport1650231316123.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231319783.jpg\" alt=\"mmexport1650231319783.jpg\" /></p>\n<p>这学期的绩点看起来倒是稍微没那么拉了（上学期侯老师教的离散和这学期的操作系统都是非常好的老师）</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231572937.jpg\" alt=\"mmexport1650231572937.jpg\" /></p>\n<p>放假了依旧是出去吃吃吃喝喝喝（郑州物价，赞！）</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231542501.jpg\" alt=\"mmexport1650231542501.jpg\" /></p>\n<p>好像是在这个学期，我开发了小爱课程表我们学校的适配，到现在已经有 900 多个人用了，真不可思议……</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/Screenshot_2021-12-24-03-05-56-464_com.miui.voice.jpg\" alt=\"Screenshot_2021-12-24-03-05-56-464_com.miui.voice.jpg\" /></p>\n<p>尝试开发小程序</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1640286522786.jpg\" alt=\"mmexport1640286522786.jpg\" /></p>\n<h2 id=\"大三上\"><a class=\"anchor\" href=\"#大三上\">#</a> 大三上</h2>\n<p>暑假里折腾了云服务器，域名，自动打卡，用 WordPress 搭了简易博客，期间也试过一阵子个人网盘 (感觉没意思)<br />\n 最初的博客样子：丑，但能用</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650231880694.jpg\" alt=\"mmexport1650231880694.jpg\" /></p>\n<p>去考了考 PTA 乙级，虽然并没有满分。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_054405_1.jpg\" alt=\"IMG_20220418_054405_1.jpg\" /></p>\n<p>期间拿了个省银 (终于有个小奖了，感谢队友，感谢 CCTV，感谢)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20220418_054550_1.jpg\" alt=\"IMG_20220418_054550_1.jpg\" /></p>\n<p>欸好像还有天梯赛，去年这个时候～</p>\n<p>《关于我们部门要审核 2019 年所有学生活动跟学院新闻的新闻稿所以我写了个爬虫这件事》<br />\n真  好  玩  呐<br />\n虽然事后并没有用上，突然又不用审核了（落泪</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232036012.jpg\" alt=\"mmexport1650232036012.jpg\" /></p>\n<p>去看联动拿了张海报贴宿舍 (我超 ○)</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232079182.jpg\" alt=\"mmexport1650232079182.jpg\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232115925.jpg\" alt=\"mmexport1650232115925.jpg\" /></p>\n<p>关于 vscode 甚至能用来写汇编这件事</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/mmexport1650232135312.jpg\" alt=\"mmexport1650232135312.jpg (1541×765) (jsdelivr.net)\" /></p>\n<h2 id=\"大三下\"><a class=\"anchor\" href=\"#大三下\">#</a> 大三下</h2>\n<p>之后，就是今年年初，开始学前端，向学长请教，寒假冲了，3 月份开始找暑期实习。期间又双叒叕封校了</p>\n<p>宿舍装备升级！</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/IMG_20211231_172620.jpg\" alt=\"IMG_20211231_172620.jpg\" /></p>\n<p>哦对，放一张今年铜三铁四的春招实习战况：非常惨烈。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/yusixian/imgBed/life/spring-2022-yuque.png\" alt=\"spring-2022-yuque.png\" /></p>\n",
            "tags": [
                "随笔",
                "总结"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day23/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day23/",
            "title": "剑指offer day23 数学（简单）",
            "date_published": "2022-04-21T07:19:00.000Z",
            "content_html": "<p>day23 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yv\">剑指 Offer 39. 数组中出现次数超过一半的数字</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ291LWppYW4tY2hlbmctamktc2h1LXp1LWxjb2Yv\">剑指 Offer 66. 构建乘积数组</span></p>\n<p>知识点：数组、哈希、前缀和，难度为简单、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yv\">剑指 Offer 39. 数组中出现次数超过一半的数字</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2hhc2gtdGFibGU=\">哈希表</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2RpdmlkZS1hbmQtY29ucXVlcg==\">分治</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2NvdW50aW5n\">计数</span> \\</td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ291LWppYW4tY2hlbmctamktc2h1LXp1LWxjb2Yv\">剑指 Offer 66. 构建乘积数组</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL3ByZWZpeC1zdW0=\">前缀和</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-39-数组中出现次数超过一半的数字\"><a class=\"anchor\" href=\"#剑指-offer-39-数组中出现次数超过一半的数字\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yv\">剑指 Offer 39. 数组中出现次数超过一半的数字</span></h1>\n<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2\n</code></pre>\n<p><strong>限制：</strong></p>\n<p><code>1 &lt;= 数组长度 &lt;= 50000</code></p>\n<p>注意：本题与主站 169 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWFqb3JpdHktZWxlbWVudC8=\">https://leetcode-cn.com/problems/majority-element/</span></p>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>思路一：利用哈希，当出现次数超过一半就立刻返回，但这样空间复杂度和时间复杂度都为 O (n)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">majorityElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            m<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>思路二：在大神<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdS9qeWQv\"> Krahets</span> 题解中提到的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLWd1by15aS1iYW4tZGUtc2h1LXppLWxjb2Yvc29sdXRpb24vbWlhbi1zaGktdGktMzktc2h1LXp1LXpob25nLWNodS14aWFuLWNpLXNodS1jaGFvLTMv\">摩尔投票法</span>，主要要注意两个推论，详见题解。</p>\n<ul>\n<li>推论一： 若记 <strong>众数</strong> 的票数为  <code>+1</code>  ，<strong>非众数</strong> 的票数为  <code>-1</code>  ，则一定有所有数字的<strong>票数和</strong>  <code>&gt; 0</code> 。</li>\n<li>推论二： 若数组的前  <code>a</code>  个数字的 <strong>票数和</strong>  <code>= 0</code>  ，则 数组剩余  <code>(n−a)</code>  个数字的 <strong>票数和一定仍</strong>  <code>&gt; 0</code>  ，即后  <code>(n-a)</code>  个数字的 众数仍为  <code>x</code> 。</li>\n</ul>\n<blockquote>\n<p>ps：这个思路真是清奇。没想到</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">majorityElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> vote <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> candidate <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vote <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            candidate <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        vote <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> candidate<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> candidate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-66-构建乘积数组\"><a class=\"anchor\" href=\"#剑指-offer-66-构建乘积数组\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ291LWppYW4tY2hlbmctamktc2h1LXp1LWxjb2Yv\">剑指 Offer 66. 构建乘积数组</span></h1>\n<p>给定一个数组  <code>A[0,1,…,n-1]</code> ，请构建一个数组  <code>B[0,1,…,n-1]</code> ，其中  <code>B[i]</code>  的值是数组  <code>A</code>  中除了下标  <code>i</code>  以外的元素的积，即  <code>B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]</code> 。不能使用除法。</p>\n<p><strong>示例:</strong></p>\n<pre><code>输入: [1,2,3,4,5]\n输出: [120,60,40,30,24]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>所有元素乘积之和不会溢出 32 位整数</li>\n<li><code>a.length &lt;= 100000</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>这题就有些类似之前字节校园的题目：<a href=\"https://ysx.cosine.ren/cn/coding-train/leetcode/bytedance/bytedance-day14/#%E6%80%9D%E8%B7%AF-3\">冲刺春招 - 精选笔面试 66 题大通关 day14：135. 分发糖果</a> 的弱化弱化版了，从左往右初始化下数组  <code>l</code> ,  <code>l[i]</code>  表示 i 左侧所有数字的乘积，而第二次遍历从右侧开始，算出右侧乘积和后直接加到数组上。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">constructArr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        l<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 右侧乘积 &amp; res 计算</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            r <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> r</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "哈希",
                "数组",
                "前缀和"
            ]
        },
        {
            "id": "https://ysx.cosine.ren/coding-train/leetcode/offer/day22/",
            "url": "https://ysx.cosine.ren/coding-train/leetcode/offer/day22/",
            "title": "剑指offer day22 位运算（中等）",
            "date_published": "2022-04-20T12:30:00.000Z",
            "content_html": "<p>day22 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtbGNvZi8=\">剑指 Offer 56 - I. 数组中数字出现的次数</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtaWktbGNvZi8=\">剑指 Offer 56 - II. 数组中数字出现的次数 II</span></p>\n<p>知识点：数组、位运算，难度为中等、中等</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtbGNvZi8=\">剑指 Offer 56 - I. 数组中数字出现的次数</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpdC1tYW5pcHVsYXRpb24=\">位运算</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2FycmF5\">数组</span></td>\n<td>中等</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtaWktbGNvZi8=\">剑指 Offer 56 - II. 数组中数字出现的次数 II</span></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL2JpdC1tYW5pcHVsYXRpb24=\">位运算</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdGFnL21hdGg=\">数学</span></td>\n<td>中等</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-56-i-数组中数字出现的次数\"><a class=\"anchor\" href=\"#剑指-offer-56-i-数组中数字出现的次数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtbGNvZi8=\">剑指 Offer 56 - I. 数组中数字出现的次数</span></h1>\n<p>一个整型数组  <code>nums</code>  里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是 O (n)，空间复杂度是 O (1)。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： nums = [4,1,4,6]\n输出： [1,6] 或 [6,1]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： nums = [1,2,10,4,1,4,3,3]\n输出： [2,10] 或 [10,2]\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 10000</code></li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<p>分组进行异或，将相同的数字分至一组，不同的两个数组分至不同的一组，通过 mask 确定分组条件。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">singleNumbers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> xor <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\">// 为这两数字的异或</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    xor <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> mask <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xor <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      mask <span class=\"token operator\">=</span> mask <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            a <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> b <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-56-ii-数组中数字出现的次数-ii\"><a class=\"anchor\" href=\"#剑指-offer-56-ii-数组中数字出现的次数-ii\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LXp1LXpob25nLXNodS16aS1jaHUteGlhbi1kZS1jaS1zaHUtaWktbGNvZi8=\">剑指 Offer 56 - II. 数组中数字出现的次数 II</span></h1>\n<p>在一个数组  <code>nums</code>  中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入： nums = [3,4,3,3]\n输出： 4\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入： nums = [9,1,7,9,7,9,7]\n输出： 1\n</code></pre>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 10000</code></li>\n<li><code>1 &lt;= nums[i] &lt; 2^31</code></li>\n</ul>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<p>每一位贡献加起来 %3，为 1 则为这个数的 1。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">singleNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span> <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            num <span class=\"token operator\">=</span> num <span class=\"token operator\">>></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> ans</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "数组",
                "位运算"
            ]
        }
    ]
}