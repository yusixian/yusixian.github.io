<!DOCTYPE html>
<html lang="en">

<!-- Head tag (contains Google-Analytics、Baidu-Tongji)-->
<head>
  <!-- Google Analytics -->
  
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async="async" src="https://www.googletagmanager.com/gtag/js?id=UA-xxxxxx-xx"></script>
    <script type="text/javascript">
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'UA-xxxxxx-xx');
    </script>
  

  <!-- Baidu Tongji -->
  
    <script type="text/javascript">
      // Originial
      var _hmt = _hmt || [];
      (function () {
        var hm = document.createElement("script");
        hm.src = "https://hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
      })();
    </script>
  

  <!-- Baidu Push -->
  
    <script>
      (function () {
        var bp = document.createElement('script');
        var curProtocol = window.location.protocol.split(':')[0];
        if (curProtocol === 'https') {
          bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
        } else {
          bp.src = 'http://push.zhanzhang.baidu.com/push.js';
        }
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(bp, s);
      })();
    </script>
  

  <meta charset="utf-8"/>
  <meta http-equiv="X-UA-Compatible" content="IE=edge"/>

  <meta name="google-site-verification" content="lxDfCplOZbIzjhG34NuQBgu2gdyRlAtMB4utP5AgEBc"/>
  <meta name="baidu-site-verification" content="PpzM9WxOJU"/>

  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <meta name="description" content="一个正在努力学习前端的程序媛qwq"/>
  <meta name="keyword" content="前端, cos, blog, css, html, c++"/>
  <link rel="shortcut icon" href="/img/avatar/cos.jpg"/>

  <!-- Place this tag in your head or just before your close body tag. -->
  <script async="async" defer="defer" src="https://buttons.github.io/buttons.js"></script>

  
    <!-- Bootstrap Core CSS -->
    <link rel="stylesheet" href="/css/bootstrap.min.css"/>

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/beantech.min.css"/>

    <!-- Pygments Highlight CSS -->
    <link rel="stylesheet" href="/css/highlight.css"/>
    <link rel="stylesheet" href="/css/widget.css"/>
    <link rel="stylesheet" href="/css/rocket.css"/>
    <link rel="stylesheet" href="/css/signature.css"/>
    <link rel="stylesheet" href="/css/catalog.css"/>
    <link rel="stylesheet" href="/css/livemylife.css"/>

    
      <!-- wave start -->
      <link rel="stylesheet" href="/css/wave.css"/>
      <!-- wave end -->
    

    
      <!-- top start (article top hot config) -->
      <link rel="stylesheet" href="/css/top.css"/>
      <!-- top end -->
    

    
      <!-- ThemeColor start -->
      <link rel="stylesheet" href="/css/scroll.css"/>
      <!-- ThemeColor end -->
    

    
      <!-- viewer start (Picture preview) -->
      <link rel="stylesheet" href="/css/viewer.min.css"/>
      <!-- viewer end -->
    

    
      <!-- Search start -->
      <link rel="stylesheet" href="/css/search.css"/>
      <!-- Search end -->
    

    
      <!-- ThemeColor start -->
      <link rel="stylesheet" href="/css/themecolor.css"/>
      <!-- ThemeColor end -->
    

    

    
      <!-- gitalk start -->
      <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"> -->
      <link rel="stylesheet" href="/css/gitalk.css"/>
      <!-- gitalk end -->
    
  

  <!-- Custom Fonts -->
  <!-- <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" type="text/css"> -->
  <!-- Hux change font-awesome CDN to qiniu -->
  <link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.5.0/css/font-awesome.min.css" type="text/css">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

  <!-- Hux Delete, sad but pending in China <link href='http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic' rel='stylesheet' type='text/css'> <link
  href='http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/ css'> -->

  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]> <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script> <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script> <![endif]-->

  <!-- ga & ba script hoook -->
  <link rel="canonical" href="https://ysx.cosine.ren/cn/数据结构学习笔记＜5＞ 二叉搜索树与平衡二叉树/cl1z65nxs008834us2n6d52sd">
  <title>
    
      数据结构学习笔记＜5＞ 二叉搜索树与平衡二叉树 - cos的博客 - WA的一声就哭了
    
  </title>
<meta name="generator" content="Hexo 5.4.1"></head>


<!-- hack iOS CSS :active style -->

	<body ontouchstart="" class="body--light body--light">


		<!-- ThemeColor -->
		
		<!-- ThemeColor -->
<style type="text/css">
  .body--light {
    --light-mode: none;
    --dark-mode: block;
  }
  .body--dark {
    --light-mode: block;
    --dark-mode: none;
  }
  i.mdui-icon.material-icons.light-mode {
    display: var(--light-mode);
  }
  i.mdui-icon.material-icons.dark-mode {
    display: var(--dark-mode);
  }
</style>
<div class="toggle" onclick="document.body.classList.toggle('body--dark')">
  <i class="mdui-icon material-icons light-mode"></i>
  <i class="mdui-icon material-icons dark-mode"></i>
</div>
<script>
  //getCookieValue
  function getCookieValue(a) {
    var b = document.cookie.match('(^|[^;]+)\\s*' + a + '\\s*=\\s*([^;]+)');
    return b
      ? b.pop()
      : '';
  }
  let themeMode = 'light';
  if (getCookieValue('sb-color-mode') && (getCookieValue('sb-color-mode') !== themeMode)) {
    let dbody = document.body.classList;
    themeMode === 'dark' ? dbody.remove('body--dark') : dbody.add('body--dark');
  }

  //setCookieValue
  var toggleBtn = document.querySelector(".toggle");
  toggleBtn.addEventListener("click", function () {
    var e = document.body.classList.contains("body--dark");
    var cookieString = e
      ? "dark"
      : "light";
    var exp = new Date();
    exp.setTime(exp.getTime() + 3 * 24 * 60 * 60 * 1000); //3天过期
    document.cookie = "sb-color-mode=" + cookieString + ";expires=" + exp.toGMTString() + ";path=/";
  });
</script>

		

		<!-- Gitter -->
		
		<!-- Gitter -->
<!-- Docs:https://gitter.im/?utm_source=left-menu-logo -->
<script>
  ((window.gitter = {}).chat = {}).options = {
    room: 'cosine_yu_blog/community'
  };
</script>
<script src="https://sidecar.gitter.im/dist/sidecar.v1.js" async defer></script>

		

		<!-- Navigation (contains search)-->
		<!-- Navigation -->
<nav class="navbar navbar-default navbar-custom navbar-fixed-top">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header page-scroll">
      <button type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">cos的博客</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <!-- Known Issue, found by Hux: <nav>'s height woule be hold on by its content. so, when navbar scale out, the <nav> will cover tags. also mask any touch event of tags, unfortunately. -->
    <div id="huxblog_navbar">
      <div class="navbar-collapse">
        <ul class="nav navbar-nav navbar-right">
          <li>
            <a href="/">首页</a>
          </li>

          
          
          
          
          <li>
            <a href="/about/">
              
              关于
              
              
            </a>
          </li>
          
          
          
          <li>
            <a href="/archive/">
              
              归档
              
              
            </a>
          </li>
          
          
          
          <li>
            <a href="/categories/">
              
              分类
              
              
            </a>
          </li>
          
          
          
          <li>
            <a href="/tags/">
              
              标签
              
              
            </a>
          </li>
          
          

          
          <li>
            <a class="popup-trigger">
              <span class="search-icon"></span>搜索</a>
          </li>
          

          <!-- LangSelect -->
          
        </ul>
      </div>
    </div>
    <!-- /.navbar-collapse -->
  </div>
  <!-- /.container -->
</nav>
<!-- progress -->
<div id="progress">
  <div class="line" style="width: 0%;"></div>
</div>

<script>
  // Drop Bootstarp low-performance Navbar Use customize navbar with high-quality material design animation in high-perf jank-free CSS3 implementation
  var $body = document.body;
  var $toggle = document.querySelector('.navbar-toggle');
  var $navbar = document.querySelector('#huxblog_navbar');
  var $collapse = document.querySelector('.navbar-collapse');

  $toggle.addEventListener('click', handleMagic)

  function handleMagic(e) {
    if ($navbar.className.indexOf('in') > 0) {
      // CLOSE
      $navbar.className = " ";
      // wait until animation end.
      setTimeout(function() {
        // prevent frequently toggle
        if ($navbar.className.indexOf('in') < 0) {
          $collapse.style.height = "0px"
        }
      }, 400)
    } else {
      // OPEN
      $collapse.style.height = "auto"
      $navbar.className += " in";
    }
  }
</script>


		<!-- Post Header (contains intro-header、signature、wordcount、busuanzi、waveoverlay) -->
		<!-- Modified by Yu-Hsuan Yen -->
<!-- Post Header -->

  <style type="text/css">
    .body--light {
      /* intro-header */
      --intro-header-background-image-url-home: url('/img/header_img/93604793_p0.jpg');
      --intro-header-background-image-url-post: url('/img/header_img/lml_bg.jpg');
      --intro-header-background-image-url-page: url('//img/header_img/lml_bg.jpg');
    }
    .body--dark {
      --intro-header-background-image-url-home: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('/img/header_img/93604793_p0.jpg');
      --intro-header-background-image-url-post: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('/img/header_img/lml_bg.jpg');
      --intro-header-background-image-url-page: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('//img/header_img/lml_bg.jpg');
    }

    header.intro-header {
       /*post*/
        background-image: var(--intro-header-background-image-url-post);
        /* background-image: url('/img/header_img/lml_bg.jpg'); */
      
    }

    
  </style>





<header class="intro-header">
  <!-- Signature -->
  <div id="signature">
    <div class="container">
      <div class="row">
        <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
          
          <div class="post-heading">
            <div class="tags">
              
              <a class="tag" href="/tags/#c++" title="c++">c++</a>
              
              <a class="tag" href="/tags/#数据结构" title="数据结构">数据结构</a>
              
              <a class="tag" href="/tags/#二叉树" title="二叉树">二叉树</a>
              
            </div>
            <h1>数据结构学习笔记＜5＞ 二叉搜索树与平衡二叉树</h1>
            <h2 class="subheading">MOOC浙江大学的数据结构慕课学习记录——二叉搜索树与平衡二叉树</h2>
            <span class="meta">
              Posted by cos on
              2020-03-30
            </span>


            
            <!-- WordCount start -->
            <div class="blank_box"></div>
            <span class="meta">
              Estimated Reading Time <span class="post-count">14</span> Minutes
            </span>
            <div class="blank_box"></div>
            <span class="meta">
              Words <span class="post-count">3k</span> In Total
            </span>
            <div class="blank_box"></div>
            <!-- WordCount end -->
            
            
            <!-- 不蒜子统计 start -->
            <span class="meta" id="busuanzi_container_page_pv">
              Viewed <span id="busuanzi_value_page_pv"><i class="fa fa-spinner fa-spin"></i></span> Times
            </span>
            <!-- 不蒜子统计 end -->
            


          </div>
          
        </div>
      </div>
    </div>
  </div>

  
  <!-- waveoverlay start -->
  <div class="preview-overlay">
    <svg class="preview-waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
      <defs>
        <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"></path>
      </defs>
      <g class="preview-parallax">
        <use xlink:href="#gentle-wave" x="48" y="0" fill=var(--gentle-wave1)></use>
        <use xlink:href="#gentle-wave" x="48" y="3" fill=var(--gentle-wave2)></use>
        <use xlink:href="#gentle-wave" x="48" y="5" fill=var(--gentle-wave3)></use>
        <use xlink:href="#gentle-wave" x="48" y="7" fill=var(--gentle-wave)></use>
      </g>
    </svg>
  </div>
  <!-- waveoverlay end -->
  

</header>



		<!-- Main Content (Post contains
	Pager、
	tip、
	socialshare、
	gitalk、gitment、disqus-comment、
	Catalog、
	Sidebar、
	Featured-Tags、
	Friends Blog、
	anchorjs、
	) -->
		<!-- Modify by Yu-Hsuan Yen -->
<!-- Post Content -->
<article>
  <div class="container">
    <div class="row">
      <!-- Post Container -->
      <div class="col-lg-8 col-lg-offset-1 col-md-10 col-md-offset-1 post-container">

        <h1>一、二叉搜索树</h1>
<h2 id="1-二叉搜索树是什么">1.二叉搜索树是什么</h2>
<p>二叉搜索树（<strong>BST</strong>，Binary Search Tree),又称<strong>二叉排序树或二叉查找树</strong>，是一棵二叉树，可以为空，当不为空时满足以下性质：</p>
<ul>
<li>非空<strong>左子树</strong>的所有<strong>键值小于其根结点</strong>的键值</li>
<li>非空<strong>右子树</strong>的所有<strong>键值大于其根结点</strong>的键值</li>
<li><strong>左、右子树都为二叉搜索树</strong><br>
<img src="https://img-blog.csdnimg.cn/20200329233632371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="图源百度百科"></li>
</ul>
<h2 id="2-二叉搜索树的操作函数">2.二叉搜索树的操作函数</h2>
<h3 id="1-二叉搜索树的查找操作Find">(1)二叉搜索树的查找操作Find</h3>
<p>要查找的值为X</p>
<ul>
<li>从根结点开始查找，若树为空，则返回NULL</li>
<li>若搜索树非空，则将<strong>X与根节点的键值进行比较</strong>并进行以下处理
<ol>
<li>若<strong>X小于根结点键值</strong>，则在<strong>左子树</strong>中搜索</li>
<li>若<strong>X大于根结点键值</strong>，则在<strong>右子树</strong>中搜索</li>
<li>若X与根结点键值<strong>相等</strong>，则搜索完成，<strong>返回</strong>指向该结点的<strong>指针</strong></li>
</ol>
</li>
</ul>
<h4 id="尾递归实现">尾递归实现</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, BinTree BST)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>( !BST ) <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//查找失败</span></span><br><span class="line">	<span class="keyword">if</span>( X &gt; BST-&gt;Data )</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Find</span>(X, BST-&gt;Right);<span class="comment">//操作1</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (X &lt; BST-&gt;Data) </span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Find</span>(X, BST-&gt;Left); <span class="comment">//操作2</span></span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">return</span> BST; <span class="comment">//操作3 查找成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="迭代函数实现">迭代函数实现</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, BinTree BST)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(BST) &#123;</span><br><span class="line">		<span class="keyword">if</span> (X &gt; BST-&gt;Data)</span><br><span class="line">			BST = BST-&gt;Right;<span class="comment">//操作1</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (X &lt; BST-&gt;Data)</span><br><span class="line">			BST = BST-&gt;Left;<span class="comment">//操作2</span></span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			<span class="keyword">return</span> BST;<span class="comment">//操作3 查找成功</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-查找最大元素和最小元素">(2)查找最大元素和最小元素</h3>
<ul>
<li><strong>最大元素</strong>一定是在树的<strong>最右分支的端结点</strong>上</li>
<li><strong>最小元素</strong>一定是在树的<strong>最左分支的端结点</strong>上<br>
<img src="https://img-blog.csdnimg.cn/20200329234956549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h4 id="查找最大元素">查找最大元素</h4>
<p>递归函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!BST ) <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//空树，返回NULL</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ( !BST-&gt;Left )</span><br><span class="line">		<span class="keyword">return</span> BST;	<span class="comment">//找到了最左叶结点</span></span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">FindMin</span>(BST-&gt;Left);<span class="comment">//沿左分支继续查找</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">if</span> (BST) &#123;</span><br><span class="line">		<span class="keyword">while</span> (BST-&gt;Left)	BST = BST-&gt;Left;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查找最小元素">查找最小元素</h4>
<p>递归函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(BinTree BST)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!BST ) <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//空树，返回NULL</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ( !BST-&gt;Right )</span><br><span class="line">		<span class="keyword">return</span> BST;	<span class="comment">//找到了最左叶结点</span></span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">FindMin</span>(BST-&gt;Right);<span class="comment">//沿右分支继续查找</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(BinTree BST)</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">if</span> (BST) &#123;</span><br><span class="line">		<span class="keyword">while</span> (BST-&gt;Right)	BST = BST-&gt;Right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-二叉搜索树的插入">(3)二叉搜索树的插入</h3>
<p>要保证插入后还为二叉搜索树，关键时要找到元素应该插入的位置。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinTree <span class="title">Insert</span><span class="params">(ElementType X, BinTree BST)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!BST) &#123;	<span class="comment">//原树为空，生成并返回一个结点的二叉搜索树</span></span><br><span class="line">		BST = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> TreeNode));</span><br><span class="line">		BST-&gt;Data = X;</span><br><span class="line">		BST-&gt;Left = BST-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;	<span class="comment">//开始寻找待插入元素的位置</span></span><br><span class="line">		<span class="keyword">if</span> (X &lt; BST-&gt;Data)</span><br><span class="line">			BST-&gt;Left = <span class="built_in">Insert</span>(X, BST-&gt;Left);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (X &gt; BST-&gt;Data)</span><br><span class="line">			BST-&gt;Right = <span class="built_in">Insert</span>(X, BST-&gt;Right);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;该值已存在&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-二叉搜索树的删除">(4)二叉搜索树的删除</h3>
<p>考虑三种情况</p>
<ul>
<li>要删除的是<strong>叶结点</strong>：直接删除，并修改其父结点的指针</li>
<li>要删除的结点<strong>只有一个孩子</strong>结点：将其父节点的指针指向要删除结点的孩子结点<img src="https://img-blog.csdnimg.cn/20200330000838317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>要删除的结点<strong>有左、右两棵子树</strong>:要用另一个结点替代被删除的结点（右子树的最小元素或左子树的最大元素）</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinTree <span class="title">Delete</span><span class="params">(ElementType X, BinTree BST)</span> </span>&#123;</span><br><span class="line">	Position Tmp;</span><br><span class="line">	<span class="keyword">if</span>(!BST) <span class="built_in">printf</span>(<span class="string">&quot;要删除的元素未找到&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (X &lt; BST-&gt;Data) </span><br><span class="line">		BST-&gt;Left = <span class="built_in">Delete</span>(X,BST-&gt;Left);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (X &gt; BST-&gt;Data) </span><br><span class="line">		BST-&gt;Right = <span class="built_in">Delete</span>(X,BST-&gt;Right);</span><br><span class="line">	<span class="keyword">else</span> &#123;	<span class="comment">//找到了要删除的结点</span></span><br><span class="line">		<span class="keyword">if</span> (BST-&gt;Left &amp;&amp; BST-&gt;Right) &#123;	<span class="comment">//待删除结点有左右两个孩子</span></span><br><span class="line">			Tmp = <span class="built_in">FindMin</span>(BST-&gt;Right);	<span class="comment">//在右子树中找最小的元素填充删除节点</span></span><br><span class="line">			BST-&gt;Data = Tmp-&gt;Data;</span><br><span class="line">			BST-&gt;Right = <span class="built_in">Delete</span>(BST-&gt;Data,BST-&gt;Right);<span class="comment">//填充完后，在右子树中删除该最小元素</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;	<span class="comment">//待删除结点有1个或无子结点</span></span><br><span class="line">			Tmp = BST;</span><br><span class="line">			<span class="keyword">if</span> (!BST-&gt;Left) <span class="comment">//有有孩子或无子节点</span></span><br><span class="line">				BST = BST-&gt;Right;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!BST-&gt;Right)</span><br><span class="line">				BST = BST-&gt;Left;</span><br><span class="line">			<span class="built_in">free</span>(Tmp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>二、平衡二叉树</h1>
<h2 id="1-平衡二叉树是什么">1.平衡二叉树是什么</h2>
<p><strong>平衡二叉树</strong>（<strong>AVL树</strong>，Banlanced Binary Tree ),可以为空，当不为空时满足以下性质：</p>
<ul>
<li>任一结点<strong>左、右子树高度差的绝对值不超过1</strong></li>
<li>给定<strong>结点数为n</strong>的AVL树的<strong>最大高度为O(log~2~n)</strong>!</li>
</ul>
<p><strong>平衡因子</strong>（<strong>BF</strong>,Banlanced Factor）:BF(T) = h~L~-h~R~,h~L~和h~R~分别为T的左、右子树高度</p>
<h2 id="2-平衡二叉树的调整">2.平衡二叉树的调整</h2>
<h3 id="RR插入——RR旋转【右单旋】">RR插入——RR旋转【右单旋】</h3>
<p>破坏结点（麻烦结点）位于被破坏结点（发现者）的右子树的右子树上<br>
<img src="https://img-blog.csdnimg.cn/20200329223352879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="LL插入——LL旋转【左单旋】">LL插入——LL旋转【左单旋】</h3>
<p>破坏结点（麻烦结点）位于被破坏结点（发现者）的左子树的左子树上<br>
<img src="https://img-blog.csdnimg.cn/20200329223302778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="LR插入——LR旋转">LR插入——LR旋转</h3>
<p>破坏结点（麻烦结点）位于被破坏结点（发现者）的左子树的右子树上<br>
<img src="https://img-blog.csdnimg.cn/20200329223831795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="RL插入——RL旋转">RL插入——RL旋转</h3>
<p>破坏结点（麻烦结点）位于被破坏结点（发现者）的右子树的左子树上<br>
<img src="https://img-blog.csdnimg.cn/20200329224042588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="ps：有时候插入元素即便不需要调整结构，也可能需要重新计算一些平衡因子">ps：有时候插入元素即便不需要调整结构，也可能需要重新计算一些平衡因子</h4>
<h2 id="3-平衡二叉树实现">3.平衡二叉树实现</h2>
<h3 id="定义部分">定义部分</h3>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AVLNode</span> *Position;</span><br><span class="line"><span class="keyword">typedef</span> Position AVLTree;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AVLNode</span> &#123;</span><br><span class="line">	ElementType Data;</span><br><span class="line">	AVLTree Left, Right;</span><br><span class="line">	<span class="type">int</span> Height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="左单旋">左单旋</h3>
<p>ps:A必须要有一个左子节点B，将A与B进行左单旋，并更新A与B的高度返回新的根结点B</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AVLTree <span class="title">SingleLeftRotation</span><span class="params">(AVLTree A)</span> </span>&#123;</span><br><span class="line">	AVLTree B = A-&gt;Left;</span><br><span class="line">	A-&gt;Left = B-&gt;Right;</span><br><span class="line">	B-&gt;Right = A;</span><br><span class="line">	A-&gt;Height = <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(A-&gt;Left),<span class="built_in">GetHeight</span>(A-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">	B-&gt;Height = <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(B-&gt;Left),A-&gt;Height ) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="右单旋">右单旋</h3>
<p>ps:A必须要有一个右子节点B，将A与B进行右单旋，并更新A与B的高度返回新的根结点B</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AVLTree <span class="title">SingleRightRotation</span><span class="params">(AVLTree A)</span> </span>&#123;</span><br><span class="line">	AVLTree B = A-&gt;Right;</span><br><span class="line">	A-&gt;Right = B-&gt;Left;</span><br><span class="line">	B-&gt;Left = A;</span><br><span class="line">	A-&gt;Height = <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(A-&gt;Left),<span class="built_in">GetHeight</span>(A-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">	B-&gt;Height = <span class="built_in">Max</span>( A-&gt;Height, <span class="built_in">GetHeight</span>(B-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LR旋转">LR旋转</h3>
<p>ps:A必须要有一个左子节点B，且B必须有一个右子节点C<br>
先将B与C做右单旋，返回C<br>
再将A与C做左单旋，返回C</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AVLTree <span class="title">DoubleLeftRightRotation</span><span class="params">(AVLTree A)</span> </span>&#123;</span><br><span class="line">	A-&gt;Left = <span class="built_in">SingleRightRotation</span>(A-&gt;Left);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">SingleLeftRotation</span>(A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RL旋转">RL旋转</h3>
<p>ps:A必须要有一个右子节点B，且B必须有一个左子节点C<br>
先将B与C做左单旋，返回C<br>
再将A与C做右单旋，返回C</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AVLTree <span class="title">DoubleRightLeftRotation</span><span class="params">(AVLTree A)</span> </span>&#123;</span><br><span class="line">	A-&gt;Right = <span class="built_in">SingleLeftRotation</span>(A-&gt;Right);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">SingleRightRotation</span>(A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入">插入</h3>
<p>将X插入AVL树T中，并返回调整后的AVL树</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AVLTree <span class="title">Insert</span><span class="params">(AVLTree T,ElementType X)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!T) &#123;	<span class="comment">//若要插入的树是空树，则新建一个包含结点X的树</span></span><br><span class="line">		T = (AVLTree) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> AVLNode));</span><br><span class="line">		T-&gt;Data = X;</span><br><span class="line">		T-&gt;Height = <span class="number">0</span>;</span><br><span class="line">		T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>( X &lt; T-&gt;Data) &#123;</span><br><span class="line">		T-&gt;Left = <span class="built_in">Insert</span>(T-&gt;Left, X);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">GetHeight</span>(T-&gt;Left)-<span class="built_in">GetHeight</span>(T-&gt;Right) == <span class="number">2</span>) &#123;<span class="comment">//需要左旋</span></span><br><span class="line">			<span class="keyword">if</span> (X &lt; T-&gt;Left-&gt;Data)</span><br><span class="line">				T = <span class="built_in">SingleLeftRotation</span>(T);	<span class="comment">//需要左单旋</span></span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				T = <span class="built_in">DoubleLeftRightRotation</span>(T);<span class="comment">//左-右双旋</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Data) &#123;</span><br><span class="line">		T-&gt;Right = <span class="built_in">Insert</span>(T-&gt;Right, X);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">GetHeight</span>(T-&gt;Left)-<span class="built_in">GetHeight</span>(T-&gt;Right) == <span class="number">-2</span>) &#123;<span class="comment">//需要右旋</span></span><br><span class="line">			<span class="keyword">if</span> (X &gt; T-&gt;Right-&gt;Data)</span><br><span class="line">				T = <span class="built_in">SingleRightRotation</span>(T);	<span class="comment">//需要右单旋</span></span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				T = <span class="built_in">DoubleRightLeftRotation</span>(T);<span class="comment">//右-左双旋</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//更新树高</span></span><br><span class="line">	T-&gt;Height =  <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(T-&gt;Left),<span class="built_in">GetHeight</span>(T-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整代码演示">完整代码演示</h3>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AVLNode</span> *Position;</span><br><span class="line"><span class="keyword">typedef</span> Position AVLTree;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AVLNode</span> &#123;</span><br><span class="line">	ElementType Data;</span><br><span class="line">	AVLTree Left, Right;</span><br><span class="line">	<span class="type">int</span> Height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetHeight</span><span class="params">(AVLTree A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A)</span><br><span class="line">        <span class="keyword">return</span> A-&gt;Height;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">AVLTree <span class="title">SingleLeftRotation</span><span class="params">(AVLTree A)</span> </span>&#123;<span class="comment">//左单旋</span></span><br><span class="line">	AVLTree B = A-&gt;Left;</span><br><span class="line">	A-&gt;Left = B-&gt;Right;</span><br><span class="line">	B-&gt;Right = A;</span><br><span class="line">	A-&gt;Height = <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(A-&gt;Left),<span class="built_in">GetHeight</span>(A-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">	B-&gt;Height = <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(B-&gt;Left),A-&gt;Height )+ <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">AVLTree <span class="title">SingleRightRotation</span><span class="params">(AVLTree A)</span> </span>&#123;<span class="comment">//右单旋</span></span><br><span class="line">	AVLTree B = A-&gt;Right;</span><br><span class="line">	A-&gt;Right = B-&gt;Left;</span><br><span class="line">	B-&gt;Left = A;</span><br><span class="line">	A-&gt;Height = <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(A-&gt;Left),<span class="built_in">GetHeight</span>(A-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">	B-&gt;Height = <span class="built_in">Max</span>( A-&gt;Height, <span class="built_in">GetHeight</span>(B-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">AVLTree <span class="title">DoubleLeftRightRotation</span><span class="params">(AVLTree A)</span> </span>&#123;<span class="comment">//左-右双旋</span></span><br><span class="line">	A-&gt;Left = <span class="built_in">SingleRightRotation</span>(A-&gt;Left);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">SingleLeftRotation</span>(A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">AVLTree <span class="title">DoubleRightLeftRotation</span><span class="params">(AVLTree A)</span> </span>&#123;<span class="comment">//右-左双旋</span></span><br><span class="line">	A-&gt;Right = <span class="built_in">SingleLeftRotation</span>(A-&gt;Right);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">SingleRightRotation</span>(A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">AVLTree <span class="title">Insert</span><span class="params">(AVLTree T,ElementType X)</span> </span>&#123;<span class="comment">//将X插入AVL树T中</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (!T) &#123;	<span class="comment">//若要插入的树是空树，则新建一个包含结点X的树</span></span><br><span class="line">		T = (AVLTree) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> AVLNode));</span><br><span class="line">		T-&gt;Data = X;</span><br><span class="line">		T-&gt;Height = <span class="number">0</span>;</span><br><span class="line">		T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>( X &lt; T-&gt;Data) &#123;</span><br><span class="line">		T-&gt;Left = <span class="built_in">Insert</span>(T-&gt;Left, X);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">GetHeight</span>(T-&gt;Left)-<span class="built_in">GetHeight</span>(T-&gt;Right) == <span class="number">2</span>) &#123;<span class="comment">//需要左旋</span></span><br><span class="line">			<span class="keyword">if</span> (X &lt; T-&gt;Left-&gt;Data)</span><br><span class="line">				T = <span class="built_in">SingleLeftRotation</span>(T);	<span class="comment">//需要左单旋</span></span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				T = <span class="built_in">DoubleLeftRightRotation</span>(T);<span class="comment">//左-右双旋</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Data) &#123;</span><br><span class="line">		T-&gt;Right = <span class="built_in">Insert</span>(T-&gt;Right, X);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">GetHeight</span>(T-&gt;Left)-<span class="built_in">GetHeight</span>(T-&gt;Right) == <span class="number">-2</span>) &#123;<span class="comment">//需要右旋</span></span><br><span class="line">			<span class="keyword">if</span> (X &gt; T-&gt;Right-&gt;Data)</span><br><span class="line">				T = <span class="built_in">SingleRightRotation</span>(T);	<span class="comment">//需要右单旋</span></span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				T = <span class="built_in">DoubleRightLeftRotation</span>(T);<span class="comment">//右-左双旋</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//更新树高</span></span><br><span class="line">	T-&gt;Height =  <span class="built_in">Max</span>( <span class="built_in">GetHeight</span>(T-&gt;Left),<span class="built_in">GetHeight</span>(T-&gt;Right) ) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraversal</span><span class="params">(AVLTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">		<span class="built_in">PreOrderTraversal</span>( T-&gt;Left);</span><br><span class="line">		<span class="built_in">PreOrderTraversal</span>( T-&gt;Right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraversal</span><span class="params">(AVLTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T) &#123;</span><br><span class="line">		<span class="built_in">InOrderTraversal</span>( T-&gt;Left);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">		<span class="built_in">InOrderTraversal</span>( T-&gt;Right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AVLTree T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        T = <span class="built_in">Insert</span>(T,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">PreOrderTraversal</span>(T);<span class="comment">//前序遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrderTraversal</span>(T);<span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<blockquote>
<p>421365879<br>
123456789</p>
</blockquote>
<p>根据前序遍历与中序遍历易还原得到这样一个平衡二叉树</p>
<p><img src="https://img-blog.csdnimg.cn/20200330015103371.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1>三、判断是否同一棵二叉搜索树</h1>
<p>题意：给定一个插入序列确定唯一一棵二叉搜索树，对于输入的各种插入序列，判断它们是否能生成一样的二叉搜索树</p>
<p>如何判断两个序列是否对应相同搜索树呢<br>
<strong>建一棵树，再判别其他序列是否与该树一致！</strong><br>
如输入3 1 4 2确定一颗二叉搜索树，判断3 4 1 2和 3 2 4 1是否对应同一棵树</p>
<h2 id="1-搜索树表示">1.搜索树表示</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span> *Tree;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">	<span class="type">int</span> v;</span><br><span class="line">	Tree Left,Right;</span><br><span class="line">	<span class="type">int</span> flag;	<span class="comment">//用来标记该结点是否已经被搜索过 为1则搜索过</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="2-建搜索树T">2.建搜索树T</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Tree <span class="title">MakeTree</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">	Tree T;</span><br><span class="line">	<span class="type">int</span> i, V;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;V);</span><br><span class="line">	T = <span class="built_in">NewNode</span>(V);</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;V);</span><br><span class="line">		T = <span class="built_in">Insert</span>(T,V);<span class="comment">//将剩余结点插入二叉树</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Tree <span class="title">NewNode</span><span class="params">(<span class="type">int</span> V)</span> </span>&#123;</span><br><span class="line">	Tree T = (Tree)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> TreeNode));</span><br><span class="line">	T-&gt;v = V;</span><br><span class="line">	T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">	T-&gt;flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Tree <span class="title">Insert</span><span class="params">(Tree T, <span class="type">int</span> V)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!T) T = <span class="built_in">NewNode</span>(V);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (V &gt; T-&gt;v) </span><br><span class="line">			T-&gt;Right = <span class="built_in">Insert</span>(T-&gt;Right, V);</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			T-&gt;Left = <span class="built_in">Insert</span>(T-&gt;Left,V);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-判别一序列是否与搜索树T一致">3.判别一序列是否与搜索树T一致</h2>
<p>方法：在树T中按顺序搜索序列3 2 4 1中的每个数</p>
<ul>
<li><strong>若每次搜索所经过的结点在前面均搜索过，则一致</strong></li>
<li><strong>否则（某次搜索中遇到了前面未出现的结点），则不一致</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(Tree T,<span class="type">int</span> V)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;flag) &#123;<span class="comment">//这个点查找过了,则判断要在左子树还是右子树查找</span></span><br><span class="line">		<span class="keyword">if</span>(V &lt; T-&gt;v) <span class="keyword">return</span> <span class="built_in">check</span>(T-&gt;Left,V);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(V &gt; T-&gt;v) <span class="keyword">return</span> <span class="built_in">check</span>(T-&gt;Right,V);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;	<span class="comment">//要查找的刚好是这个点，进行标记</span></span><br><span class="line">		<span class="keyword">if</span>(V == T-&gt;v) &#123;</span><br><span class="line">			T-&gt;flag = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//碰到了以前没见过的点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断长度为N的插入序列产生的树是否与搜索树一致</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Judge</span><span class="params">(Tree T,<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> i, V, flag = <span class="number">0</span>;<span class="comment">//flag=0代表当前还一致，为1则说明已经不一致了</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;V);</span><br><span class="line">	<span class="keyword">if</span> (V != T-&gt;v) flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> T-&gt;flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;V);</span><br><span class="line">		<span class="keyword">if</span>( (!flag) &amp;&amp; (!<span class="built_in">check</span>(T,V)) ) flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>清除T中个结点的flag标记使其为0</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ResetT</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;Left) <span class="built_in">ResetT</span>(T-&gt;Left);</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;Right) <span class="built_in">ResetT</span>(T-&gt;Right);</span><br><span class="line">	T-&gt;flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>释放T的空间</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FreeTree</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;Left) <span class="built_in">FreeTree</span>(T-&gt;Left);</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;Right) <span class="built_in">FreeTree</span>(T-&gt;Right);</span><br><span class="line">	<span class="built_in">free</span>(T);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


        <hr>
        <!-- Pager -->
        <ul class="pager">
          
          <li class="previous">
            <a href="/cn/RMQ问题——线段树/cl1z65nsa000f34usei950uf5" data-toggle="tooltip" data-placement="top" title="RMQ问题——线段树">&larr; Previous Post</a>
          </li>
          
          
          <li class="next">
            <a href="/cn/RMQ问题——ST表算法/cl1z65ns8000e34usbcw06erv" data-toggle="tooltip" data-placement="top" title="RMQ问题——ST表算法">Next Post &rarr;</a>
          </li>
          
        </ul>

        
        <!-- tip start -->
        <!-- tip -->
<!-- tip start -->
<div class="tip">
  <p>
    
      如果您喜欢此博客或发现它对您有用，则欢迎对此发表评论。 也欢迎您共享此博客，以便更多人可以参与。 如果博客中使用的图像侵犯了您的版权，请与作者联系以将其删除。 谢谢 ！
    
  </p>
</div>
<!-- tip end -->

        <!-- tip end -->
        

        
        <!-- Sharing Srtart -->
        <!-- Social Social Share Post -->
<!-- Docs:https://github.com/overtrue/share.js -->

<div class="social-share" data-initialized="true" data-disabled="tencent ,douban ,qzone ,linkedin ,facebook ,google ,diandian" data-wechat-qrcode-helper="" align="center">
  <ul class="list-inline text-center social-share-ul">
    <li class="social-share-li">
      <a target="_blank" class="social-share-icon icon-twitter">
        <i class="fa fa-twitter fa-1x" aria-hidden="true"></i>
      </a>
    </li>
    <li class="social-share-li">
      <a class="social-share-icon icon-wechat">
        <i class="fa fa-weixin fa-1x" aria-hidden="true"></i>
      </a>
    </li>
    <li class="social-share-li">
      <a target="_blank" class="social-share-icon icon-weibo">
        <i class="fa fa-weibo fa-1x" aria-hidden="true"></i>
      </a>
    </li>
    <li class="social-share-li">
      <a target="_blank" class="social-share-icon icon-qq">
        <i class="fa fa-qq fa-1x" aria-hidden="true"></i>
      </a>
    </li>
    <li class="social-share-li">
      <a target="_blank" class="social-share-icon" href="mailto:?subject=数据结构学习笔记＜5＞ 二叉搜索树与平衡二叉树&body=Hi,I found this website and thought you might like it https://ysx.cosine.ren/cn/数据结构学习笔记＜5＞ 二叉搜索树与平衡二叉树/cl1z65nxs008834us2n6d52sd">
        <i class="fa fa-envelope fa-1x" aria-hidden="true"></i>
      </a>
    </li>
  </ul>
</div>

<!-- css & js -->
<!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/css/share.min.css"> -->
<script defer="defer" async="true" src="https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/js/social-share.min.js"></script>

        <!-- Sharing End -->
        
        <hr>

        <!-- comments start -->
        <!-- 1. gitalk comment -->

  <!-- gitalk start -->
  <!-- Docs:https://github.com/gitalk/gitalk/blob/master/readme-cn.md -->

  <div id="gitalk-container"></div>

  
    <!-- <script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.js"></script> -->
    <script src="/js/comment/gitalk.js"></script>
  

  <script>
    var gitalk = new Gitalk({
      clientID: '2f50b376c49e65b70db0',
      clientSecret: '5bf5a8b7b0a9a22194ee1f0ee1e58dac2e19a359',
      repo: 'yusixian.github.io',
      owner: 'yusixian',
      admin: 'yusixian',
      id: 'Mon Mar 30 2020 01:53:11 GMT+0800', // Ensure uniqueness and length less than 50
      distractionFreeMode: false, // Facebook-like distraction free mode
      perPage: 10,
      pagerDirection: 'last',
      createIssueManually: false,
      language: 'zh-CN',
      proxy: 'https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token'
    });
    gitalk.render('gitalk-container');

    var gtFolded = () => {
      setTimeout(function () {
        let markdownBody = document.getElementsByClassName("markdown-body");
        let list = Array.from(markdownBody);
        list.forEach(item => {
          if (item.clientHeight > 250) {
            item.classList.add('gt-comment-body-folded');
            item.style.maxHeight = '250px';
            item.title = 'Click to Expand';
            item.onclick = function () {
              item.classList.remove('gt-comment-body-folded');
              item.style.maxHeight = '';
              item.title = '';
              item.onclick = null;
            };
          }
        })
      }, 800);
    }
  </script>

  <!-- gitalk end -->


<!-- 2. gitment comment -->


<!-- 3. disqus comment -->


        <!-- comments end -->
        <hr>

      </div>

      <!-- Catalog: Tabe of Content -->
      <!-- Table of Contents -->

    
      <aside id="sidebar">
        <div id="toc" class="toc-article">
        <strong class="toc-title">目录</strong>
        
          <ol class="toc-nav"><li class="toc-nav-item toc-nav-level-1"><a class="toc-nav-link"><span class="toc-nav-number">1.</span> <span class="toc-nav-text">一、二叉搜索树</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#1-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%98%AF%E4%BB%80%E4%B9%88"><span class="toc-nav-number">1.1.</span> <span class="toc-nav-text">1.二叉搜索树是什么</span></a></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#2-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0"><span class="toc-nav-number">1.2.</span> <span class="toc-nav-text">2.二叉搜索树的操作函数</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#1-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9CFind"><span class="toc-nav-number">1.2.1.</span> <span class="toc-nav-text">(1)二叉搜索树的查找操作Find</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-4"><a class="toc-nav-link" href="#%E5%B0%BE%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0"><span class="toc-nav-number">1.2.1.1.</span> <span class="toc-nav-text">尾递归实现</span></a></li><li class="toc-nav-item toc-nav-level-4"><a class="toc-nav-link" href="#%E8%BF%AD%E4%BB%A3%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0"><span class="toc-nav-number">1.2.1.2.</span> <span class="toc-nav-text">迭代函数实现</span></a></li></ol></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#2-%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%83%E7%B4%A0"><span class="toc-nav-number">1.2.2.</span> <span class="toc-nav-text">(2)查找最大元素和最小元素</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-4"><a class="toc-nav-link" href="#%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0"><span class="toc-nav-number">1.2.2.1.</span> <span class="toc-nav-text">查找最大元素</span></a></li><li class="toc-nav-item toc-nav-level-4"><a class="toc-nav-link" href="#%E6%9F%A5%E6%89%BE%E6%9C%80%E5%B0%8F%E5%85%83%E7%B4%A0"><span class="toc-nav-number">1.2.2.2.</span> <span class="toc-nav-text">查找最小元素</span></a></li></ol></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#3-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5"><span class="toc-nav-number">1.2.3.</span> <span class="toc-nav-text">(3)二叉搜索树的插入</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#4-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4"><span class="toc-nav-number">1.2.4.</span> <span class="toc-nav-text">(4)二叉搜索树的删除</span></a></li></ol></li></ol></li><li class="toc-nav-item toc-nav-level-1"><a class="toc-nav-link"><span class="toc-nav-number">2.</span> <span class="toc-nav-text">二、平衡二叉树</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#1-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E6%98%AF%E4%BB%80%E4%B9%88"><span class="toc-nav-number">2.1.</span> <span class="toc-nav-text">1.平衡二叉树是什么</span></a></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#2-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%B0%83%E6%95%B4"><span class="toc-nav-number">2.2.</span> <span class="toc-nav-text">2.平衡二叉树的调整</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#RR%E6%8F%92%E5%85%A5%E2%80%94%E2%80%94RR%E6%97%8B%E8%BD%AC%E3%80%90%E5%8F%B3%E5%8D%95%E6%97%8B%E3%80%91"><span class="toc-nav-number">2.2.1.</span> <span class="toc-nav-text">RR插入——RR旋转【右单旋】</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#LL%E6%8F%92%E5%85%A5%E2%80%94%E2%80%94LL%E6%97%8B%E8%BD%AC%E3%80%90%E5%B7%A6%E5%8D%95%E6%97%8B%E3%80%91"><span class="toc-nav-number">2.2.2.</span> <span class="toc-nav-text">LL插入——LL旋转【左单旋】</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#LR%E6%8F%92%E5%85%A5%E2%80%94%E2%80%94LR%E6%97%8B%E8%BD%AC"><span class="toc-nav-number">2.2.3.</span> <span class="toc-nav-text">LR插入——LR旋转</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#RL%E6%8F%92%E5%85%A5%E2%80%94%E2%80%94RL%E6%97%8B%E8%BD%AC"><span class="toc-nav-number">2.2.4.</span> <span class="toc-nav-text">RL插入——RL旋转</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-4"><a class="toc-nav-link" href="#ps%EF%BC%9A%E6%9C%89%E6%97%B6%E5%80%99%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E5%8D%B3%E4%BE%BF%E4%B8%8D%E9%9C%80%E8%A6%81%E8%B0%83%E6%95%B4%E7%BB%93%E6%9E%84%EF%BC%8C%E4%B9%9F%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E8%AE%A1%E7%AE%97%E4%B8%80%E4%BA%9B%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90"><span class="toc-nav-number">2.2.4.1.</span> <span class="toc-nav-text">ps：有时候插入元素即便不需要调整结构，也可能需要重新计算一些平衡因子</span></a></li></ol></li></ol></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#3-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AE%9E%E7%8E%B0"><span class="toc-nav-number">2.3.</span> <span class="toc-nav-text">3.平衡二叉树实现</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#%E5%AE%9A%E4%B9%89%E9%83%A8%E5%88%86"><span class="toc-nav-number">2.3.1.</span> <span class="toc-nav-text">定义部分</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#%E5%B7%A6%E5%8D%95%E6%97%8B"><span class="toc-nav-number">2.3.2.</span> <span class="toc-nav-text">左单旋</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#%E5%8F%B3%E5%8D%95%E6%97%8B"><span class="toc-nav-number">2.3.3.</span> <span class="toc-nav-text">右单旋</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#LR%E6%97%8B%E8%BD%AC"><span class="toc-nav-number">2.3.4.</span> <span class="toc-nav-text">LR旋转</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#RL%E6%97%8B%E8%BD%AC"><span class="toc-nav-number">2.3.5.</span> <span class="toc-nav-text">RL旋转</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#%E6%8F%92%E5%85%A5"><span class="toc-nav-number">2.3.6.</span> <span class="toc-nav-text">插入</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA"><span class="toc-nav-number">2.3.7.</span> <span class="toc-nav-text">完整代码演示</span></a></li></ol></li></ol></li><li class="toc-nav-item toc-nav-level-1"><a class="toc-nav-link"><span class="toc-nav-number">3.</span> <span class="toc-nav-text">三、判断是否同一棵二叉搜索树</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#1-%E6%90%9C%E7%B4%A2%E6%A0%91%E8%A1%A8%E7%A4%BA"><span class="toc-nav-number">3.1.</span> <span class="toc-nav-text">1.搜索树表示</span></a></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#2-%E5%BB%BA%E6%90%9C%E7%B4%A2%E6%A0%91T"><span class="toc-nav-number">3.2.</span> <span class="toc-nav-text">2.建搜索树T</span></a></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#3-%E5%88%A4%E5%88%AB%E4%B8%80%E5%BA%8F%E5%88%97%E6%98%AF%E5%90%A6%E4%B8%8E%E6%90%9C%E7%B4%A2%E6%A0%91T%E4%B8%80%E8%87%B4"><span class="toc-nav-number">3.3.</span> <span class="toc-nav-text">3.判别一序列是否与搜索树T一致</span></a></li></ol></li></ol>
        
        </div>
      </aside>
    



      <!-- Sidebar Container -->
      <div class="
                col-lg-8 col-lg-offset-1
                col-md-10 col-md-offset-1
                sidebar-container">

        <!-- Featured Tags -->
        
        <section>
          <!-- no hr -->
          <h5>
            <a href="/tags/">特色标签</a>
          </h5>
          <div class="tags">
            
            <a class="tag" href="/tags/#c++" title="c++">c++</a>
            
            <a class="tag" href="/tags/#数据结构" title="数据结构">数据结构</a>
            
            <a class="tag" href="/tags/#二叉树" title="二叉树">二叉树</a>
            
          </div>
        </section>
        

        <!-- Friends Blog -->
        
        <hr>
        <h5>友链</h5>
        <ul class="list-inline">

          
          <li>
            <a href="https://sadose.github.io/" target="_blank">大森的博客</a>
          </li>
          
          <li>
            <a href="https://www.xiaocao.cloud/" target="_blank">小曹同学的百草园</a>
          </li>
          
          <li>
            <a href="https://gelxgx.github.io/blog/" target="_blank">瘦虎的博客</a>
          </li>
          
        </ul>
        
      </div>
    </div>
  </div>
</article>



<!-- anchorjs start -->
<!-- async load function -->
<!-- anchor-js, Doc:http://bryanbraun.github.io/anchorjs/ -->
<script type="text/javascript">
  // async load function
  function async (u, c) {
    var d = document,
      t = 'script',
      o = d.createElement(t),
      s = d.getElementsByTagName(t)[0];
    o.src = u;
    if (c) {
      o.addEventListener('load', function(e) {
        c(null, e);
      }, false);
    }
    s.parentNode.insertBefore(o, s);
  };
</script>
<script type="text/javascript">
  //anchor-js, Doc:http://bryanbraun.github.io/anchorjs/
  async ("https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js", function() {
    anchors.options = {
      visible: 'hover',
      placement: 'left',
      // icon: 'ℬ'
      icon: '❡'
    };
    anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');
  });
</script>
<style>
  /* place left on bigger screen */
  @media all and (min-width: 800px) {
    .anchorjs-link {
      position: absolute;
      left: -0.75em;
      font-size: 1.1em;
      margin-top: -0.1em;
    }
  }
</style>

<!-- anchorjs end -->



		<!-- Footer (contains ThemeColor、viewer) -->
		<!-- Footer -->
<footer>
  <div class="container">
    <div class="row">
      <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
        <ul class="list-inline text-center">
          

          
            <li>
              <a target="_blank" href="https://github.com/yusixian">
                <span class="fa-stack fa-lg">
                  <i class="fa fa-circle fa-stack-2x"></i>
                  <i class="fa fa-github fa-stack-1x fa-inverse"></i>
                </span>
              </a>
            </li>
          

          

          

          

          

          
            <li>
              <a target="_blank" href="https://www.zhihu.com/people/qi-jiu-en">
                <span class="fa-stack fa-lg">
                  <i class="fa fa-circle fa-stack-2x"></i>
                  <i class="fa  fa-stack-1x fa-inverse">知</i>
                </span>
              </a>
            </li>
          

          

        </ul>
        <p class="copyright text-muted">
          Copyright &copy;
          cos
          2022
          <br>
          Theme by
          <a target="_blank" rel="noopener" href="http://beantech.org">BeanTech</a>
          <span style="display: inline-block; margin: 0 5px;">
            <i class="fa fa-heart"></i>
          </span>
          re-Ported by
          <a target="_blank" rel="noopener" href="https://v-vincen.life/">Live My Life</a>
          |
          <iframe style="margin-left: 2px; margin-bottom:-5px;" frameborder="0" scrolling="0" width="91px" height="20px" src="https://ghbtns.com/github-btn.html?user=V-Vincen&repo=V-Vincen.github.io&type=star&count=true"></iframe>
        </p>
      </div>
    </div>
  </div>
</footer>

<a id="rocket" href="#top" class=""></a>


  <!-- jQuery -->
  <script type="text/javascript" src="/js/jquery.min.js"></script>
  <!-- Bootstrap Core JavaScript -->
  <script type="text/javascript" src="/js/bootstrap.min.js"></script>
  <!-- Custom Theme JavaScript -->
  <script type="text/javascript" src="/js/hux-blog.min.js"></script>
  <!-- catalog -->
  <script async="true" type="text/javascript" src="/js/catalog.js"></script>
  <!-- totop(rocket) -->
  <script async="true" type="text/javascript" src="/js/totop.js"></script>

  
    <!-- Busuanzi JavaScript -->
    <script async="async" src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
  

  
    <!-- Scroll start -->
    <script async="async" type="text/javascript" src="/js/scroll.js"></script>
    <!-- Scroll end -->
  

  

  
    <!-- Mouseclick -->
    <script type="text/javascript" src="/js/mouseclick.js" content='❤,❤,❤,❤,❤,❤,❤,❤,❤' color='#ffa940,#f5222d,#fa541c,#FF99CC,#a8071a,#faad14,#1890ff,#eb2f96,#13c2c2'></script>
  

  
    <!-- ribbon -->
    <script type="text/javascript" src="/js/ribbonDynamic.js"></script>
  

  






  <!-- viewer start -->
  <!-- viewer start (Picture preview) -->
  
    <script async="async" type="text/javascript" src="/js/viewer/viewer.min.js"></script>
    <script async="async" type="text/javascript" src="/js/viewer/pic-viewer.js"></script>
  

  <!-- viewer end -->


<script>
  // async load function
  function async (u, c) {
    var d = document,
      t = 'script',
      o = d.createElement(t),
      s = d.getElementsByTagName(t)[0];
    o.src = u;
    if (c) {
      o.addEventListener('load', function (e) {
        c(null, e);
      }, false);
    }
    s.parentNode.insertBefore(o, s);
  }

  // fastClick.js
  async ("https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js", function () {
    var $nav = document.querySelector("nav");
    if ($nav)
      FastClick.attach($nav);
    }
  )
</script>

<!-- Because of the native support for backtick-style fenced code blocks right within the Markdown is landed in Github Pages, From V1.6, There is no need for Highlight.js, so Huxblog drops it officially. -
https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0 - https://help.github.com/articles/creating-and-highlighting-code-blocks/ -->
<!-- <script> async ("http://cdn.bootcss.com/highlight.js/8.6/highlight.min.js", function () { hljs.initHighlightingOnLoad(); }) </script> <link href="http://cdn.bootcss.com/highlight.js/8.6/styles/github.min.css" rel="stylesheet"> -->

<!-- jquery.tagcloud.js -->
<!-- <script> // only load tagcloud.js in tag.html if ($('#tag_cloud').length !== 0) { async ("https://ysx.cosine.ren/js/jquery.tagcloud.js", function () { $.fn.tagcloud.defaults = { // size: { start: 1, end: 1, unit: 'em' }, color: {
start: '#bbbbee', end: '#0085a1' } }; $('#tag_cloud a').tagcloud(); }) } </script> -->


		<!-- Search -->
		
		<div class="popup search-popup local-search-popup">
  <span class="popup-btn-close">
    ESC
  </span>
  <div class="container">
    <div class="row">
      <!-- <div class="col-md-9 col-md-offset-1"> -->
      <div class="col-lg-9 col-lg-offset-1 col-md-10 col-md-offset-1 local-search-content">

        <div class="local-search-header clearfix">

          <div class="local-search-input-wrapper">
            <span class="search-icon">
              <i class="fa fa-search fa-lg" style="margin: 25px 10px 25px 20px;"></i>
            </span>
            <input autocomplete="off" placeholder="搜索..." type="text" id="local-search-input">
          </div>
        </div>
        <div id="local-search-result"></div>
      </div>
    </div>
  </div>
</div>


  
    <script src="/js/ziploader.js"></script>
  
  <script>
    // Popup Window;
    var isfetched = false;
    var isXml = true;
    // Search DB path;
    var search_path = "search.json";
    if (search_path.length === 0) {
      search_path = "search.xml";
    } else if (/json$/i.test(search_path)) {
      isXml = false;
    }
    // monitor main search box;
    var onPopupClose = function (e) {
      $('.popup').fadeOut(300);
      $('#local-search-input').val('');
      $('.search-result-list').remove();
      $('#no-result').remove();
      $('body').css('overflow', '');
    }

    function proceedsearch() {
      $('.popup').fadeIn(300);
      var $localSearchInput = $('#local-search-input');
      $localSearchInput.attr("autocapitalize", "none");
      $localSearchInput.attr("autocorrect", "off");
      $localSearchInput.focus();
    }
    // get search zip version
    $.get('/searchVersion.json?t=' + (+new Date()), function (res) {
      if (localStorage.getItem('searchVersion') !== res) {
        localStorage.setItem('searchVersion', res);
        initSearchJson();
      }
    });

    function initSearchJson() {
      initLoad(['/search.flv'], {
        loadOptions: {
          success: function (obj) {
            localStorage.setItem('searchJson', obj['search.json'])
          },
          error: function (e) {
            return console.log(e)
          }
        },
        returnOptions: {
          'json': TYPE_TEXT
        },
        mimeOptions: {
          'json': 'application/json'
        }
      })
    }
    // search function;
    var searchFunc = function (search_id, content_id) {
      'use strict';
      isfetched = true;
      var datas = JSON.parse(localStorage.getItem('searchJson'));
      // console.log(search_id)
      var input = document.getElementById(search_id);
      var resultContent = document.getElementById(content_id);
      var inputEventFunction = function () {
        var searchText = input.value.trim().toLowerCase();
        var keywords = searchText.split(/[\s\-]+/);
        if (keywords.length > 1) {
          keywords.push(searchText);
        }
        var resultItems = [];
        if (searchText.length > 0) {
          // perform local searching
          datas.forEach(function (data) {
            var isMatch = false;
            var hitCount = 0;
            var searchTextCount = 0;
            var title = data.title
              ? data.title.trim()
              : '';
            var titleInLowerCase = title.toLowerCase();
            var content = data.content
              ? data.content.trim().replace(/<[^>]+>/g, "")
              : '';
            var contentInLowerCase = content.toLowerCase();
            var articleUrl = decodeURIComponent(data.url);

            var date = data.date;
            var dateTime = date.replace(/T/, " ").replace(/.000Z/, "");
            var imgUrl = data.header_img;
            


            var indexOfTitle = [];
            var indexOfContent = [];
            // only match articles with not empty titles
            keywords.forEach(function (keyword) {
              function getIndexByWord(word, text, caseSensitive) {
                var wordLen = word.length;
                if (wordLen === 0) {
                  return [];
                }
                var startPosition = 0,
                  position = [],
                  index = [];
                if (!caseSensitive) {
                  text = text.toLowerCase();
                  word = word.toLowerCase();
                }
                while ((position = text.indexOf(word, startPosition)) > -1) {
                  index.push({position: position, word: word});
                  startPosition = position + wordLen;
                }
                return index;
              }
              indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false));
              indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false));
            });
            if (indexOfTitle.length > 0 || indexOfContent.length > 0) {
              isMatch = true;
              hitCount = indexOfTitle.length + indexOfContent.length;
            }
            // show search results
            if (isMatch) {
              // sort index by position of keyword
              [indexOfTitle, indexOfContent].forEach(function (index) {
                index.sort(function (itemLeft, itemRight) {
                  if (itemRight.position !== itemLeft.position) {
                    return itemRight.position - itemLeft.position;
                  } else {
                    return itemLeft.word.length - itemRight.word.length;
                  }
                });
              });
              // merge hits into slices
              function mergeIntoSlice(text, start, end, index) {
                var item = index[index.length - 1];
                var position = item.position;
                var word = item.word;
                var hits = [];
                var searchTextCountInSlice = 0;
                while (position + word.length <= end && index.length != 0) {
                  if (word === searchText) {
                    searchTextCountInSlice++;
                  }
                  hits.push({position: position, length: word.length});
                  var wordEnd = position + word.length;
                  // move to next position of hit
                  index.pop();
                  while (index.length != 0) {
                    item = index[index.length - 1];
                    position = item.position;
                    word = item.word;
                    if (wordEnd > position) {
                      index.pop();
                    } else {
                      break;
                    }
                  }
                }
                searchTextCount += searchTextCountInSlice;
                return {hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice};
              }
              var slicesOfTitle = [];
              if (indexOfTitle.length != 0) {
                slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle));
              }
              var slicesOfContent = [];
              while (indexOfContent.length != 0) {
                var item = indexOfContent[indexOfContent.length - 1];
                var position = item.position;
                var word = item.word;
                // cut out 100 characters
                var start = position - 20;
                var end = position + 80;
                if (start < 0) {
                  start = 0;
                }
                if (end < position + word.length) {
                  end = position + word.length;
                }
                if (end > content.length) {
                  end = content.length;
                }
                slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent));
              }
              // sort slices in content by search text's count and hits' count
              slicesOfContent.sort(function (sliceLeft, sliceRight) {
                if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) {
                  return sliceRight.searchTextCount - sliceLeft.searchTextCount;
                } else if (sliceLeft.hits.length !== sliceRight.hits.length) {
                  return sliceRight.hits.length - sliceLeft.hits.length;
                } else {
                  return sliceLeft.start - sliceRight.start;
                }
              });
              // select top N slices in content
              var upperBound = parseInt('1');
              if (upperBound >= 0) {
                slicesOfContent = slicesOfContent.slice(0, upperBound);
              }
              // highlight title and content
              function highlightKeyword(text, slice) {
                var result = '';
                var prevEnd = slice.start;
                slice.hits.forEach(function (hit) {
                  result += text.substring(prevEnd, hit.position);
                  var end = hit.position + hit.length;
                  result += '<b class="search-keyword">' + text.substring(hit.position, end) + '</b>';
                  prevEnd = end;
                });
                result += text.substring(prevEnd, slice.end);
                return result;
              }
              var resultItem = '';

              // if (slicesOfTitle.length != 0) {   resultItem += "<li><a target='_blank' href='" + articleUrl + "' class='search-result-title'>" + highlightKeyword(title, slicesOfTitle[0]) + "</a>"; } else {   resultItem += "<li><a target='_blank' href='" +
              // articleUrl + "' class='search-result-title'>" + title + "</a>"; } slicesOfContent.forEach(function (slice) {   resultItem += "<a target='_blank' href='" + articleUrl + "'><p class=\"search-result\">" + highlightKeyword(content, slice) +
              // "...</p></a>"; }); resultItem += "</li>";

              if (slicesOfTitle.length != 0) {
                resultItem += "<a target='_blank' href='" + articleUrl + "' class='search-result'><div class='search-result-left'><div class='search-result-title'>" + highlightKeyword(title, slicesOfTitle[0]) + "</div><time class='search-result-date'>" + dateTime + "</time>";
              } else {
                resultItem += "<a target='_blank' href='" + articleUrl + "' class='search-result'><div class='search-result-left'><div class='search-result-title'>" + title + "</div><time class='search-result-date'>" + dateTime + "</time>";
              }
              slicesOfContent.forEach(function (slice) {
                resultItem += "<p class=\"search-result-content\">" + highlightKeyword(content, slice) + "...</p>";
              });
              resultItem += "</div><div class='search-result-right'><img class='media-image' src='" + imgUrl + "' width='64px' height='48px'></img></div></a>";

              resultItems.push({item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length});
            }
          })
        };

        if (keywords.length === 1 && keywords[0] === "") {
          resultContent.innerHTML = '<div id="no-result"></div>'
        } else if (resultItems.length === 0) {
          resultContent.innerHTML = '<div id="no-result"></div>'
        } else {
          resultItems.sort(function (resultLeft, resultRight) {
            if (resultLeft.searchTextCount !== resultRight.searchTextCount) {
              return resultRight.searchTextCount - resultLeft.searchTextCount;
            } else if (resultLeft.hitCount !== resultRight.hitCount) {
              return resultRight.hitCount - resultLeft.hitCount;
            } else {
              return resultRight.id - resultLeft.id;
            }
          });
          var searchResultList = '<div class=\"search-result-list\">';
          resultItems.forEach(function (result) {
            searchResultList += result.item;
          })
          searchResultList += "</div>";
          resultContent.innerHTML = searchResultList;
        }
      }
      if ('auto' === 'auto') {
        input.addEventListener('input', inputEventFunction);
      } else {
        $('.search-icon').click(inputEventFunction);
        input.addEventListener('keypress', function (event) {
          if (event.keyCode === 13) {
            inputEventFunction();
          }
        });
      }
      // remove loading animation
      $('body').css('overflow', '');
      proceedsearch();
    }
    // handle and trigger popup window;
    $('.popup-trigger').click(function (e) {
      e.stopPropagation();
      if (isfetched === false) {
        searchFunc('local-search-input', 'local-search-result');
      } else {
        proceedsearch();
      };
    });
    $('.popup-btn-close').click(onPopupClose);
    $('.popup').click(function (e) {
      e.stopPropagation();
    });
    $(document).on('keyup', function (event) {
      var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible');
      if (shouldDismissSearchPopup) {
        onPopupClose();
      }
    });

    document.addEventListener('mouseup', (e) => {
      var _con = document.querySelector(".local-search-content");
      if (_con) {
        if (!_con.contains(e.target)) {
          onPopupClose();
        }
      }
    });
  </script>


		
	<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        tex2jax: {
            inlineMath: [ ["$","$"], ["\\(","\\)"] ],
            skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'],
            processEscapes: true
        }
    });
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax();
        for (var i = 0; i < all.length; ++i)
            all[i].SourceElement().parentNode.className += ' has-jax';
    });
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
</body>
</html>
